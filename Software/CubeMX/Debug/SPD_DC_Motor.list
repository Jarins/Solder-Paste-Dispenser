
SPD_DC_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  080082c4  080082c4  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c4  080082c4  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200000e0  080083ac  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080083ac  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee57  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004435  00000000  00000000  0003ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000107a6  00000000  00000000  00043395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00053b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  00054df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b8a3  00000000  00000000  00056038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205c4  00000000  00000000  000718db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092f93  00000000  00000000  00091e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00124e32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004008  00000000  00000000  00124e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080078c8 	.word	0x080078c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080078c8 	.word	0x080078c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_frsub>:
 8000a08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a0c:	e002      	b.n	8000a14 <__addsf3>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_fsub>:
 8000a10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a14 <__addsf3>:
 8000a14:	0042      	lsls	r2, r0, #1
 8000a16:	bf1f      	itttt	ne
 8000a18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a1c:	ea92 0f03 	teqne	r2, r3
 8000a20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a28:	d06a      	beq.n	8000b00 <__addsf3+0xec>
 8000a2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a32:	bfc1      	itttt	gt
 8000a34:	18d2      	addgt	r2, r2, r3
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	4048      	eorgt	r0, r1
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	bfb8      	it	lt
 8000a3e:	425b      	neglt	r3, r3
 8000a40:	2b19      	cmp	r3, #25
 8000a42:	bf88      	it	hi
 8000a44:	4770      	bxhi	lr
 8000a46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a62:	bf18      	it	ne
 8000a64:	4249      	negne	r1, r1
 8000a66:	ea92 0f03 	teq	r2, r3
 8000a6a:	d03f      	beq.n	8000aec <__addsf3+0xd8>
 8000a6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a70:	fa41 fc03 	asr.w	ip, r1, r3
 8000a74:	eb10 000c 	adds.w	r0, r0, ip
 8000a78:	f1c3 0320 	rsb	r3, r3, #32
 8000a7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a84:	d502      	bpl.n	8000a8c <__addsf3+0x78>
 8000a86:	4249      	negs	r1, r1
 8000a88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a90:	d313      	bcc.n	8000aba <__addsf3+0xa6>
 8000a92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a96:	d306      	bcc.n	8000aa6 <__addsf3+0x92>
 8000a98:	0840      	lsrs	r0, r0, #1
 8000a9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9e:	f102 0201 	add.w	r2, r2, #1
 8000aa2:	2afe      	cmp	r2, #254	; 0xfe
 8000aa4:	d251      	bcs.n	8000b4a <__addsf3+0x136>
 8000aa6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aae:	bf08      	it	eq
 8000ab0:	f020 0001 	biceq.w	r0, r0, #1
 8000ab4:	ea40 0003 	orr.w	r0, r0, r3
 8000ab8:	4770      	bx	lr
 8000aba:	0049      	lsls	r1, r1, #1
 8000abc:	eb40 0000 	adc.w	r0, r0, r0
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	bf28      	it	cs
 8000ac4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac8:	d2ed      	bcs.n	8000aa6 <__addsf3+0x92>
 8000aca:	fab0 fc80 	clz	ip, r0
 8000ace:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ada:	bfaa      	itet	ge
 8000adc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae0:	4252      	neglt	r2, r2
 8000ae2:	4318      	orrge	r0, r3
 8000ae4:	bfbc      	itt	lt
 8000ae6:	40d0      	lsrlt	r0, r2
 8000ae8:	4318      	orrlt	r0, r3
 8000aea:	4770      	bx	lr
 8000aec:	f092 0f00 	teq	r2, #0
 8000af0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af4:	bf06      	itte	eq
 8000af6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000afa:	3201      	addeq	r2, #1
 8000afc:	3b01      	subne	r3, #1
 8000afe:	e7b5      	b.n	8000a6c <__addsf3+0x58>
 8000b00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b08:	bf18      	it	ne
 8000b0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0e:	d021      	beq.n	8000b54 <__addsf3+0x140>
 8000b10:	ea92 0f03 	teq	r2, r3
 8000b14:	d004      	beq.n	8000b20 <__addsf3+0x10c>
 8000b16:	f092 0f00 	teq	r2, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	4608      	moveq	r0, r1
 8000b1e:	4770      	bx	lr
 8000b20:	ea90 0f01 	teq	r0, r1
 8000b24:	bf1c      	itt	ne
 8000b26:	2000      	movne	r0, #0
 8000b28:	4770      	bxne	lr
 8000b2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2e:	d104      	bne.n	8000b3a <__addsf3+0x126>
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	bf28      	it	cs
 8000b34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	4770      	bx	lr
 8000b3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3e:	bf3c      	itt	cc
 8000b40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bxcc	lr
 8000b46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b52:	4770      	bx	lr
 8000b54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b58:	bf16      	itet	ne
 8000b5a:	4608      	movne	r0, r1
 8000b5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b60:	4601      	movne	r1, r0
 8000b62:	0242      	lsls	r2, r0, #9
 8000b64:	bf06      	itte	eq
 8000b66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6a:	ea90 0f01 	teqeq	r0, r1
 8000b6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_ui2f>:
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e004      	b.n	8000b84 <__aeabi_i2f+0x8>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_i2f>:
 8000b7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b80:	bf48      	it	mi
 8000b82:	4240      	negmi	r0, r0
 8000b84:	ea5f 0c00 	movs.w	ip, r0
 8000b88:	bf08      	it	eq
 8000b8a:	4770      	bxeq	lr
 8000b8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b90:	4601      	mov	r1, r0
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	e01c      	b.n	8000bd2 <__aeabi_l2f+0x2a>

08000b98 <__aeabi_ul2f>:
 8000b98:	ea50 0201 	orrs.w	r2, r0, r1
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e00a      	b.n	8000bbc <__aeabi_l2f+0x14>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_l2f>:
 8000ba8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__aeabi_l2f+0x14>
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbc:	ea5f 0c01 	movs.w	ip, r1
 8000bc0:	bf02      	ittt	eq
 8000bc2:	4684      	moveq	ip, r0
 8000bc4:	4601      	moveq	r1, r0
 8000bc6:	2000      	moveq	r0, #0
 8000bc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bcc:	bf08      	it	eq
 8000bce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd6:	fabc f28c 	clz	r2, ip
 8000bda:	3a08      	subs	r2, #8
 8000bdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be0:	db10      	blt.n	8000c04 <__aeabi_l2f+0x5c>
 8000be2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be6:	4463      	add	r3, ip
 8000be8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bec:	f1c2 0220 	rsb	r2, r2, #32
 8000bf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf8:	eb43 0002 	adc.w	r0, r3, r2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f102 0220 	add.w	r2, r2, #32
 8000c08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c14:	fa21 f202 	lsr.w	r2, r1, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_fmul>:
 8000c24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c32:	ea92 0f0c 	teqne	r2, ip
 8000c36:	ea93 0f0c 	teqne	r3, ip
 8000c3a:	d06f      	beq.n	8000d1c <__aeabi_fmul+0xf8>
 8000c3c:	441a      	add	r2, r3
 8000c3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c42:	0240      	lsls	r0, r0, #9
 8000c44:	bf18      	it	ne
 8000c46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c4a:	d01e      	beq.n	8000c8a <__aeabi_fmul+0x66>
 8000c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c58:	fba0 3101 	umull	r3, r1, r0, r1
 8000c5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c64:	bf3e      	ittt	cc
 8000c66:	0049      	lslcc	r1, r1, #1
 8000c68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c6c:	005b      	lslcc	r3, r3, #1
 8000c6e:	ea40 0001 	orr.w	r0, r0, r1
 8000c72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c76:	2afd      	cmp	r2, #253	; 0xfd
 8000c78:	d81d      	bhi.n	8000cb6 <__aeabi_fmul+0x92>
 8000c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c82:	bf08      	it	eq
 8000c84:	f020 0001 	biceq.w	r0, r0, #1
 8000c88:	4770      	bx	lr
 8000c8a:	f090 0f00 	teq	r0, #0
 8000c8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c92:	bf08      	it	eq
 8000c94:	0249      	lsleq	r1, r1, #9
 8000c96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c9e:	3a7f      	subs	r2, #127	; 0x7f
 8000ca0:	bfc2      	ittt	gt
 8000ca2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ca6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000caa:	4770      	bxgt	lr
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	dc5d      	bgt.n	8000d74 <__aeabi_fmul+0x150>
 8000cb8:	f112 0f19 	cmn.w	r2, #25
 8000cbc:	bfdc      	itt	le
 8000cbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cc2:	4770      	bxle	lr
 8000cc4:	f1c2 0200 	rsb	r2, r2, #0
 8000cc8:	0041      	lsls	r1, r0, #1
 8000cca:	fa21 f102 	lsr.w	r1, r1, r2
 8000cce:	f1c2 0220 	rsb	r2, r2, #32
 8000cd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cda:	f140 0000 	adc.w	r0, r0, #0
 8000cde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ce2:	bf08      	it	eq
 8000ce4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce8:	4770      	bx	lr
 8000cea:	f092 0f00 	teq	r2, #0
 8000cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cf2:	bf02      	ittt	eq
 8000cf4:	0040      	lsleq	r0, r0, #1
 8000cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cfa:	3a01      	subeq	r2, #1
 8000cfc:	d0f9      	beq.n	8000cf2 <__aeabi_fmul+0xce>
 8000cfe:	ea40 000c 	orr.w	r0, r0, ip
 8000d02:	f093 0f00 	teq	r3, #0
 8000d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	bf02      	ittt	eq
 8000d0c:	0049      	lsleq	r1, r1, #1
 8000d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d12:	3b01      	subeq	r3, #1
 8000d14:	d0f9      	beq.n	8000d0a <__aeabi_fmul+0xe6>
 8000d16:	ea41 010c 	orr.w	r1, r1, ip
 8000d1a:	e78f      	b.n	8000c3c <__aeabi_fmul+0x18>
 8000d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d20:	ea92 0f0c 	teq	r2, ip
 8000d24:	bf18      	it	ne
 8000d26:	ea93 0f0c 	teqne	r3, ip
 8000d2a:	d00a      	beq.n	8000d42 <__aeabi_fmul+0x11e>
 8000d2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d30:	bf18      	it	ne
 8000d32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	d1d8      	bne.n	8000cea <__aeabi_fmul+0xc6>
 8000d38:	ea80 0001 	eor.w	r0, r0, r1
 8000d3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d40:	4770      	bx	lr
 8000d42:	f090 0f00 	teq	r0, #0
 8000d46:	bf17      	itett	ne
 8000d48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	f091 0f00 	teqne	r1, #0
 8000d52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d56:	d014      	beq.n	8000d82 <__aeabi_fmul+0x15e>
 8000d58:	ea92 0f0c 	teq	r2, ip
 8000d5c:	d101      	bne.n	8000d62 <__aeabi_fmul+0x13e>
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	d10f      	bne.n	8000d82 <__aeabi_fmul+0x15e>
 8000d62:	ea93 0f0c 	teq	r3, ip
 8000d66:	d103      	bne.n	8000d70 <__aeabi_fmul+0x14c>
 8000d68:	024b      	lsls	r3, r1, #9
 8000d6a:	bf18      	it	ne
 8000d6c:	4608      	movne	r0, r1
 8000d6e:	d108      	bne.n	8000d82 <__aeabi_fmul+0x15e>
 8000d70:	ea80 0001 	eor.w	r0, r0, r1
 8000d74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	4770      	bx	lr
 8000d82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_fdiv>:
 8000d8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d94:	bf1e      	ittt	ne
 8000d96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9a:	ea92 0f0c 	teqne	r2, ip
 8000d9e:	ea93 0f0c 	teqne	r3, ip
 8000da2:	d069      	beq.n	8000e78 <__aeabi_fdiv+0xec>
 8000da4:	eba2 0203 	sub.w	r2, r2, r3
 8000da8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dac:	0249      	lsls	r1, r1, #9
 8000dae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000db2:	d037      	beq.n	8000e24 <__aeabi_fdiv+0x98>
 8000db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	bf38      	it	cc
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	bf24      	itt	cs
 8000dd6:	1a5b      	subcs	r3, r3, r1
 8000dd8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ddc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000de6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dee:	bf24      	itt	cs
 8000df0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000df8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dfc:	bf24      	itt	cs
 8000dfe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e0e:	d1e0      	bne.n	8000dd2 <__aeabi_fdiv+0x46>
 8000e10:	2afd      	cmp	r2, #253	; 0xfd
 8000e12:	f63f af50 	bhi.w	8000cb6 <__aeabi_fmul+0x92>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2c:	327f      	adds	r2, #127	; 0x7f
 8000e2e:	bfc2      	ittt	gt
 8000e30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e38:	4770      	bxgt	lr
 8000e3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	3a01      	subs	r2, #1
 8000e44:	e737      	b.n	8000cb6 <__aeabi_fmul+0x92>
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fdiv+0xc2>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fdiv+0xda>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e795      	b.n	8000da4 <__aeabi_fdiv+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d108      	bne.n	8000e94 <__aeabi_fdiv+0x108>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	f47f af7d 	bne.w	8000d82 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	f47f af70 	bne.w	8000d70 <__aeabi_fmul+0x14c>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e776      	b.n	8000d82 <__aeabi_fmul+0x15e>
 8000e94:	ea93 0f0c 	teq	r3, ip
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fdiv+0x118>
 8000e9a:	024b      	lsls	r3, r1, #9
 8000e9c:	f43f af4c 	beq.w	8000d38 <__aeabi_fmul+0x114>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e76e      	b.n	8000d82 <__aeabi_fmul+0x15e>
 8000ea4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea8:	bf18      	it	ne
 8000eaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eae:	d1ca      	bne.n	8000e46 <__aeabi_fdiv+0xba>
 8000eb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000eb4:	f47f af5c 	bne.w	8000d70 <__aeabi_fmul+0x14c>
 8000eb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ebc:	f47f af3c 	bne.w	8000d38 <__aeabi_fmul+0x114>
 8000ec0:	e75f      	b.n	8000d82 <__aeabi_fmul+0x15e>
 8000ec2:	bf00      	nop

08000ec4 <__gesf2>:
 8000ec4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec8:	e006      	b.n	8000ed8 <__cmpsf2+0x4>
 8000eca:	bf00      	nop

08000ecc <__lesf2>:
 8000ecc:	f04f 0c01 	mov.w	ip, #1
 8000ed0:	e002      	b.n	8000ed8 <__cmpsf2+0x4>
 8000ed2:	bf00      	nop

08000ed4 <__cmpsf2>:
 8000ed4:	f04f 0c01 	mov.w	ip, #1
 8000ed8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000edc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	bf18      	it	ne
 8000eea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eee:	d011      	beq.n	8000f14 <__cmpsf2+0x40>
 8000ef0:	b001      	add	sp, #4
 8000ef2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef6:	bf18      	it	ne
 8000ef8:	ea90 0f01 	teqne	r0, r1
 8000efc:	bf58      	it	pl
 8000efe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f02:	bf88      	it	hi
 8000f04:	17c8      	asrhi	r0, r1, #31
 8000f06:	bf38      	it	cc
 8000f08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f0c:	bf18      	it	ne
 8000f0e:	f040 0001 	orrne.w	r0, r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f18:	d102      	bne.n	8000f20 <__cmpsf2+0x4c>
 8000f1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1e:	d105      	bne.n	8000f2c <__cmpsf2+0x58>
 8000f20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f24:	d1e4      	bne.n	8000ef0 <__cmpsf2+0x1c>
 8000f26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f2a:	d0e1      	beq.n	8000ef0 <__cmpsf2+0x1c>
 8000f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__aeabi_cfrcmple>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4661      	mov	r1, ip
 8000f3a:	e7ff      	b.n	8000f3c <__aeabi_cfcmpeq>

08000f3c <__aeabi_cfcmpeq>:
 8000f3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3e:	f7ff ffc9 	bl	8000ed4 <__cmpsf2>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	bf48      	it	mi
 8000f46:	f110 0f00 	cmnmi.w	r0, #0
 8000f4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f4c <__aeabi_fcmpeq>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff fff4 	bl	8000f3c <__aeabi_cfcmpeq>
 8000f54:	bf0c      	ite	eq
 8000f56:	2001      	moveq	r0, #1
 8000f58:	2000      	movne	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmplt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffea 	bl	8000f3c <__aeabi_cfcmpeq>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmple>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffe0 	bl	8000f3c <__aeabi_cfcmpeq>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpge>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffd2 	bl	8000f34 <__aeabi_cfrcmple>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpgt>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffc8 	bl	8000f34 <__aeabi_cfrcmple>
 8000fa4:	bf34      	ite	cc
 8000fa6:	2001      	movcc	r0, #1
 8000fa8:	2000      	movcs	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_f2iz>:
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb8:	d30f      	bcc.n	8000fda <__aeabi_f2iz+0x2a>
 8000fba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc2:	d90d      	bls.n	8000fe0 <__aeabi_f2iz+0x30>
 8000fc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fcc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd4:	bf18      	it	ne
 8000fd6:	4240      	negne	r0, r0
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr
 8000fe0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe4:	d101      	bne.n	8000fea <__aeabi_f2iz+0x3a>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	d105      	bne.n	8000ff6 <__aeabi_f2iz+0x46>
 8000fea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fee:	bf08      	it	eq
 8000ff0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr

08000ffc <FLASH_Unlock>:

///Unlocks the FLASH Program Erase Controller.
void FLASH_Unlock(void)
{
	/* Authorize the FPEC Access */
	FLASH->KEYR = FLASH_KEY1;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <FLASH_Unlock+0x10>)
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <FLASH_Unlock+0x14>)
 8001000:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = FLASH_KEY2;
 8001002:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001006:	605a      	str	r2, [r3, #4]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000
 8001010:	45670123 	.word	0x45670123

08001014 <FLASH_GetStatus>:
}

//Returns the FLASH Status.
FLASH_Status FLASH_GetStatus(void)
{
	if ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY)
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FLASH_GetStatus+0x3c>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f013 0f01 	tst.w	r3, #1
 800101c:	d110      	bne.n	8001040 <FLASH_GetStatus+0x2c>
		return FLASH_BUSY;

	if ((FLASH->SR & FLASH_SR_PGERR) != 0)
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FLASH_GetStatus+0x3c>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f013 0f04 	tst.w	r3, #4
 8001026:	d10d      	bne.n	8001044 <FLASH_GetStatus+0x30>
		return FLASH_ERROR_PG_;

	if ((FLASH->SR & FLASH_SR_WRPRTERR) != 0 )
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <FLASH_GetStatus+0x3c>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f013 0f10 	tst.w	r3, #16
 8001030:	d10a      	bne.n	8001048 <FLASH_GetStatus+0x34>
		return FLASH_ERROR_WRP_;

	if ((FLASH->SR & FLASH_OBR_OPTERR) != 0 )
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <FLASH_GetStatus+0x3c>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f013 0f01 	tst.w	r3, #1
 800103a:	d107      	bne.n	800104c <FLASH_GetStatus+0x38>
		return FLASH_ERROR_OPT;

	return FLASH_COMPLETE;
 800103c:	2005      	movs	r0, #5
 800103e:	4770      	bx	lr
		return FLASH_BUSY;
 8001040:	2001      	movs	r0, #1
 8001042:	4770      	bx	lr
		return FLASH_ERROR_PG_;
 8001044:	2002      	movs	r0, #2
 8001046:	4770      	bx	lr
		return FLASH_ERROR_WRP_;
 8001048:	2003      	movs	r0, #3
 800104a:	4770      	bx	lr
		return FLASH_ERROR_OPT;
 800104c:	2004      	movs	r0, #4
}
 800104e:	4770      	bx	lr
 8001050:	40022000 	.word	0x40022000

08001054 <FLASH_WaitForLastOperation_>:
{
 8001054:	b510      	push	{r4, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	4604      	mov	r4, r0
	status = FLASH_GetStatus();
 800105a:	f7ff ffdb 	bl	8001014 <FLASH_GetStatus>
	while ((status == FLASH_BUSY) && (Timeout != 0x00))
 800105e:	e008      	b.n	8001072 <FLASH_WaitForLastOperation_+0x1e>
		for(__IO uint32_t i = 0xFF; i != 0; i--) { }//delay();
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	9b01      	ldr	r3, [sp, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f9      	bne.n	8001060 <FLASH_WaitForLastOperation_+0xc>
		status = FLASH_GetStatus();
 800106c:	f7ff ffd2 	bl	8001014 <FLASH_GetStatus>
		Timeout--;
 8001070:	3c01      	subs	r4, #1
	while ((status == FLASH_BUSY) && (Timeout != 0x00))
 8001072:	2801      	cmp	r0, #1
 8001074:	d103      	bne.n	800107e <FLASH_WaitForLastOperation_+0x2a>
 8001076:	b114      	cbz	r4, 800107e <FLASH_WaitForLastOperation_+0x2a>
		for(__IO uint32_t i = 0xFF; i != 0; i--) { }//delay();
 8001078:	23ff      	movs	r3, #255	; 0xff
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	e7f3      	b.n	8001066 <FLASH_WaitForLastOperation_+0x12>
	if (Timeout == 0)
 800107e:	b10c      	cbz	r4, 8001084 <FLASH_WaitForLastOperation_+0x30>
}
 8001080:	b002      	add	sp, #8
 8001082:	bd10      	pop	{r4, pc}
		status = FLASH_TIMEOUT;
 8001084:	2006      	movs	r0, #6
 8001086:	e7fb      	b.n	8001080 <FLASH_WaitForLastOperation_+0x2c>

08001088 <FLASH_ErasePage>:

//Erases a specified FLASH page.
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
	FLASH_Status status = FLASH_COMPLETE;
	/* Check the parameters */
	//ASSERT(IS_FLASH_ADDRESS(Page_Address));
	/* Wait for last operation to be completed */
	status = FLASH_WaitForLastOperation_(EraseTimeout);
 800108c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001090:	f7ff ffe0 	bl	8001054 <FLASH_WaitForLastOperation_>

	if(status == FLASH_COMPLETE)
 8001094:	2805      	cmp	r0, #5
 8001096:	d000      	beq.n	800109a <FLASH_ErasePage+0x12>
		}
		FLASH->SR = (FLASH_SR_EOP | FLASH_SR_PGERR | FLASH_SR_WRPRTERR);
	}
	/* Return the Erase Status */
	return status;
}
 8001098:	bd10      	pop	{r4, pc}
		FLASH->CR |= FLASH_CR_PER;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <FLASH_ErasePage+0x44>)
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	f042 0202 	orr.w	r2, r2, #2
 80010a2:	611a      	str	r2, [r3, #16]
		FLASH->AR = Page_Address;
 80010a4:	615c      	str	r4, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ac:	611a      	str	r2, [r3, #16]
		status = FLASH_WaitForLastOperation_(EraseTimeout);
 80010ae:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010b2:	f7ff ffcf 	bl	8001054 <FLASH_WaitForLastOperation_>
		if(status != FLASH_TIMEOUT)
 80010b6:	2806      	cmp	r0, #6
 80010b8:	d004      	beq.n	80010c4 <FLASH_ErasePage+0x3c>
			FLASH->CR &= ~FLASH_CR_PER;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <FLASH_ErasePage+0x44>)
 80010bc:	6913      	ldr	r3, [r2, #16]
 80010be:	f023 0302 	bic.w	r3, r3, #2
 80010c2:	6113      	str	r3, [r2, #16]
		FLASH->SR = (FLASH_SR_EOP | FLASH_SR_PGERR | FLASH_SR_WRPRTERR);
 80010c4:	4b01      	ldr	r3, [pc, #4]	; (80010cc <FLASH_ErasePage+0x44>)
 80010c6:	2234      	movs	r2, #52	; 0x34
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	e7e5      	b.n	8001098 <FLASH_ErasePage+0x10>
 80010cc:	40022000 	.word	0x40022000

080010d0 <FLASH_ProgramHalfWord>:

//Programs a half word at a specified address.
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80010d0:	b538      	push	{r3, r4, r5, lr}
	FLASH_Status status = FLASH_BAD_ADDRESS;

	if (IS_FLASH_ADDRESS(Address))
 80010d2:	f100 4278 	add.w	r2, r0, #4160749568	; 0xf8000000
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <FLASH_ProgramHalfWord+0x48>)
 80010d8:	429a      	cmp	r2, r3
 80010da:	d901      	bls.n	80010e0 <FLASH_ProgramHalfWord+0x10>
	FLASH_Status status = FLASH_BAD_ADDRESS;
 80010dc:	2007      	movs	r0, #7
			}
			FLASH->SR = (FLASH_SR_EOP | FLASH_SR_PGERR | FLASH_SR_WRPRTERR);
		}
	}
	return status;
}
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
		status = FLASH_WaitForLastOperation_(ProgramTimeout);
 80010e4:	201f      	movs	r0, #31
 80010e6:	f7ff ffb5 	bl	8001054 <FLASH_WaitForLastOperation_>
		if(status == FLASH_COMPLETE)
 80010ea:	2805      	cmp	r0, #5
 80010ec:	d1f7      	bne.n	80010de <FLASH_ProgramHalfWord+0xe>
			FLASH->CR |= FLASH_CR_PG;
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <FLASH_ProgramHalfWord+0x4c>)
 80010f0:	6913      	ldr	r3, [r2, #16]
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6113      	str	r3, [r2, #16]
			*(__IO uint16_t*)Address = Data;
 80010f8:	8025      	strh	r5, [r4, #0]
			status = FLASH_WaitForLastOperation_(ProgramTimeout);
 80010fa:	201f      	movs	r0, #31
 80010fc:	f7ff ffaa 	bl	8001054 <FLASH_WaitForLastOperation_>
			if(status != FLASH_TIMEOUT)
 8001100:	2806      	cmp	r0, #6
 8001102:	d004      	beq.n	800110e <FLASH_ProgramHalfWord+0x3e>
				FLASH->CR &= ~FLASH_CR_PG;
 8001104:	4a05      	ldr	r2, [pc, #20]	; (800111c <FLASH_ProgramHalfWord+0x4c>)
 8001106:	6913      	ldr	r3, [r2, #16]
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6113      	str	r3, [r2, #16]
			FLASH->SR = (FLASH_SR_EOP | FLASH_SR_PGERR | FLASH_SR_WRPRTERR);
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <FLASH_ProgramHalfWord+0x4c>)
 8001110:	2234      	movs	r2, #52	; 0x34
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	e7e3      	b.n	80010de <FLASH_ProgramHalfWord+0xe>
 8001116:	bf00      	nop
 8001118:	0007fffe 	.word	0x0007fffe
 800111c:	40022000 	.word	0x40022000

08001120 <EE_CheckPage>:
	return ((PageSize / 4)-1);
}

//Check page for blank
uint16_t EE_CheckPage(uint32_t pageBase, uint16_t status)
{
 8001120:	b410      	push	{r4}
	uint32_t pageEnd = pageBase + (uint32_t)PageSize;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <EE_CheckPage+0x3c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4402      	add	r2, r0

	// Page Status not EEPROM_ERASED and not a "state"
	if ((*(__IO uint16_t*)pageBase) != EEPROM_ERASED && (*(__IO uint16_t*)pageBase) != status)
 8001128:	8803      	ldrh	r3, [r0, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001130:	42a3      	cmp	r3, r4
 8001132:	d003      	beq.n	800113c <EE_CheckPage+0x1c>
 8001134:	8803      	ldrh	r3, [r0, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	428b      	cmp	r3, r1
 800113a:	d10b      	bne.n	8001154 <EE_CheckPage+0x34>
		return EEPROM_BAD_FLASH;
	for(pageBase += 4; pageBase < pageEnd; pageBase += 4)
 800113c:	3004      	adds	r0, #4
 800113e:	4290      	cmp	r0, r2
 8001140:	d205      	bcs.n	800114e <EE_CheckPage+0x2e>
		if ((*(__IO uint32_t*)pageBase) != 0xFFFFFFFF)	// Verify if slot is empty
 8001142:	6803      	ldr	r3, [r0, #0]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d106      	bne.n	8001158 <EE_CheckPage+0x38>
	for(pageBase += 4; pageBase < pageEnd; pageBase += 4)
 800114a:	3004      	adds	r0, #4
 800114c:	e7f7      	b.n	800113e <EE_CheckPage+0x1e>
			return EEPROM_BAD_FLASH;
	return EEPROM_OK;
 800114e:	2000      	movs	r0, #0
}
 8001150:	bc10      	pop	{r4}
 8001152:	4770      	bx	lr
		return EEPROM_BAD_FLASH;
 8001154:	2083      	movs	r0, #131	; 0x83
 8001156:	e7fb      	b.n	8001150 <EE_CheckPage+0x30>
			return EEPROM_BAD_FLASH;
 8001158:	2083      	movs	r0, #131	; 0x83
 800115a:	e7f9      	b.n	8001150 <EE_CheckPage+0x30>
 800115c:	2000032c 	.word	0x2000032c

08001160 <EE_ErasePage>:
	return EEPROM_OK;
}

//Erase page with increment erase counter (page + 2)
FLASH_Status EE_ErasePage(uint32_t pageBase)
{
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4604      	mov	r4, r0
	FLASH_Status FlashStatus;
	uint16_t data = (*(__IO uint16_t*)(pageBase));
 8001164:	8803      	ldrh	r3, [r0, #0]
 8001166:	b29b      	uxth	r3, r3
	if ((data == EEPROM_ERASED) || (data == EEPROM_VALID_PAGE) || (data == EEPROM_RECEIVE_DATA))
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	b292      	uxth	r2, r2
 800116c:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8001170:	428a      	cmp	r2, r1
 8001172:	d805      	bhi.n	8001180 <EE_ErasePage+0x20>
 8001174:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001178:	4293      	cmp	r3, r2
 800117a:	d001      	beq.n	8001180 <EE_ErasePage+0x20>
		data = (*(__IO uint16_t*)(pageBase + 2)) + 1;
	else
		data = 0;
 800117c:	2500      	movs	r5, #0
 800117e:	e003      	b.n	8001188 <EE_ErasePage+0x28>
		data = (*(__IO uint16_t*)(pageBase + 2)) + 1;
 8001180:	8861      	ldrh	r1, [r4, #2]
 8001182:	b289      	uxth	r1, r1
 8001184:	3101      	adds	r1, #1
 8001186:	b28d      	uxth	r5, r1

	FlashStatus = FLASH_ErasePage(pageBase);
 8001188:	4620      	mov	r0, r4
 800118a:	f7ff ff7d 	bl	8001088 <FLASH_ErasePage>
	if (FlashStatus == FLASH_COMPLETE)
 800118e:	2805      	cmp	r0, #5
 8001190:	d000      	beq.n	8001194 <EE_ErasePage+0x34>
		FlashStatus = FLASH_ProgramHalfWord(pageBase + 2, data);

	return FlashStatus;
}
 8001192:	bd38      	pop	{r3, r4, r5, pc}
		FlashStatus = FLASH_ProgramHalfWord(pageBase + 2, data);
 8001194:	4629      	mov	r1, r5
 8001196:	1ca0      	adds	r0, r4, #2
 8001198:	f7ff ff9a 	bl	80010d0 <FLASH_ProgramHalfWord>
 800119c:	e7f9      	b.n	8001192 <EE_ErasePage+0x32>

0800119e <EE_CheckErasePage>:
{
 800119e:	b538      	push	{r3, r4, r5, lr}
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
	if (EE_CheckPage(pageBase, status) != EEPROM_OK)
 80011a4:	f7ff ffbc 	bl	8001120 <EE_CheckPage>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b908      	cbnz	r0, 80011b0 <EE_CheckErasePage+0x12>
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
		FlashStatus = EE_ErasePage(pageBase);
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff ffd5 	bl	8001160 <EE_ErasePage>
 80011b6:	b283      	uxth	r3, r0
		if (FlashStatus != FLASH_COMPLETE)
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d1f7      	bne.n	80011ac <EE_CheckErasePage+0xe>
		return EE_CheckPage(pageBase, status);
 80011bc:	4629      	mov	r1, r5
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ffae 	bl	8001120 <EE_CheckPage>
 80011c4:	4603      	mov	r3, r0
 80011c6:	e7f1      	b.n	80011ac <EE_CheckErasePage+0xe>

080011c8 <EE_Format>:
{
 80011c8:	b508      	push	{r3, lr}
	FLASH_Unlock();
 80011ca:	f7ff ff17 	bl	8000ffc <FLASH_Unlock>
	status = EE_CheckErasePage(PageBase0, EEPROM_VALID_PAGE);
 80011ce:	2100      	movs	r1, #0
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <EE_Format+0x40>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f7ff ffe3 	bl	800119e <EE_CheckErasePage>
	if (status != EEPROM_OK)
 80011d8:	b968      	cbnz	r0, 80011f6 <EE_Format+0x2e>
	if ((*(__IO uint16_t*)PageBase0) == EEPROM_ERASED)
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <EE_Format+0x40>)
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	8803      	ldrh	r3, [r0, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d006      	beq.n	80011f8 <EE_Format+0x30>
	return EE_CheckErasePage(PageBase1, EEPROM_ERASED);
 80011ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <EE_Format+0x44>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f7ff ffd4 	bl	800119e <EE_CheckErasePage>
}
 80011f6:	bd08      	pop	{r3, pc}
		FlashStatus = FLASH_ProgramHalfWord(PageBase0, EEPROM_VALID_PAGE);
 80011f8:	2100      	movs	r1, #0
 80011fa:	f7ff ff69 	bl	80010d0 <FLASH_ProgramHalfWord>
		if (FlashStatus != FLASH_COMPLETE)
 80011fe:	2805      	cmp	r0, #5
 8001200:	d0f3      	beq.n	80011ea <EE_Format+0x22>
			return FlashStatus;
 8001202:	b280      	uxth	r0, r0
 8001204:	e7f7      	b.n	80011f6 <EE_Format+0x2e>
 8001206:	bf00      	nop
 8001208:	20000324 	.word	0x20000324
 800120c:	20000330 	.word	0x20000330

08001210 <EE_FindValidPage>:

//Find valid Page for write or read operation
uint32_t EE_FindValidPage(void)
{
	uint16_t status0 = (*(__IO uint16_t*)PageBase0);		// Get Page0 actual status
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <EE_FindValidPage+0x4c>)
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	8803      	ldrh	r3, [r0, #0]
 8001216:	b29b      	uxth	r3, r3
	uint16_t status1 = (*(__IO uint16_t*)PageBase1);		// Get Page1 actual status
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <EE_FindValidPage+0x50>)
 800121a:	6811      	ldr	r1, [r2, #0]
 800121c:	880a      	ldrh	r2, [r1, #0]
 800121e:	b292      	uxth	r2, r2

	if (status0 == EEPROM_VALID_PAGE && status1 == EEPROM_ERASED)
 8001220:	b983      	cbnz	r3, 8001244 <EE_FindValidPage+0x34>
{
 8001222:	b410      	push	{r4}
	if (status0 == EEPROM_VALID_PAGE && status1 == EEPROM_ERASED)
 8001224:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001228:	42a2      	cmp	r2, r4
 800122a:	d007      	beq.n	800123c <EE_FindValidPage+0x2c>
		return PageBase0;
	if (status1 == EEPROM_VALID_PAGE && status0 == EEPROM_ERASED)
 800122c:	b92a      	cbnz	r2, 800123a <EE_FindValidPage+0x2a>
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	d004      	beq.n	8001240 <EE_FindValidPage+0x30>
		return PageBase1;

	return 0;
 8001236:	2000      	movs	r0, #0
 8001238:	e000      	b.n	800123c <EE_FindValidPage+0x2c>
 800123a:	2000      	movs	r0, #0
}
 800123c:	bc10      	pop	{r4}
 800123e:	4770      	bx	lr
		return PageBase1;
 8001240:	4608      	mov	r0, r1
 8001242:	e7fb      	b.n	800123c <EE_FindValidPage+0x2c>
	if (status1 == EEPROM_VALID_PAGE && status0 == EEPROM_ERASED)
 8001244:	b92a      	cbnz	r2, 8001252 <EE_FindValidPage+0x42>
 8001246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124a:	4293      	cmp	r3, r2
 800124c:	d003      	beq.n	8001256 <EE_FindValidPage+0x46>
	return 0;
 800124e:	2000      	movs	r0, #0
 8001250:	4770      	bx	lr
 8001252:	2000      	movs	r0, #0
 8001254:	4770      	bx	lr
		return PageBase1;
 8001256:	4608      	mov	r0, r1
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000324 	.word	0x20000324
 8001260:	20000330 	.word	0x20000330

08001264 <EE_GetVariablesCount>:

//Calculate unique variables in EEPROM
uint16_t EE_GetVariablesCount(uint32_t pageBase, uint16_t skipAddress)
{
 8001264:	b4f0      	push	{r4, r5, r6, r7}
	uint16_t varAddress, nextAddress;
	uint32_t idx;
	uint32_t pageEnd = pageBase + (uint32_t)PageSize;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <EE_GetVariablesCount+0x40>)
 8001268:	681d      	ldr	r5, [r3, #0]
 800126a:	4405      	add	r5, r0
	uint16_t count = 0;

	for (pageBase += 6; pageBase < pageEnd; pageBase += 4)
 800126c:	1d86      	adds	r6, r0, #6
	uint16_t count = 0;
 800126e:	2000      	movs	r0, #0
	for (pageBase += 6; pageBase < pageEnd; pageBase += 4)
 8001270:	e001      	b.n	8001276 <EE_GetVariablesCount+0x12>
	{
		varAddress = (*(__IO uint16_t*)pageBase);
		if (varAddress == 0xFFFF || varAddress == skipAddress)
			continue;

		count++;
 8001272:	4638      	mov	r0, r7
	for (pageBase += 6; pageBase < pageEnd; pageBase += 4)
 8001274:	3604      	adds	r6, #4
 8001276:	42ae      	cmp	r6, r5
 8001278:	d212      	bcs.n	80012a0 <EE_GetVariablesCount+0x3c>
		varAddress = (*(__IO uint16_t*)pageBase);
 800127a:	8834      	ldrh	r4, [r6, #0]
 800127c:	b2a4      	uxth	r4, r4
		if (varAddress == 0xFFFF || varAddress == skipAddress)
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	429c      	cmp	r4, r3
 8001284:	d0f6      	beq.n	8001274 <EE_GetVariablesCount+0x10>
 8001286:	428c      	cmp	r4, r1
 8001288:	d0f4      	beq.n	8001274 <EE_GetVariablesCount+0x10>
		count++;
 800128a:	1c43      	adds	r3, r0, #1
 800128c:	b29f      	uxth	r7, r3
		for(idx = pageBase + 4; idx < pageEnd; idx += 4)
 800128e:	1d33      	adds	r3, r6, #4
 8001290:	42ab      	cmp	r3, r5
 8001292:	d2ee      	bcs.n	8001272 <EE_GetVariablesCount+0xe>
		{
			nextAddress = (*(__IO uint16_t*)idx);
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	b292      	uxth	r2, r2
			if (nextAddress == varAddress)
 8001298:	4294      	cmp	r4, r2
 800129a:	d0eb      	beq.n	8001274 <EE_GetVariablesCount+0x10>
		for(idx = pageBase + 4; idx < pageEnd; idx += 4)
 800129c:	3304      	adds	r3, #4
 800129e:	e7f7      	b.n	8001290 <EE_GetVariablesCount+0x2c>
				break;
			}
		}
	}
	return count;
}
 80012a0:	bcf0      	pop	{r4, r5, r6, r7}
 80012a2:	4770      	bx	lr
 80012a4:	2000032c 	.word	0x2000032c

080012a8 <EE_PageTransfer>:

//Transfers last updated variables data from the full Page to an empty one.
uint16_t EE_PageTransfer(uint32_t newPage, uint32_t oldPage, uint16_t SkipAddress)
{
 80012a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ac:	4682      	mov	sl, r0
 80012ae:	468b      	mov	fp, r1
 80012b0:	4691      	mov	r9, r2
	uint32_t oldIdx, newIdx, idx;
	uint16_t address, data, found;
	FLASH_Status FlashStatus;

	// Transfer process: transfer variables from old to the new active page
	newEnd = newPage + ((uint32_t)PageSize);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <EE_PageTransfer+0xb8>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	1817      	adds	r7, r2, r0

	// Find first free element in new page
	for (newIdx = newPage + 4; newIdx < newEnd; newIdx += 4)
 80012b8:	1d05      	adds	r5, r0, #4
 80012ba:	42bd      	cmp	r5, r7
 80012bc:	d205      	bcs.n	80012ca <EE_PageTransfer+0x22>
		if ((*(__IO uint32_t*)newIdx) == 0xFFFFFFFF)	// Verify if element
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d001      	beq.n	80012ca <EE_PageTransfer+0x22>
	for (newIdx = newPage + 4; newIdx < newEnd; newIdx += 4)
 80012c6:	3504      	adds	r5, #4
 80012c8:	e7f7      	b.n	80012ba <EE_PageTransfer+0x12>
			break;									//  contents are 0xFFFFFFFF
	if (newIdx >= newEnd)
 80012ca:	42bd      	cmp	r5, r7
 80012cc:	d241      	bcs.n	8001352 <EE_PageTransfer+0xaa>
		return EEPROM_OUT_SIZE;

	oldEnd = oldPage + 4;
 80012ce:	f10b 0804 	add.w	r8, fp, #4
	oldIdx = oldPage + (uint32_t)(PageSize - 2);
 80012d2:	445a      	add	r2, fp
 80012d4:	1e96      	subs	r6, r2, #2

	for (; oldIdx > oldEnd; oldIdx -= 4)
 80012d6:	e013      	b.n	8001300 <EE_PageTransfer+0x58>
	{
		address = *(__IO uint16_t*)oldIdx;
		if (address == 0xFFFF || address == SkipAddress)
			continue;						// it's means that power off after write data

		found = 0;
 80012d8:	2300      	movs	r3, #0
			{
				found = 1;
				break;
			}

		if (found)
 80012da:	b983      	cbnz	r3, 80012fe <EE_PageTransfer+0x56>
			continue;

		if (newIdx < newEnd)
 80012dc:	42bd      	cmp	r5, r7
 80012de:	d23c      	bcs.n	800135a <EE_PageTransfer+0xb2>
		{
			data = (*(__IO uint16_t*)(oldIdx - 2));
 80012e0:	f836 1c02 	ldrh.w	r1, [r6, #-2]

			FlashStatus = FLASH_ProgramHalfWord(newIdx, data);
 80012e4:	b289      	uxth	r1, r1
 80012e6:	4628      	mov	r0, r5
 80012e8:	f7ff fef2 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 80012ec:	2805      	cmp	r0, #5
 80012ee:	d11d      	bne.n	800132c <EE_PageTransfer+0x84>
				return FlashStatus;

			FlashStatus = FLASH_ProgramHalfWord(newIdx + 2, address);
 80012f0:	4621      	mov	r1, r4
 80012f2:	1ca8      	adds	r0, r5, #2
 80012f4:	f7ff feec 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 80012f8:	2805      	cmp	r0, #5
 80012fa:	d119      	bne.n	8001330 <EE_PageTransfer+0x88>
				return FlashStatus;

			newIdx += 4;
 80012fc:	3504      	adds	r5, #4
	for (; oldIdx > oldEnd; oldIdx -= 4)
 80012fe:	3e04      	subs	r6, #4
 8001300:	4546      	cmp	r6, r8
 8001302:	d917      	bls.n	8001334 <EE_PageTransfer+0x8c>
		address = *(__IO uint16_t*)oldIdx;
 8001304:	8834      	ldrh	r4, [r6, #0]
 8001306:	b2a4      	uxth	r4, r4
		if (address == 0xFFFF || address == SkipAddress)
 8001308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130c:	429c      	cmp	r4, r3
 800130e:	d0f6      	beq.n	80012fe <EE_PageTransfer+0x56>
 8001310:	454c      	cmp	r4, r9
 8001312:	d0f4      	beq.n	80012fe <EE_PageTransfer+0x56>
		for (idx = newPage + 6; idx < newIdx; idx += 4)
 8001314:	f10a 0306 	add.w	r3, sl, #6
 8001318:	429d      	cmp	r5, r3
 800131a:	d9dd      	bls.n	80012d8 <EE_PageTransfer+0x30>
			if ((*(__IO uint16_t*)(idx)) == address)
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	b292      	uxth	r2, r2
 8001320:	42a2      	cmp	r2, r4
 8001322:	d001      	beq.n	8001328 <EE_PageTransfer+0x80>
		for (idx = newPage + 6; idx < newIdx; idx += 4)
 8001324:	3304      	adds	r3, #4
 8001326:	e7f7      	b.n	8001318 <EE_PageTransfer+0x70>
				found = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e7d6      	b.n	80012da <EE_PageTransfer+0x32>
				return FlashStatus;
 800132c:	b284      	uxth	r4, r0
 800132e:	e011      	b.n	8001354 <EE_PageTransfer+0xac>
				return FlashStatus;
 8001330:	b284      	uxth	r4, r0
 8001332:	e00f      	b.n	8001354 <EE_PageTransfer+0xac>
		else
			return EEPROM_OUT_SIZE;
	}

	// Erase the old Page: Set old Page status to EEPROM_EEPROM_ERASED status
	data = EE_CheckErasePage(oldPage, EEPROM_ERASED);
 8001334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001338:	4658      	mov	r0, fp
 800133a:	f7ff ff30 	bl	800119e <EE_CheckErasePage>
	if (data != EEPROM_OK)
 800133e:	4604      	mov	r4, r0
 8001340:	b940      	cbnz	r0, 8001354 <EE_PageTransfer+0xac>
		return data;

	// Set new Page status
	FlashStatus = FLASH_ProgramHalfWord(newPage, EEPROM_VALID_PAGE);
 8001342:	2100      	movs	r1, #0
 8001344:	4650      	mov	r0, sl
 8001346:	f7ff fec3 	bl	80010d0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 800134a:	2805      	cmp	r0, #5
 800134c:	d002      	beq.n	8001354 <EE_PageTransfer+0xac>
		return FlashStatus;
 800134e:	b284      	uxth	r4, r0
 8001350:	e000      	b.n	8001354 <EE_PageTransfer+0xac>
		return EEPROM_OUT_SIZE;
 8001352:	2481      	movs	r4, #129	; 0x81

	return EEPROM_OK;
}
 8001354:	4620      	mov	r0, r4
 8001356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return EEPROM_OUT_SIZE;
 800135a:	2481      	movs	r4, #129	; 0x81
 800135c:	e7fa      	b.n	8001354 <EE_PageTransfer+0xac>
 800135e:	bf00      	nop
 8001360:	2000032c 	.word	0x2000032c

08001364 <EE_Init>:
{
 8001364:	b570      	push	{r4, r5, r6, lr}
	PageBase0 = EEPROM_PAGE0_BASE;
 8001366:	4d52      	ldr	r5, [pc, #328]	; (80014b0 <EE_Init+0x14c>)
 8001368:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <EE_Init+0x150>)
 800136a:	602b      	str	r3, [r5, #0]
	PageBase1 = EEPROM_PAGE1_BASE;
 800136c:	4c52      	ldr	r4, [pc, #328]	; (80014b8 <EE_Init+0x154>)
 800136e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001372:	6023      	str	r3, [r4, #0]
	PageSize = EEPROM_PAGE_SIZE;
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <EE_Init+0x158>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	601a      	str	r2, [r3, #0]
	Status = EEPROM_NOT_INIT;
 800137c:	4e50      	ldr	r6, [pc, #320]	; (80014c0 <EE_Init+0x15c>)
 800137e:	2384      	movs	r3, #132	; 0x84
 8001380:	8033      	strh	r3, [r6, #0]
	FLASH_Unlock();
 8001382:	f7ff fe3b 	bl	8000ffc <FLASH_Unlock>
	Status = EEPROM_NO_VALID_PAGE;
 8001386:	23ab      	movs	r3, #171	; 0xab
 8001388:	8033      	strh	r3, [r6, #0]
	status0 = (*(__IO uint16_t *)PageBase0);
 800138a:	6828      	ldr	r0, [r5, #0]
 800138c:	8803      	ldrh	r3, [r0, #0]
 800138e:	b29b      	uxth	r3, r3
	status1 = (*(__IO uint16_t *)PageBase1);
 8001390:	6824      	ldr	r4, [r4, #0]
 8001392:	8822      	ldrh	r2, [r4, #0]
 8001394:	b292      	uxth	r2, r2
	switch (status0)
 8001396:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 800139a:	428b      	cmp	r3, r1
 800139c:	d03b      	beq.n	8001416 <EE_Init+0xb2>
 800139e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a2:	428b      	cmp	r3, r1
 80013a4:	d010      	beq.n	80013c8 <EE_Init+0x64>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d05b      	beq.n	8001462 <EE_Init+0xfe>
		if (status1 == EEPROM_VALID_PAGE)
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d070      	beq.n	8001490 <EE_Init+0x12c>
		else if (status1 == EEPROM_RECEIVE_DATA)
 80013ae:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d134      	bne.n	8001420 <EE_Init+0xbc>
			FlashStatus = FLASH_ProgramHalfWord(PageBase1, EEPROM_VALID_PAGE);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff fe89 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 80013be:	2805      	cmp	r0, #5
 80013c0:	d06d      	beq.n	800149e <EE_Init+0x13a>
				Status = FlashStatus;
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <EE_Init+0x15c>)
 80013c4:	8018      	strh	r0, [r3, #0]
 80013c6:	e02b      	b.n	8001420 <EE_Init+0xbc>
		if (status1 == EEPROM_VALID_PAGE)			// Page0 erased, Page1 valid
 80013c8:	b162      	cbz	r2, 80013e4 <EE_Init+0x80>
		else if (status1 == EEPROM_RECEIVE_DATA)	// Page0 erased, Page1 receive
 80013ca:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d00f      	beq.n	80013f2 <EE_Init+0x8e>
		else if (status1 == EEPROM_ERASED)			// Both in erased state so format EEPROM
 80013d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d122      	bne.n	8001420 <EE_Init+0xbc>
			Status = EE_Format();
 80013da:	f7ff fef5 	bl	80011c8 <EE_Format>
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <EE_Init+0x15c>)
 80013e0:	8018      	strh	r0, [r3, #0]
 80013e2:	e01d      	b.n	8001420 <EE_Init+0xbc>
			Status = EE_CheckErasePage(PageBase0, EEPROM_ERASED);
 80013e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013e8:	f7ff fed9 	bl	800119e <EE_CheckErasePage>
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <EE_Init+0x15c>)
 80013ee:	8018      	strh	r0, [r3, #0]
 80013f0:	e016      	b.n	8001420 <EE_Init+0xbc>
			FlashStatus = FLASH_ProgramHalfWord(PageBase1, EEPROM_VALID_PAGE);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fe6b 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 80013fa:	2805      	cmp	r0, #5
 80013fc:	d002      	beq.n	8001404 <EE_Init+0xa0>
				Status = FlashStatus;
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <EE_Init+0x15c>)
 8001400:	8018      	strh	r0, [r3, #0]
 8001402:	e00d      	b.n	8001420 <EE_Init+0xbc>
				Status = EE_CheckErasePage(PageBase0, EEPROM_ERASED);
 8001404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <EE_Init+0x14c>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f7ff fec7 	bl	800119e <EE_CheckErasePage>
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <EE_Init+0x15c>)
 8001412:	8018      	strh	r0, [r3, #0]
 8001414:	e004      	b.n	8001420 <EE_Init+0xbc>
		if (status1 == EEPROM_VALID_PAGE)			// Page0 receive, Page1 valid
 8001416:	b132      	cbz	r2, 8001426 <EE_Init+0xc2>
		else if (status1 == EEPROM_ERASED)			// Page0 receive, Page1 erased
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	429a      	cmp	r2, r3
 800141e:	d00a      	beq.n	8001436 <EE_Init+0xd2>
}
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <EE_Init+0x15c>)
 8001422:	8818      	ldrh	r0, [r3, #0]
 8001424:	bd70      	pop	{r4, r5, r6, pc}
			Status = EE_PageTransfer(PageBase0, PageBase1, 0xFFFF);
 8001426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff ff3c 	bl	80012a8 <EE_PageTransfer>
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <EE_Init+0x15c>)
 8001432:	8018      	strh	r0, [r3, #0]
 8001434:	e7f4      	b.n	8001420 <EE_Init+0xbc>
			Status = EE_CheckErasePage(PageBase1, EEPROM_ERASED);
 8001436:	4619      	mov	r1, r3
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff feb0 	bl	800119e <EE_CheckErasePage>
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <EE_Init+0x15c>)
 8001440:	8018      	strh	r0, [r3, #0]
			if (Status == EEPROM_OK)
 8001442:	2800      	cmp	r0, #0
 8001444:	d1ec      	bne.n	8001420 <EE_Init+0xbc>
				FlashStatus = FLASH_ProgramHalfWord(PageBase0, EEPROM_VALID_PAGE);
 8001446:	2100      	movs	r1, #0
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <EE_Init+0x14c>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f7ff fe40 	bl	80010d0 <FLASH_ProgramHalfWord>
				if (FlashStatus != FLASH_COMPLETE)
 8001450:	2805      	cmp	r0, #5
 8001452:	d002      	beq.n	800145a <EE_Init+0xf6>
					Status = FlashStatus;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <EE_Init+0x15c>)
 8001456:	8018      	strh	r0, [r3, #0]
 8001458:	e7e2      	b.n	8001420 <EE_Init+0xbc>
					Status = EEPROM_OK;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <EE_Init+0x15c>)
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	e7de      	b.n	8001420 <EE_Init+0xbc>
		if (status1 == EEPROM_VALID_PAGE)			// Both pages valid
 8001462:	2a00      	cmp	r2, #0
 8001464:	d0dc      	beq.n	8001420 <EE_Init+0xbc>
		else if (status1 == EEPROM_RECEIVE_DATA)
 8001466:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 800146a:	429a      	cmp	r2, r3
 800146c:	d007      	beq.n	800147e <EE_Init+0x11a>
			Status = EE_CheckErasePage(PageBase1, EEPROM_ERASED);
 800146e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff fe93 	bl	800119e <EE_CheckErasePage>
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <EE_Init+0x15c>)
 800147a:	8018      	strh	r0, [r3, #0]
 800147c:	e7d0      	b.n	8001420 <EE_Init+0xbc>
			Status = EE_PageTransfer(PageBase1, PageBase0, 0xFFFF);
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	4601      	mov	r1, r0
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff ff0f 	bl	80012a8 <EE_PageTransfer>
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <EE_Init+0x15c>)
 800148c:	8018      	strh	r0, [r3, #0]
 800148e:	e7c7      	b.n	8001420 <EE_Init+0xbc>
			Status = EE_CheckErasePage(PageBase0, EEPROM_ERASED);	// Check/Erase Page0
 8001490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001494:	f7ff fe83 	bl	800119e <EE_CheckErasePage>
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <EE_Init+0x15c>)
 800149a:	8018      	strh	r0, [r3, #0]
 800149c:	e7c0      	b.n	8001420 <EE_Init+0xbc>
				Status = EE_CheckErasePage(PageBase0, EEPROM_ERASED);
 800149e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <EE_Init+0x14c>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f7ff fe7a 	bl	800119e <EE_CheckErasePage>
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <EE_Init+0x15c>)
 80014ac:	8018      	strh	r0, [r3, #0]
 80014ae:	e7b7      	b.n	8001420 <EE_Init+0xbc>
 80014b0:	20000324 	.word	0x20000324
 80014b4:	0800f800 	.word	0x0800f800
 80014b8:	20000330 	.word	0x20000330
 80014bc:	2000032c 	.word	0x2000032c
 80014c0:	20000328 	.word	0x20000328

080014c4 <EE_Read>:
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4605      	mov	r5, r0
 80014c8:	460e      	mov	r6, r1
	*Data = EEPROM_DEFAULT_DATA;
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	800b      	strh	r3, [r1, #0]
	if (Status == EEPROM_NOT_INIT)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <EE_Read+0x58>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2b84      	cmp	r3, #132	; 0x84
 80014d6:	d010      	beq.n	80014fa <EE_Read+0x36>
	pageBase = EE_FindValidPage();
 80014d8:	f7ff fe9a 	bl	8001210 <EE_FindValidPage>
	if (pageBase == 0)
 80014dc:	4604      	mov	r4, r0
 80014de:	b1d0      	cbz	r0, 8001516 <EE_Read+0x52>
	pageEnd = pageBase + ((uint32_t)(PageSize - 2));
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <EE_Read+0x5c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4403      	add	r3, r0
 80014e6:	3b02      	subs	r3, #2
	for (pageBase += 6; pageEnd >= pageBase; pageEnd -= 4)
 80014e8:	3406      	adds	r4, #6
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	d311      	bcc.n	8001512 <EE_Read+0x4e>
		if ((*(__IO uint16_t*)pageEnd) == Address)		// Compare the read address with the virtual address
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	b292      	uxth	r2, r2
 80014f2:	42aa      	cmp	r2, r5
 80014f4:	d008      	beq.n	8001508 <EE_Read+0x44>
	for (pageBase += 6; pageEnd >= pageBase; pageEnd -= 4)
 80014f6:	3b04      	subs	r3, #4
 80014f8:	e7f7      	b.n	80014ea <EE_Read+0x26>
		if (EE_Init() != EEPROM_OK)
 80014fa:	f7ff ff33 	bl	8001364 <EE_Init>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d0ea      	beq.n	80014d8 <EE_Read+0x14>
			return Status;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <EE_Read+0x58>)
 8001504:	8818      	ldrh	r0, [r3, #0]
 8001506:	e005      	b.n	8001514 <EE_Read+0x50>
			*Data = (*(__IO uint16_t*)(pageEnd - 2));		// Get content of Address-2 which is variable value
 8001508:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800150c:	8033      	strh	r3, [r6, #0]
			return EEPROM_OK;
 800150e:	2000      	movs	r0, #0
 8001510:	e000      	b.n	8001514 <EE_Read+0x50>
	return EEPROM_BAD_ADDRESS;
 8001512:	2082      	movs	r0, #130	; 0x82
}
 8001514:	bd70      	pop	{r4, r5, r6, pc}
		return  EEPROM_NO_VALID_PAGE;
 8001516:	20ab      	movs	r0, #171	; 0xab
 8001518:	e7fc      	b.n	8001514 <EE_Read+0x50>
 800151a:	bf00      	nop
 800151c:	20000328 	.word	0x20000328
 8001520:	2000032c 	.word	0x2000032c

08001524 <EE_VerifyPageFullWriteVariable>:

//Verify if active page is full and Writes variable in EEPROM.
uint16_t EE_VerifyPageFullWriteVariable(uint16_t Address, uint16_t Data)
{
 8001524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001528:	4606      	mov	r6, r0
 800152a:	4688      	mov	r8, r1
	FLASH_Status FlashStatus;
	uint32_t idx, pageBase, pageEnd, newPage;
	uint16_t count;

	// Get valid Page for write operation
	pageBase = EE_FindValidPage();
 800152c:	f7ff fe70 	bl	8001210 <EE_FindValidPage>
	if (pageBase == 0)
 8001530:	2800      	cmp	r0, #0
 8001532:	d069      	beq.n	8001608 <EE_VerifyPageFullWriteVariable+0xe4>
 8001534:	4605      	mov	r5, r0
		return  EEPROM_NO_VALID_PAGE;

	// Get the valid Page end Address
	pageEnd = pageBase + PageSize;			// Set end of page
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <EE_VerifyPageFullWriteVariable+0xf4>)
 8001538:	681f      	ldr	r7, [r3, #0]
 800153a:	4407      	add	r7, r0

	for (idx = pageEnd - 2; idx > pageBase; idx -= 4)
 800153c:	1ebb      	subs	r3, r7, #2
 800153e:	42ab      	cmp	r3, r5
 8001540:	d90f      	bls.n	8001562 <EE_VerifyPageFullWriteVariable+0x3e>
	{
		if ((*(__IO uint16_t*)idx) == Address)		// Find last value for address
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	b292      	uxth	r2, r2
 8001546:	42b2      	cmp	r2, r6
 8001548:	d001      	beq.n	800154e <EE_VerifyPageFullWriteVariable+0x2a>
	for (idx = pageEnd - 2; idx > pageBase; idx -= 4)
 800154a:	3b04      	subs	r3, #4
 800154c:	e7f7      	b.n	800153e <EE_VerifyPageFullWriteVariable+0x1a>
		{
			count = (*(__IO uint16_t*)(idx - 2));	// Read last data
 800154e:	1e98      	subs	r0, r3, #2
 8001550:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001554:	b29b      	uxth	r3, r3
			if (count == Data)
 8001556:	4543      	cmp	r3, r8
 8001558:	d058      	beq.n	800160c <EE_VerifyPageFullWriteVariable+0xe8>
				return EEPROM_OK;
			if (count == 0xFFFF)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	4293      	cmp	r3, r2
 8001560:	d008      	beq.n	8001574 <EE_VerifyPageFullWriteVariable+0x50>
			break;
		}
	}

	// Check each active page address starting from begining
	for (idx = pageBase + 4; idx < pageEnd; idx += 4)
 8001562:	1d2c      	adds	r4, r5, #4
 8001564:	42bc      	cmp	r4, r7
 8001566:	d21d      	bcs.n	80015a4 <EE_VerifyPageFullWriteVariable+0x80>
		if ((*(__IO uint32_t*)idx) == 0xFFFFFFFF)				// Verify if element
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d008      	beq.n	8001582 <EE_VerifyPageFullWriteVariable+0x5e>
	for (idx = pageBase + 4; idx < pageEnd; idx += 4)
 8001570:	3404      	adds	r4, #4
 8001572:	e7f7      	b.n	8001564 <EE_VerifyPageFullWriteVariable+0x40>
				FlashStatus = FLASH_ProgramHalfWord(idx - 2, Data);	// Set variable data
 8001574:	4641      	mov	r1, r8
 8001576:	f7ff fdab 	bl	80010d0 <FLASH_ProgramHalfWord>
				if (FlashStatus == FLASH_COMPLETE)
 800157a:	2805      	cmp	r0, #5
 800157c:	d1f1      	bne.n	8001562 <EE_VerifyPageFullWriteVariable+0x3e>
					return EEPROM_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	e006      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
		{													//  contents are 0xFFFFFFFF
			FlashStatus = FLASH_ProgramHalfWord(idx, Data);	// Set variable data
 8001582:	4641      	mov	r1, r8
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fda3 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 800158a:	2805      	cmp	r0, #5
 800158c:	d002      	beq.n	8001594 <EE_VerifyPageFullWriteVariable+0x70>
				return FlashStatus;
 800158e:	b280      	uxth	r0, r0
	FlashStatus = FLASH_ProgramHalfWord(newPage + 6, Address);
	if (FlashStatus != FLASH_COMPLETE)
		return FlashStatus;

	return EE_PageTransfer(newPage, pageBase, Address);
}
 8001590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			FlashStatus = FLASH_ProgramHalfWord(idx + 2, Address);	// Set variable virtual address
 8001594:	4631      	mov	r1, r6
 8001596:	1ca0      	adds	r0, r4, #2
 8001598:	f7ff fd9a 	bl	80010d0 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 800159c:	2805      	cmp	r0, #5
 800159e:	d037      	beq.n	8001610 <EE_VerifyPageFullWriteVariable+0xec>
				return FlashStatus;
 80015a0:	b280      	uxth	r0, r0
 80015a2:	e7f5      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
	count = EE_GetVariablesCount(pageBase, Address) + 1;
 80015a4:	4631      	mov	r1, r6
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fe5c 	bl	8001264 <EE_GetVariablesCount>
 80015ac:	1c42      	adds	r2, r0, #1
 80015ae:	b292      	uxth	r2, r2
	if (count >= (PageSize / 4 - 1))
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <EE_VerifyPageFullWriteVariable+0xf4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3b01      	subs	r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d22b      	bcs.n	8001614 <EE_VerifyPageFullWriteVariable+0xf0>
	if (pageBase == PageBase1)
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <EE_VerifyPageFullWriteVariable+0xf8>)
 80015be:	681c      	ldr	r4, [r3, #0]
 80015c0:	42ac      	cmp	r4, r5
 80015c2:	d008      	beq.n	80015d6 <EE_VerifyPageFullWriteVariable+0xb2>
	FlashStatus = FLASH_ProgramHalfWord(newPage, EEPROM_RECEIVE_DATA);
 80015c4:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80015c8:	4620      	mov	r0, r4
 80015ca:	f7ff fd81 	bl	80010d0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80015ce:	2805      	cmp	r0, #5
 80015d0:	d004      	beq.n	80015dc <EE_VerifyPageFullWriteVariable+0xb8>
		return FlashStatus;
 80015d2:	b280      	uxth	r0, r0
 80015d4:	e7dc      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
		newPage = PageBase0;		// New page address where variable will be moved to
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <EE_VerifyPageFullWriteVariable+0xfc>)
 80015d8:	681c      	ldr	r4, [r3, #0]
 80015da:	e7f3      	b.n	80015c4 <EE_VerifyPageFullWriteVariable+0xa0>
	FlashStatus = FLASH_ProgramHalfWord(newPage + 4, Data);
 80015dc:	4641      	mov	r1, r8
 80015de:	1d20      	adds	r0, r4, #4
 80015e0:	f7ff fd76 	bl	80010d0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80015e4:	2805      	cmp	r0, #5
 80015e6:	d001      	beq.n	80015ec <EE_VerifyPageFullWriteVariable+0xc8>
		return FlashStatus;
 80015e8:	b280      	uxth	r0, r0
 80015ea:	e7d1      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
	FlashStatus = FLASH_ProgramHalfWord(newPage + 6, Address);
 80015ec:	4631      	mov	r1, r6
 80015ee:	1da0      	adds	r0, r4, #6
 80015f0:	f7ff fd6e 	bl	80010d0 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80015f4:	2805      	cmp	r0, #5
 80015f6:	d001      	beq.n	80015fc <EE_VerifyPageFullWriteVariable+0xd8>
		return FlashStatus;
 80015f8:	b280      	uxth	r0, r0
 80015fa:	e7c9      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
	return EE_PageTransfer(newPage, pageBase, Address);
 80015fc:	4632      	mov	r2, r6
 80015fe:	4629      	mov	r1, r5
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fe51 	bl	80012a8 <EE_PageTransfer>
 8001606:	e7c3      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
		return  EEPROM_NO_VALID_PAGE;
 8001608:	20ab      	movs	r0, #171	; 0xab
 800160a:	e7c1      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
				return EEPROM_OK;
 800160c:	2000      	movs	r0, #0
 800160e:	e7bf      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
			return EEPROM_OK;
 8001610:	2000      	movs	r0, #0
 8001612:	e7bd      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
		return EEPROM_OUT_SIZE;
 8001614:	2081      	movs	r0, #129	; 0x81
 8001616:	e7bb      	b.n	8001590 <EE_VerifyPageFullWriteVariable+0x6c>
 8001618:	2000032c 	.word	0x2000032c
 800161c:	20000330 	.word	0x20000330
 8001620:	20000324 	.word	0x20000324

08001624 <EE_Write>:
{
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
	if (Status == EEPROM_NOT_INIT)
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <EE_Write+0x34>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b84      	cmp	r3, #132	; 0x84
 8001630:	d008      	beq.n	8001644 <EE_Write+0x20>
	if (Address == 0xFFFF)
 8001632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001636:	429c      	cmp	r4, r3
 8001638:	d00b      	beq.n	8001652 <EE_Write+0x2e>
	uint16_t status = EE_VerifyPageFullWriteVariable(Address, Data);
 800163a:	4629      	mov	r1, r5
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff ff71 	bl	8001524 <EE_VerifyPageFullWriteVariable>
}
 8001642:	bd38      	pop	{r3, r4, r5, pc}
		if (EE_Init() != EEPROM_OK)
 8001644:	f7ff fe8e 	bl	8001364 <EE_Init>
 8001648:	2800      	cmp	r0, #0
 800164a:	d0f2      	beq.n	8001632 <EE_Write+0xe>
			return Status;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <EE_Write+0x34>)
 800164e:	8818      	ldrh	r0, [r3, #0]
 8001650:	e7f7      	b.n	8001642 <EE_Write+0x1e>
		return EEPROM_BAD_ADDRESS;
 8001652:	2082      	movs	r0, #130	; 0x82
 8001654:	e7f5      	b.n	8001642 <EE_Write+0x1e>
 8001656:	bf00      	nop
 8001658:	20000328 	.word	0x20000328

0800165c <bbb_Init>:
/*
 * Initialize button, buzzer, battery module
 */
void bbb_Init(void){
	//HAL_TIMEx_PWMN_Start (& htim1, TIM_CHANNEL_3);
}
 800165c:	4770      	bx	lr
	...

08001660 <bbb_Update>:

/*
 * Updates all bbb readings. Handles debouncing.
 * Returns 1 when button update is evaluated, returns 0 when it has been evaluated too recently (earlier than BBB_UPDATEINTERVAL_MS)
 */
uint8_t bbb_Update(void){
 8001660:	b570      	push	{r4, r5, r6, lr}
	bbb_BtnTd* pBtn;


	if( HAL_GetTick() < LastBtnEvtUpdateTimestamp + BBB_UPDATEINTERVAL_MS ){						//If the buttons have been updated recently and no action is done
 8001662:	f000 fdc5 	bl	80021f0 <HAL_GetTick>
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <bbb_Update+0xf8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3319      	adds	r3, #25
 800166c:	4298      	cmp	r0, r3
 800166e:	d20f      	bcs.n	8001690 <bbb_Update+0x30>
		for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){										//Set none event to each of buttons
 8001670:	2300      	movs	r3, #0
 8001672:	e001      	b.n	8001678 <bbb_Update+0x18>
 8001674:	3301      	adds	r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d807      	bhi.n	800168c <bbb_Update+0x2c>
			pBtn = BtnList[i];
 800167c:	4a37      	ldr	r2, [pc, #220]	; (800175c <bbb_Update+0xfc>)
 800167e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
			if(pBtn == 0) continue;
 8001682:	2a00      	cmp	r2, #0
 8001684:	d0f6      	beq.n	8001674 <bbb_Update+0x14>
			pBtn->PrevBtnEvt = bbb_EvtTd_None;
 8001686:	2100      	movs	r1, #0
 8001688:	7711      	strb	r1, [r2, #28]
 800168a:	e7f3      	b.n	8001674 <bbb_Update+0x14>
		}
		return 0;																				//And just return with zero indicating no update happened
 800168c:	2000      	movs	r0, #0
				pBtn->PrevBtnEvt = bbb_EvtTd_High;
			}
		}
	}
	return 1;
}
 800168e:	bd70      	pop	{r4, r5, r6, pc}
	LastBtnEvtUpdateTimestamp = HAL_GetTick();														//Store last update timestamp
 8001690:	f000 fdae 	bl	80021f0 <HAL_GetTick>
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <bbb_Update+0xf8>)
 8001696:	6018      	str	r0, [r3, #0]
	for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){											//Update status of all the buttons in the list
 8001698:	2500      	movs	r5, #0
 800169a:	e02d      	b.n	80016f8 <bbb_Update+0x98>
				pBtn->PrevBtnState = 0;															//Save current state - already normalized logic
 800169c:	2300      	movs	r3, #0
 800169e:	7763      	strb	r3, [r4, #29]
				uint32_t ReleasedToReleased = HAL_GetTick() - pBtn->ReleasedTimestamp;				//Delay between this and previous release (falling edge to falling edge)
 80016a0:	f000 fda6 	bl	80021f0 <HAL_GetTick>
 80016a4:	68e3      	ldr	r3, [r4, #12]
 80016a6:	1ac6      	subs	r6, r0, r3
				pBtn->ReleasedTimestamp = HAL_GetTick();
 80016a8:	f000 fda2 	bl	80021f0 <HAL_GetTick>
 80016ac:	60e0      	str	r0, [r4, #12]
				pBtn->StateChangeInterval = HAL_GetTick() - pBtn->PrevBtnStateTimestamp;			//Calculate press duration
 80016ae:	f000 fd9f 	bl	80021f0 <HAL_GetTick>
 80016b2:	69a3      	ldr	r3, [r4, #24]
 80016b4:	1ac0      	subs	r0, r0, r3
 80016b6:	6120      	str	r0, [r4, #16]
				pBtn->PrevBtnStateTimestamp = HAL_GetTick();										//Update state change timestamp
 80016b8:	f000 fd9a 	bl	80021f0 <HAL_GetTick>
 80016bc:	61a0      	str	r0, [r4, #24]
				if(pBtn->StateChangeInterval > BBB_DOUBLEPRESS_MS){
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80016c4:	d904      	bls.n	80016d0 <bbb_Update+0x70>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt = bbb_EvtTd_LongReleased;
 80016ca:	2305      	movs	r3, #5
 80016cc:	7723      	strb	r3, [r4, #28]
 80016ce:	e011      	b.n	80016f4 <bbb_Update+0x94>
				else if(ReleasedToReleased < BBB_DOUBLEPRESS_MS){
 80016d0:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 80016d4:	d204      	bcs.n	80016e0 <bbb_Update+0x80>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_DoubleReleased;
 80016da:	2304      	movs	r3, #4
 80016dc:	7723      	strb	r3, [r4, #28]
 80016de:	e009      	b.n	80016f4 <bbb_Update+0x94>
					pBtn->SingleReleasedEnsuredTimestamp = HAL_GetTick()+BBB_DOUBLEPRESS_MS;
 80016e0:	f000 fd86 	bl	80021f0 <HAL_GetTick>
 80016e4:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 80016e8:	6160      	str	r0, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_Released;
 80016ea:	2302      	movs	r3, #2
 80016ec:	7723      	strb	r3, [r4, #28]
 80016ee:	e001      	b.n	80016f4 <bbb_Update+0x94>
					pBtn->PrevBtnEvt = bbb_EvtTd_Low;
 80016f0:	23fe      	movs	r3, #254	; 0xfe
 80016f2:	7723      	strb	r3, [r4, #28]
	for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){											//Update status of all the buttons in the list
 80016f4:	3501      	adds	r5, #1
 80016f6:	b2ed      	uxtb	r5, r5
 80016f8:	2d02      	cmp	r5, #2
 80016fa:	d82b      	bhi.n	8001754 <bbb_Update+0xf4>
		pBtn = BtnList[i];																		//Just a shortcut for nicer and shorter code - pointer to currently analyzed button
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <bbb_Update+0xfc>)
 80016fe:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
		if(pBtn == 0) continue;																	//Make sure the handle exists
 8001702:	2c00      	cmp	r4, #0
 8001704:	d0f6      	beq.n	80016f4 <bbb_Update+0x94>
		if(BtnList[i]->Port->IDR & BtnList[i]->Pin) {							//Input with pullup, switch to gnd (0 when pressed, 1 when released). !!!BUT!!! below in the code 0 means not pressed, 1 means pressed - called "normalized logic"
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	421a      	tst	r2, r3
 800170e:	d00f      	beq.n	8001730 <bbb_Update+0xd0>
			if(pBtn->PrevBtnState != 0){														//If button state is different from last reading (released)
 8001710:	7f63      	ldrb	r3, [r4, #29]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1c2      	bne.n	800169c <bbb_Update+0x3c>
				if(pBtn->SingleReleasedEnsuredTimestamp && HAL_GetTick() > pBtn->SingleReleasedEnsuredTimestamp){
 8001716:	6963      	ldr	r3, [r4, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0e9      	beq.n	80016f0 <bbb_Update+0x90>
 800171c:	f000 fd68 	bl	80021f0 <HAL_GetTick>
 8001720:	6963      	ldr	r3, [r4, #20]
 8001722:	4298      	cmp	r0, r3
 8001724:	d9e4      	bls.n	80016f0 <bbb_Update+0x90>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_SingleReleased;
 800172a:	2303      	movs	r3, #3
 800172c:	7723      	strb	r3, [r4, #28]
 800172e:	e7e1      	b.n	80016f4 <bbb_Update+0x94>
			if(pBtn->PrevBtnState != 1){														//If button state is different from last reading (now is pressed, before was not pressed)
 8001730:	7f63      	ldrb	r3, [r4, #29]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <bbb_Update+0xdc>
				pBtn->PrevBtnEvt = bbb_EvtTd_High;
 8001736:	23ff      	movs	r3, #255	; 0xff
 8001738:	7723      	strb	r3, [r4, #28]
 800173a:	e7db      	b.n	80016f4 <bbb_Update+0x94>
				pBtn->PrevBtnState = 1;															//Save current state
 800173c:	2601      	movs	r6, #1
 800173e:	7766      	strb	r6, [r4, #29]
				pBtn->StateChangeInterval = HAL_GetTick() - pBtn->PrevBtnStateTimestamp;
 8001740:	f000 fd56 	bl	80021f0 <HAL_GetTick>
 8001744:	69a3      	ldr	r3, [r4, #24]
 8001746:	1ac0      	subs	r0, r0, r3
 8001748:	6120      	str	r0, [r4, #16]
				pBtn->PrevBtnStateTimestamp = HAL_GetTick();
 800174a:	f000 fd51 	bl	80021f0 <HAL_GetTick>
 800174e:	61a0      	str	r0, [r4, #24]
				pBtn->PrevBtnEvt = bbb_EvtTd_Pressed;
 8001750:	7726      	strb	r6, [r4, #28]
 8001752:	e7cf      	b.n	80016f4 <bbb_Update+0x94>
	return 1;
 8001754:	2001      	movs	r0, #1
 8001756:	e79a      	b.n	800168e <bbb_Update+0x2e>
 8001758:	200000fc 	.word	0x200000fc
 800175c:	080078e0 	.word	0x080078e0

08001760 <bbb_GetBtnStates>:


void bbb_GetBtnStates(uint8_t* pushBtn, uint8_t* pullBtn, uint8_t *cfgBtn){
 8001760:	b410      	push	{r4}
	UT_SAFEASSIGN(pushBtn, !(PushBtn.Port->IDR & PushBtn.Pin));
 8001762:	b148      	cbz	r0, 8001778 <bbb_GetBtnStates+0x18>
 8001764:	4604      	mov	r4, r0
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <bbb_GetBtnStates+0x48>)
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	6880      	ldr	r0, [r0, #8]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4218      	tst	r0, r3
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	7023      	strb	r3, [r4, #0]
	UT_SAFEASSIGN(pullBtn, !(PullBtn.Port->IDR & PushBtn.Pin));
 8001778:	b149      	cbz	r1, 800178e <bbb_GetBtnStates+0x2e>
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <bbb_GetBtnStates+0x4c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <bbb_GetBtnStates+0x48>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4218      	tst	r0, r3
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	700b      	strb	r3, [r1, #0]
	UT_SAFEASSIGN(cfgBtn, !(CfgBtn.Port->IDR & PushBtn.Pin));
 800178e:	b14a      	cbz	r2, 80017a4 <bbb_GetBtnStates+0x44>
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <bbb_GetBtnStates+0x50>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <bbb_GetBtnStates+0x48>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4219      	tst	r1, r3
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	7013      	strb	r3, [r2, #0]
}
 80017a4:	bc10      	pop	{r4}
 80017a6:	4770      	bx	lr
 80017a8:	20000040 	.word	0x20000040
 80017ac:	20000020 	.word	0x20000020
 80017b0:	20000000 	.word	0x20000000

080017b4 <bbb_GetPushBtnState>:


bbb_BtnTd* bbb_GetPushBtnState(void){
	return &PushBtn;
}
 80017b4:	4800      	ldr	r0, [pc, #0]	; (80017b8 <bbb_GetPushBtnState+0x4>)
 80017b6:	4770      	bx	lr
 80017b8:	20000040 	.word	0x20000040

080017bc <bbb_GetPullBtnState>:


bbb_BtnTd* bbb_GetPullBtnState(void){
	return &PullBtn;
}
 80017bc:	4800      	ldr	r0, [pc, #0]	; (80017c0 <bbb_GetPullBtnState+0x4>)
 80017be:	4770      	bx	lr
 80017c0:	20000020 	.word	0x20000020

080017c4 <bbb_GetCfgBtnState>:


bbb_BtnTd* bbb_GetCfgBtnState(void){
	return &CfgBtn;
}
 80017c4:	4800      	ldr	r0, [pc, #0]	; (80017c8 <bbb_GetCfgBtnState+0x4>)
 80017c6:	4770      	bx	lr
 80017c8:	20000000 	.word	0x20000000

080017cc <bbb_WaitSync>:


void bbb_WaitSync(uint16_t waitMs){
 80017cc:	b510      	push	{r4, lr}
 80017ce:	4604      	mov	r4, r0
	uint32_t End = HAL_GetTick() + waitMs;
 80017d0:	f000 fd0e 	bl	80021f0 <HAL_GetTick>
 80017d4:	4404      	add	r4, r0

	while( HAL_GetTick() < End );
 80017d6:	f000 fd0b 	bl	80021f0 <HAL_GetTick>
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d3fb      	bcc.n	80017d6 <bbb_WaitSync+0xa>
}
 80017de:	bd10      	pop	{r4, pc}

080017e0 <bbb_WaitSyncCond>:


void bbb_WaitSyncCond(uint16_t waitMs, uint8_t (*stopRequestFn)(void)){
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4604      	mov	r4, r0
 80017e4:	460d      	mov	r5, r1
	uint32_t End = HAL_GetTick() + waitMs;
 80017e6:	f000 fd03 	bl	80021f0 <HAL_GetTick>
 80017ea:	4404      	add	r4, r0

	while(HAL_GetTick() < End){
 80017ec:	f000 fd00 	bl	80021f0 <HAL_GetTick>
 80017f0:	42a0      	cmp	r0, r4
 80017f2:	d204      	bcs.n	80017fe <bbb_WaitSyncCond+0x1e>
		if(stopRequestFn && stopRequestFn()) return;
 80017f4:	2d00      	cmp	r5, #0
 80017f6:	d0f9      	beq.n	80017ec <bbb_WaitSyncCond+0xc>
 80017f8:	47a8      	blx	r5
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0f6      	beq.n	80017ec <bbb_WaitSyncCond+0xc>
	}
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}

08001800 <bbb_Beep>:

/*
 * Beeps the buzzer with specified tone (0 = off, 1=low, 2=medium, 3=high) for specified time in ms
 * tone 0 with time is just delay
 */
void bbb_Beep(uint8_t tone, uint8_t time){
 8001800:	b530      	push	{r4, r5, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
	volatile uint32_t Stop = HAL_GetTick() + time;
 8001808:	f000 fcf2 	bl	80021f0 <HAL_GetTick>
 800180c:	4405      	add	r5, r0
 800180e:	9501      	str	r5, [sp, #4]

	BuzzerActive = 1;
	if(tone > 4) tone = 4;
 8001810:	2c04      	cmp	r4, #4
 8001812:	d817      	bhi.n	8001844 <bbb_Beep+0x44>

	if(tone > 0){
 8001814:	b174      	cbz	r4, 8001834 <bbb_Beep+0x34>
		//Start timer
		//LL_TIM_SetAutoReload(TIM14, 1200 - tone * 200);
		__HAL_TIM_SET_AUTORELOAD(&htim1, 1200 - tone * 200);
 8001816:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800181a:	fb03 f304 	mul.w	r3, r3, r4
 800181e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <bbb_Beep+0x54>)
 8001824:	6802      	ldr	r2, [r0, #0]
 8001826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001828:	60c3      	str	r3, [r0, #12]
		//LL_TIM_OC_SetCompareCH4(TIM14, (1200 - tone * 200)>>1);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(1200 - tone * 200)>>1);
 800182a:	105b      	asrs	r3, r3, #1
 800182c:	63d3      	str	r3, [r2, #60]	; 0x3c
		//LL_TIM_CC_EnableChannel(TIM14, LL_TIM_CHANNEL_CH4);
		HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_3);
 800182e:	2108      	movs	r1, #8
 8001830:	f003 ff94 	bl	800575c <HAL_TIMEx_PWMN_Start>
		//HAL_TIM_Base_Start(&htim1);
	}

	while(1) if(HAL_GetTick() > Stop) break;
 8001834:	f000 fcdc 	bl	80021f0 <HAL_GetTick>
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	4298      	cmp	r0, r3
 800183c:	d9fa      	bls.n	8001834 <bbb_Beep+0x34>

	if(tone > 0){
 800183e:	b91c      	cbnz	r4, 8001848 <bbb_Beep+0x48>
		HAL_TIMEx_PWMN_Stop (&htim1, TIM_CHANNEL_3);
	}


	BuzzerActive = 0;
}
 8001840:	b003      	add	sp, #12
 8001842:	bd30      	pop	{r4, r5, pc}
	if(tone > 4) tone = 4;
 8001844:	2404      	movs	r4, #4
 8001846:	e7e6      	b.n	8001816 <bbb_Beep+0x16>
		HAL_TIMEx_PWMN_Stop (&htim1, TIM_CHANNEL_3);
 8001848:	2108      	movs	r1, #8
 800184a:	4802      	ldr	r0, [pc, #8]	; (8001854 <bbb_Beep+0x54>)
 800184c:	f003 fff0 	bl	8005830 <HAL_TIMEx_PWMN_Stop>
}
 8001850:	e7f6      	b.n	8001840 <bbb_Beep+0x40>
 8001852:	bf00      	nop
 8001854:	2000050c 	.word	0x2000050c

08001858 <bbb_Melody4>:
	  bbb_Beep(0, time);
	  bbb_Beep(tone3, time);
	  bbb_Beep(0, time);
}

void bbb_Melody4(uint8_t tone1, uint8_t tone2, uint8_t tone3, uint8_t tone4, uint16_t time){
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	460f      	mov	r7, r1
 800185c:	4616      	mov	r6, r2
 800185e:	461d      	mov	r5, r3
	  bbb_Beep(tone1, time);
 8001860:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8001864:	4621      	mov	r1, r4
 8001866:	f7ff ffcb 	bl	8001800 <bbb_Beep>
	  bbb_Beep(0, time);
 800186a:	4621      	mov	r1, r4
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ffc7 	bl	8001800 <bbb_Beep>
	  bbb_Beep(tone2, time);
 8001872:	4621      	mov	r1, r4
 8001874:	4638      	mov	r0, r7
 8001876:	f7ff ffc3 	bl	8001800 <bbb_Beep>
	  bbb_Beep(0, time);
 800187a:	4621      	mov	r1, r4
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ffbf 	bl	8001800 <bbb_Beep>
	  bbb_Beep(tone3, time);
 8001882:	4621      	mov	r1, r4
 8001884:	4630      	mov	r0, r6
 8001886:	f7ff ffbb 	bl	8001800 <bbb_Beep>
	  bbb_Beep(0, time);
 800188a:	4621      	mov	r1, r4
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff ffb7 	bl	8001800 <bbb_Beep>
	  bbb_Beep(tone4, time);
 8001892:	4621      	mov	r1, r4
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff ffb3 	bl	8001800 <bbb_Beep>
	  bbb_Beep(0, time);
 800189a:	4621      	mov	r1, r4
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ffaf 	bl	8001800 <bbb_Beep>
}
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018a4 <disp_DrawFrame>:
char floatBuf[10]; //temp buffer for float conversion

/*
 * Draws frame around specified area (optionally filled with black color)
 */
void disp_DrawFrame(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t isFilled){
 80018a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a8:	4606      	mov	r6, r0
 80018aa:	4689      	mov	r9, r1
 80018ac:	4617      	mov	r7, r2
 80018ae:	4698      	mov	r8, r3
 80018b0:	f89d a020 	ldrb.w	sl, [sp, #32]

	for(uint8_t i=y1; i<=y2; i++){
 80018b4:	460d      	mov	r5, r1
 80018b6:	e015      	b.n	80018e4 <disp_DrawFrame+0x40>
		if(isFilled) for(uint8_t j=x1; j<=x2; j++) SSD1306_DrawPixel(j, i, SSD1306_COLOR_BLACK);
 80018b8:	2200      	movs	r2, #0
 80018ba:	4629      	mov	r1, r5
 80018bc:	b2a0      	uxth	r0, r4
 80018be:	f000 fad1 	bl	8001e64 <SSD1306_DrawPixel>
 80018c2:	3401      	adds	r4, #1
 80018c4:	b2e4      	uxtb	r4, r4
 80018c6:	42bc      	cmp	r4, r7
 80018c8:	d9f6      	bls.n	80018b8 <disp_DrawFrame+0x14>
		SSD1306_DrawPixel(x1, i, SSD1306_COLOR_WHITE);
 80018ca:	b2ac      	uxth	r4, r5
 80018cc:	2201      	movs	r2, #1
 80018ce:	4621      	mov	r1, r4
 80018d0:	4630      	mov	r0, r6
 80018d2:	f000 fac7 	bl	8001e64 <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x2, i, SSD1306_COLOR_WHITE);
 80018d6:	2201      	movs	r2, #1
 80018d8:	4621      	mov	r1, r4
 80018da:	4638      	mov	r0, r7
 80018dc:	f000 fac2 	bl	8001e64 <SSD1306_DrawPixel>
	for(uint8_t i=y1; i<=y2; i++){
 80018e0:	3501      	adds	r5, #1
 80018e2:	b2ed      	uxtb	r5, r5
 80018e4:	4545      	cmp	r5, r8
 80018e6:	d804      	bhi.n	80018f2 <disp_DrawFrame+0x4e>
		if(isFilled) for(uint8_t j=x1; j<=x2; j++) SSD1306_DrawPixel(j, i, SSD1306_COLOR_BLACK);
 80018e8:	f1ba 0f00 	cmp.w	sl, #0
 80018ec:	d0ed      	beq.n	80018ca <disp_DrawFrame+0x26>
 80018ee:	4634      	mov	r4, r6
 80018f0:	e7e9      	b.n	80018c6 <disp_DrawFrame+0x22>
	}

	for(uint8_t i=x1; i<=x2; i++){
 80018f2:	42be      	cmp	r6, r7
 80018f4:	d80d      	bhi.n	8001912 <disp_DrawFrame+0x6e>
		SSD1306_DrawPixel(i, y1, SSD1306_COLOR_WHITE);
 80018f6:	b2b4      	uxth	r4, r6
 80018f8:	2201      	movs	r2, #1
 80018fa:	4649      	mov	r1, r9
 80018fc:	4620      	mov	r0, r4
 80018fe:	f000 fab1 	bl	8001e64 <SSD1306_DrawPixel>
		SSD1306_DrawPixel(i, y2, SSD1306_COLOR_WHITE);
 8001902:	2201      	movs	r2, #1
 8001904:	4641      	mov	r1, r8
 8001906:	4620      	mov	r0, r4
 8001908:	f000 faac 	bl	8001e64 <SSD1306_DrawPixel>
	for(uint8_t i=x1; i<=x2; i++){
 800190c:	3601      	adds	r6, #1
 800190e:	b2f6      	uxtb	r6, r6
 8001910:	e7ef      	b.n	80018f2 <disp_DrawFrame+0x4e>
	}
}
 8001912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001918 <disp_DrawInitScreen>:

/*
 * Draws loading screen with battery voltage and core temperature
 */
#define Start_Y 0//16
void disp_DrawInitScreen(void){
 8001918:	b510      	push	{r4, lr}
 800191a:	b082      	sub	sp, #8
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800191c:	2000      	movs	r0, #0
 800191e:	f000 fa93 	bl	8001e48 <SSD1306_Fill>
	disp_DrawFrame(0, 0, 125, Start_Y+31, 0);
 8001922:	2000      	movs	r0, #0
 8001924:	9000      	str	r0, [sp, #0]
 8001926:	231f      	movs	r3, #31
 8001928:	227d      	movs	r2, #125	; 0x7d
 800192a:	4601      	mov	r1, r0
 800192c:	f7ff ffba 	bl	80018a4 <disp_DrawFrame>
	//SSD1306_DrawRectangle(0, 0, 127, Start_Y+31,SSD1306_COLOR_WHITE);
	SSD1306_GotoXY(1, Start_Y+1);
 8001930:	2101      	movs	r1, #1
 8001932:	4608      	mov	r0, r1
 8001934:	f000 fac0 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(DEVSTRING, &Font_7x10, SSD1306_COLOR_WHITE);
 8001938:	4c0d      	ldr	r4, [pc, #52]	; (8001970 <disp_DrawInitScreen+0x58>)
 800193a:	2201      	movs	r2, #1
 800193c:	4621      	mov	r1, r4
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <disp_DrawInitScreen+0x5c>)
 8001940:	f000 fb0e 	bl	8001f60 <SSD1306_Puts>

	SSD1306_GotoXY(1, Start_Y + 11);
 8001944:	210b      	movs	r1, #11
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fab6 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(NAMESTRING, &Font_7x10, SSD1306_COLOR_WHITE);
 800194c:	2201      	movs	r2, #1
 800194e:	4621      	mov	r1, r4
 8001950:	4809      	ldr	r0, [pc, #36]	; (8001978 <disp_DrawInitScreen+0x60>)
 8001952:	f000 fb05 	bl	8001f60 <SSD1306_Puts>

	SSD1306_GotoXY(1, Start_Y + 21);
 8001956:	2115      	movs	r1, #21
 8001958:	2001      	movs	r0, #1
 800195a:	f000 faad 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(REVSTR, &Font_7x10, SSD1306_COLOR_WHITE);
 800195e:	2201      	movs	r2, #1
 8001960:	4621      	mov	r1, r4
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <disp_DrawInitScreen+0x64>)
 8001964:	f000 fafc 	bl	8001f60 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001968:	f000 fb22 	bl	8001fb0 <SSD1306_UpdateScreen>
}
 800196c:	b002      	add	sp, #8
 800196e:	bd10      	pop	{r4, pc}
 8001970:	20000060 	.word	0x20000060
 8001974:	080078ec 	.word	0x080078ec
 8001978:	080078fc 	.word	0x080078fc
 800197c:	08007910 	.word	0x08007910

08001980 <floatToString>:

//sprintf () is too slow, this function is many times (hundred times) faster
uint8_t floatToString(char * outstr, float value, uint8_t places, uint8_t minwidth)
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001984:	b085      	sub	sp, #20
 8001986:	4682      	mov	sl, r0
 8001988:	460e      	mov	r6, r1
 800198a:	4693      	mov	fp, r2
 800198c:	9301      	str	r3, [sp, #4]
    // make sure we round properly. this could use pow from <math.h>, but doesn't seem worth the import
    // if this rounding step isn't here, the value  54.321 prints as 54.3209

    // calculate rounding term d:   0.5/pow(10,places)
    float d = 0.5;
    if (value < 0)
 800198e:	2100      	movs	r1, #0
 8001990:	4630      	mov	r0, r6
 8001992:	f7ff fae5 	bl	8000f60 <__aeabi_fcmplt>
 8001996:	b950      	cbnz	r0, 80019ae <floatToString+0x2e>
    float d = 0.5;
 8001998:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800199c:	2400      	movs	r4, #0
        d *= -1.0;
    // divide by ten for each decimal place
    for (i = 0; i < places; i++)
 800199e:	455c      	cmp	r4, fp
 80019a0:	d208      	bcs.n	80019b4 <floatToString+0x34>
        d/= 10.0;
 80019a2:	496b      	ldr	r1, [pc, #428]	; (8001b50 <floatToString+0x1d0>)
 80019a4:	f7ff f9f2 	bl	8000d8c <__aeabi_fdiv>
    for (i = 0; i < places; i++)
 80019a8:	3401      	adds	r4, #1
 80019aa:	b2e4      	uxtb	r4, r4
 80019ac:	e7f7      	b.n	800199e <floatToString+0x1e>
        d *= -1.0;
 80019ae:	f04f 403f 	mov.w	r0, #3204448256	; 0xbf000000
 80019b2:	e7f3      	b.n	800199c <floatToString+0x1c>
    // this small addition, combined with truncation will round our values properly
    tempfloat +=  d;
 80019b4:	4631      	mov	r1, r6
 80019b6:	f7ff f82d 	bl	8000a14 <__addsf3>
 80019ba:	4605      	mov	r5, r0

    // first get value tens to be the large power of ten less than value
    if (value < 0)
 80019bc:	2100      	movs	r1, #0
 80019be:	4630      	mov	r0, r6
 80019c0:	f7ff face 	bl	8000f60 <__aeabi_fcmplt>
 80019c4:	b9e0      	cbnz	r0, 8001a00 <floatToString+0x80>
    float d = 0.5;
 80019c6:	2700      	movs	r7, #0
 80019c8:	4c62      	ldr	r4, [pc, #392]	; (8001b54 <floatToString+0x1d4>)
        tempfloat *= -1.0;
    while ((tens * 10.0) <= tempfloat) {
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7fe fd2a 	bl	8000424 <__aeabi_f2d>
 80019d0:	2200      	movs	r2, #0
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <floatToString+0x1d8>)
 80019d4:	f7fe fd7e 	bl	80004d4 <__aeabi_dmul>
 80019d8:	4680      	mov	r8, r0
 80019da:	4689      	mov	r9, r1
 80019dc:	4628      	mov	r0, r5
 80019de:	f7fe fd21 	bl	8000424 <__aeabi_f2d>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4640      	mov	r0, r8
 80019e8:	4649      	mov	r1, r9
 80019ea:	f7fe ffef 	bl	80009cc <__aeabi_dcmple>
 80019ee:	b150      	cbz	r0, 8001a06 <floatToString+0x86>
        tens *= 10.0;
 80019f0:	4957      	ldr	r1, [pc, #348]	; (8001b50 <floatToString+0x1d0>)
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff f916 	bl	8000c24 <__aeabi_fmul>
 80019f8:	4604      	mov	r4, r0
        tenscount += 1;
 80019fa:	3701      	adds	r7, #1
 80019fc:	b2ff      	uxtb	r7, r7
 80019fe:	e7e4      	b.n	80019ca <floatToString+0x4a>
        tempfloat *= -1.0;
 8001a00:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8001a04:	e7df      	b.n	80019c6 <floatToString+0x46>
    }

    if (tenscount > 0)
 8001a06:	2f00      	cmp	r7, #0
 8001a08:	d056      	beq.n	8001ab8 <floatToString+0x138>
        charcount += tenscount;
 8001a0a:	f107 0801 	add.w	r8, r7, #1
 8001a0e:	fa5f f888 	uxtb.w	r8, r8
    else
        charcount += 1;

    if (value < 0)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4630      	mov	r0, r6
 8001a16:	f7ff faa3 	bl	8000f60 <__aeabi_fcmplt>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d14f      	bne.n	8001abe <floatToString+0x13e>
        charcount += 1;
    charcount += 1 + places;
 8001a1e:	44d8      	add	r8, fp
 8001a20:	fa5f f888 	uxtb.w	r8, r8
 8001a24:	f108 0301 	add.w	r3, r8, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	9302      	str	r3, [sp, #8]

    minwidth += 1; // both count the null final character
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	1c4a      	adds	r2, r1, #1
 8001a30:	b2d2      	uxtb	r2, r2
    if (minwidth > charcount){
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d248      	bcs.n	8001ac8 <floatToString+0x148>
        extra = minwidth - charcount;
 8001a36:	eba1 0808 	sub.w	r8, r1, r8
 8001a3a:	fa5f f388 	uxtb.w	r3, r8
 8001a3e:	9301      	str	r3, [sp, #4]
        charcount = minwidth;
 8001a40:	9202      	str	r2, [sp, #8]
//            outstr[c++] = ' ';
//        }
//    }

    // write out the negative if needed
    if (value < 0)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4630      	mov	r0, r6
 8001a46:	f7ff fa8b 	bl	8000f60 <__aeabi_fcmplt>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d13f      	bne.n	8001ace <floatToString+0x14e>
    uint8_t c = 0;
 8001a4e:	2600      	movs	r6, #0
        outstr[c++] = '-';

    if (tenscount == 0)
 8001a50:	b927      	cbnz	r7, 8001a5c <floatToString+0xdc>
        outstr[c++] = '0';
 8001a52:	1c73      	adds	r3, r6, #1
 8001a54:	2230      	movs	r2, #48	; 0x30
 8001a56:	f80a 2006 	strb.w	r2, [sl, r6]
 8001a5a:	b2de      	uxtb	r6, r3
 8001a5c:	f04f 0800 	mov.w	r8, #0
 8001a60:	f8cd b00c 	str.w	fp, [sp, #12]

    for (i=0; i< tenscount; i++) {
 8001a64:	4547      	cmp	r7, r8
 8001a66:	d937      	bls.n	8001ad8 <floatToString+0x158>
        digit = (int) (tempfloat/tens);
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff f98e 	bl	8000d8c <__aeabi_fdiv>
 8001a70:	f7ff fa9e 	bl	8000fb0 <__aeabi_f2iz>
 8001a74:	fa5f f980 	uxtb.w	r9, r0
        itoa(digit, &outstr[c++], 10);
 8001a78:	f106 0b01 	add.w	fp, r6, #1
 8001a7c:	fa5f fb8b 	uxtb.w	fp, fp
 8001a80:	220a      	movs	r2, #10
 8001a82:	eb0a 0106 	add.w	r1, sl, r6
 8001a86:	4648      	mov	r0, r9
 8001a88:	f004 feec 	bl	8006864 <itoa>
        tempfloat = tempfloat - ((float)digit * tens);
 8001a8c:	4648      	mov	r0, r9
 8001a8e:	f7ff f871 	bl	8000b74 <__aeabi_ui2f>
 8001a92:	4621      	mov	r1, r4
 8001a94:	f7ff f8c6 	bl	8000c24 <__aeabi_fmul>
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f7fe ffb8 	bl	8000a10 <__aeabi_fsub>
 8001aa0:	4605      	mov	r5, r0
        tens /= 10.0;
 8001aa2:	492b      	ldr	r1, [pc, #172]	; (8001b50 <floatToString+0x1d0>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff f971 	bl	8000d8c <__aeabi_fdiv>
 8001aaa:	4604      	mov	r4, r0
    for (i=0; i< tenscount; i++) {
 8001aac:	f108 0801 	add.w	r8, r8, #1
 8001ab0:	fa5f f888 	uxtb.w	r8, r8
        itoa(digit, &outstr[c++], 10);
 8001ab4:	465e      	mov	r6, fp
 8001ab6:	e7d5      	b.n	8001a64 <floatToString+0xe4>
        charcount += 1;
 8001ab8:	f04f 0802 	mov.w	r8, #2
 8001abc:	e7a9      	b.n	8001a12 <floatToString+0x92>
        charcount += 1;
 8001abe:	f108 0801 	add.w	r8, r8, #1
 8001ac2:	fa5f f888 	uxtb.w	r8, r8
 8001ac6:	e7aa      	b.n	8001a1e <floatToString+0x9e>
    uint8_t extra = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	e7b9      	b.n	8001a42 <floatToString+0xc2>
        outstr[c++] = '-';
 8001ace:	232d      	movs	r3, #45	; 0x2d
 8001ad0:	f88a 3000 	strb.w	r3, [sl]
 8001ad4:	2601      	movs	r6, #1
 8001ad6:	e7bb      	b.n	8001a50 <floatToString+0xd0>
 8001ad8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    }

    // if no places after decimal, stop now and return

    // otherwise, write the point and continue on
    if (places > 0)
 8001adc:	f1bb 0f00 	cmp.w	fp, #0
 8001ae0:	d004      	beq.n	8001aec <floatToString+0x16c>
    outstr[c++] = '.';
 8001ae2:	1c73      	adds	r3, r6, #1
 8001ae4:	222e      	movs	r2, #46	; 0x2e
 8001ae6:	f80a 2006 	strb.w	r2, [sl, r6]
 8001aea:	b2de      	uxtb	r6, r3
 8001aec:	2400      	movs	r4, #0
 8001aee:	4628      	mov	r0, r5
 8001af0:	e018      	b.n	8001b24 <floatToString+0x1a4>


    // now write out each decimal place by shifting digits one by one into the ones place and writing the truncated value
    for (i = 0; i < places; i++) {
        tempfloat *= 10.0;
 8001af2:	4917      	ldr	r1, [pc, #92]	; (8001b50 <floatToString+0x1d0>)
 8001af4:	f7ff f896 	bl	8000c24 <__aeabi_fmul>
 8001af8:	4680      	mov	r8, r0
        digit = (int) tempfloat;
 8001afa:	f7ff fa59 	bl	8000fb0 <__aeabi_f2iz>
 8001afe:	b2c5      	uxtb	r5, r0
        itoa(digit, &outstr[c++], 10);
 8001b00:	1c77      	adds	r7, r6, #1
 8001b02:	b2ff      	uxtb	r7, r7
 8001b04:	220a      	movs	r2, #10
 8001b06:	eb0a 0106 	add.w	r1, sl, r6
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f004 feaa 	bl	8006864 <itoa>
        // once written, subtract off that digit
        tempfloat = tempfloat - (float) digit;
 8001b10:	4628      	mov	r0, r5
 8001b12:	f7ff f82f 	bl	8000b74 <__aeabi_ui2f>
 8001b16:	4601      	mov	r1, r0
 8001b18:	4640      	mov	r0, r8
 8001b1a:	f7fe ff79 	bl	8000a10 <__aeabi_fsub>
    for (i = 0; i < places; i++) {
 8001b1e:	3401      	adds	r4, #1
 8001b20:	b2e4      	uxtb	r4, r4
        itoa(digit, &outstr[c++], 10);
 8001b22:	463e      	mov	r6, r7
    for (i = 0; i < places; i++) {
 8001b24:	455c      	cmp	r4, fp
 8001b26:	d3e4      	bcc.n	8001af2 <floatToString+0x172>
    }
    if (extra > 0) {
 8001b28:	9b01      	ldr	r3, [sp, #4]
 8001b2a:	b933      	cbnz	r3, 8001b3a <floatToString+0x1ba>
            outstr[c++] = ' ';
        }
    }


    outstr[c++] = '\0';
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f80a 3006 	strb.w	r3, [sl, r6]
    return charcount;
}
 8001b32:	9802      	ldr	r0, [sp, #8]
 8001b34:	b005      	add	sp, #20
 8001b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i< extra; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9801      	ldr	r0, [sp, #4]
 8001b3e:	4298      	cmp	r0, r3
 8001b40:	ddf4      	ble.n	8001b2c <floatToString+0x1ac>
            outstr[c++] = ' ';
 8001b42:	1c72      	adds	r2, r6, #1
 8001b44:	2120      	movs	r1, #32
 8001b46:	f80a 1006 	strb.w	r1, [sl, r6]
        for (int i = 0; i< extra; i++) {
 8001b4a:	3301      	adds	r3, #1
            outstr[c++] = ' ';
 8001b4c:	b2d6      	uxtb	r6, r2
 8001b4e:	e7f6      	b.n	8001b3e <floatToString+0x1be>
 8001b50:	41200000 	.word	0x41200000
 8001b54:	3dcccccd 	.word	0x3dcccccd
 8001b58:	40240000 	.word	0x40240000

08001b5c <disp_DrawScreen>:
/*

 * Draws normal screen, cfg mode specifies which configuration is highlighted, pushspeed, pullduration is string representation of selected parameters
 */
void disp_DrawScreen(disp_CfgModeTd cfgMode, char* pushSpeed, char* pullDur, float vBat, float iMeas, float tCore){
 8001b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b60:	4606      	mov	r6, r0
 8001b62:	4688      	mov	r8, r1
 8001b64:	4617      	mov	r7, r2
 8001b66:	4699      	mov	r9, r3

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 f96d 	bl	8001e48 <SSD1306_Fill>
	//disp_DrawFrame(0, 0, 127, Start_Y+31, 0);

	//FIRST LINE
	strcpy(Line,"  Speed:   ");
 8001b6e:	4c3f      	ldr	r4, [pc, #252]	; (8001c6c <disp_DrawScreen+0x110>)
 8001b70:	4d3f      	ldr	r5, [pc, #252]	; (8001c70 <disp_DrawScreen+0x114>)
 8001b72:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001b74:	6020      	str	r0, [r4, #0]
 8001b76:	6061      	str	r1, [r4, #4]
 8001b78:	60a2      	str	r2, [r4, #8]
	strcat(Line,pushSpeed);
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f004 ff09 	bl	8006994 <strcat>
	//sprintf(Line, "  Speed:   %s", pushSpeed);
	SSD1306_GotoXY(1, Start_Y+0);
 8001b82:	2100      	movs	r1, #0
 8001b84:	2001      	movs	r0, #1
 8001b86:	f000 f997 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 8001b8a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001c7c <disp_DrawScreen+0x120>
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4641      	mov	r1, r8
 8001b92:	4620      	mov	r0, r4
 8001b94:	f000 f9e4 	bl	8001f60 <SSD1306_Puts>

	//SECOND LINE
	strcpy(Line,"  Retract: ");
 8001b98:	4d36      	ldr	r5, [pc, #216]	; (8001c74 <disp_DrawScreen+0x118>)
 8001b9a:	cd07      	ldmia	r5!, {r0, r1, r2}
 8001b9c:	6020      	str	r0, [r4, #0]
 8001b9e:	6061      	str	r1, [r4, #4]
 8001ba0:	60a2      	str	r2, [r4, #8]
	strcat(Line,pullDur);
 8001ba2:	4639      	mov	r1, r7
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f004 fef5 	bl	8006994 <strcat>
	//sprintf(Line, "  Retract: %s", pullDur);
	SSD1306_GotoXY(1, Start_Y+10);
 8001baa:	210a      	movs	r1, #10
 8001bac:	2001      	movs	r0, #1
 8001bae:	f000 f983 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 f9d2 	bl	8001f60 <SSD1306_Puts>

	//THIRD LINE - button functions
	if(cfgMode>0){
 8001bbc:	b1de      	cbz	r6, 8001bf6 <disp_DrawScreen+0x9a>
		strcpy(Line,"   OK   Less  More");
 8001bbe:	4625      	mov	r5, r4
 8001bc0:	4c2d      	ldr	r4, [pc, #180]	; (8001c78 <disp_DrawScreen+0x11c>)
 8001bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc4:	6028      	str	r0, [r5, #0]
 8001bc6:	6069      	str	r1, [r5, #4]
 8001bc8:	60aa      	str	r2, [r5, #8]
 8001bca:	60eb      	str	r3, [r5, #12]
 8001bcc:	8822      	ldrh	r2, [r4, #0]
 8001bce:	78a3      	ldrb	r3, [r4, #2]
 8001bd0:	822a      	strh	r2, [r5, #16]
 8001bd2:	74ab      	strb	r3, [r5, #18]
		strcat(Line,floatBuf);

		//sprintf(Line, "Bat: %2.1fV t: %2.1fC", vBat,tCore);
	}

	SSD1306_GotoXY(1, Start_Y+21);
 8001bd4:	2115      	movs	r1, #21
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 f96e 	bl	8001eb8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <disp_DrawScreen+0x120>)
 8001be0:	4822      	ldr	r0, [pc, #136]	; (8001c6c <disp_DrawScreen+0x110>)
 8001be2:	f000 f9bd 	bl	8001f60 <SSD1306_Puts>

	//Draw frame around selected parameter in configuration mode
	if(cfgMode == disp_CfgModeTd_Speed){
 8001be6:	2e01      	cmp	r6, #1
 8001be8:	d02b      	beq.n	8001c42 <disp_DrawScreen+0xe6>
		SSD1306_GotoXY(0, Start_Y+0);
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
	}
	else if(cfgMode == disp_CfgModeTd_Ret){
 8001bea:	2e02      	cmp	r6, #2
 8001bec:	d033      	beq.n	8001c56 <disp_DrawScreen+0xfa>
		SSD1306_GotoXY(0, Start_Y+10);
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
	}

	SSD1306_UpdateScreen();
 8001bee:	f000 f9df 	bl	8001fb0 <SSD1306_UpdateScreen>
}
 8001bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		strcpy(Line,"Bat: ");
 8001bf6:	4c1d      	ldr	r4, [pc, #116]	; (8001c6c <disp_DrawScreen+0x110>)
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <disp_DrawScreen+0x124>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	6020      	str	r0, [r4, #0]
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	80a3      	strh	r3, [r4, #4]
		floatToString(floatBuf, vBat, 1, 3 );
 8001c02:	4d20      	ldr	r5, [pc, #128]	; (8001c84 <disp_DrawScreen+0x128>)
 8001c04:	2303      	movs	r3, #3
 8001c06:	2201      	movs	r2, #1
 8001c08:	4649      	mov	r1, r9
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff feb8 	bl	8001980 <floatToString>
		strcat(Line,floatBuf);
 8001c10:	4629      	mov	r1, r5
 8001c12:	4620      	mov	r0, r4
 8001c14:	f004 febe 	bl	8006994 <strcat>
		strcat(Line,"V t: ");
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7fe fa97 	bl	800014c <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	1901      	adds	r1, r0, r4
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <disp_DrawScreen+0x12c>)
 8001c24:	6810      	ldr	r0, [r2, #0]
 8001c26:	5118      	str	r0, [r3, r4]
 8001c28:	8893      	ldrh	r3, [r2, #4]
 8001c2a:	808b      	strh	r3, [r1, #4]
		floatToString(floatBuf, tCore, 1, 3 );
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001c32:	4628      	mov	r0, r5
 8001c34:	f7ff fea4 	bl	8001980 <floatToString>
		strcat(Line,floatBuf);
 8001c38:	4629      	mov	r1, r5
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f004 feaa 	bl	8006994 <strcat>
 8001c40:	e7c8      	b.n	8001bd4 <disp_DrawScreen+0x78>
		SSD1306_GotoXY(0, Start_Y+0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	4608      	mov	r0, r1
 8001c46:	f000 f937 	bl	8001eb8 <SSD1306_GotoXY>
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <disp_DrawScreen+0x120>)
 8001c4e:	206f      	movs	r0, #111	; 0x6f
 8001c50:	f000 f938 	bl	8001ec4 <SSD1306_Putc>
 8001c54:	e7cb      	b.n	8001bee <disp_DrawScreen+0x92>
		SSD1306_GotoXY(0, Start_Y+10);
 8001c56:	210a      	movs	r1, #10
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f92d 	bl	8001eb8 <SSD1306_GotoXY>
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4906      	ldr	r1, [pc, #24]	; (8001c7c <disp_DrawScreen+0x120>)
 8001c62:	206f      	movs	r0, #111	; 0x6f
 8001c64:	f000 f92e 	bl	8001ec4 <SSD1306_Putc>
 8001c68:	e7c1      	b.n	8001bee <disp_DrawScreen+0x92>
 8001c6a:	bf00      	nop
 8001c6c:	20000358 	.word	0x20000358
 8001c70:	08007924 	.word	0x08007924
 8001c74:	08007930 	.word	0x08007930
 8001c78:	0800793c 	.word	0x0800793c
 8001c7c:	20000060 	.word	0x20000060
 8001c80:	08007950 	.word	0x08007950
 8001c84:	20000334 	.word	0x20000334
 8001c88:	08007958 	.word	0x08007958

08001c8c <meas_Init>:


/*
 * Initialize generator module, used typically during boot only
 */
void meas_Init(void){
 8001c8c:	b508      	push	{r3, lr}

	VBat = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <meas_Init+0x2c>)
 8001c92:	6013      	str	r3, [r2, #0]
	Im = 0;
 8001c94:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <meas_Init+0x30>)
 8001c96:	6013      	str	r3, [r2, #0]
	Temp = 0;
 8001c98:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <meas_Init+0x34>)
 8001c9a:	6013      	str	r3, [r2, #0]
	vSense = 0;
 8001c9c:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <meas_Init+0x38>)
 8001c9e:	6013      	str	r3, [r2, #0]
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  //PA_Pin Start pwm motor speed% duty cycle
	//HAL_TIM_Base_Start(&htim1);
	// Kalibrace ADC při zapnutí pro lepší přesnost
	 while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);           // calibrate AD convertor
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <meas_Init+0x3c>)
 8001ca2:	f000 fdab 	bl	80027fc <HAL_ADCEx_Calibration_Start>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1fa      	bne.n	8001ca0 <meas_Init+0x14>
	// Start ADC Conversion
	// Pass (The ADC Instance, Result Buffer Address, Buffer Length)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCBuffer[0], (uint32_t)ADCCHANNELS);
 8001caa:	2203      	movs	r2, #3
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <meas_Init+0x40>)
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <meas_Init+0x3c>)
 8001cb0:	f000 fc5c 	bl	800256c <HAL_ADC_Start_DMA>

}
 8001cb4:	bd08      	pop	{r3, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000378 	.word	0x20000378
 8001cbc:	20000384 	.word	0x20000384
 8001cc0:	20000374 	.word	0x20000374
 8001cc4:	20000370 	.word	0x20000370
 8001cc8:	20000390 	.word	0x20000390
 8001ccc:	2000037c 	.word	0x2000037c

08001cd0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
	//HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
	if(CountMeasure>AVGLOOPMAX) return;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	d832      	bhi.n	8001d42 <HAL_ADC_ConvCpltCallback+0x72>
	AvVBat += (ADC_TO_VOLT * ADCBuffer[0])* VMCOEF;
 8001cdc:	4c1a      	ldr	r4, [pc, #104]	; (8001d48 <HAL_ADC_ConvCpltCallback+0x78>)
 8001cde:	8820      	ldrh	r0, [r4, #0]
 8001ce0:	b280      	uxth	r0, r0
 8001ce2:	f7fe ff4b 	bl	8000b7c <__aeabi_i2f>
 8001ce6:	4919      	ldr	r1, [pc, #100]	; (8001d4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ce8:	f7fe ff9c 	bl	8000c24 <__aeabi_fmul>
 8001cec:	4918      	ldr	r1, [pc, #96]	; (8001d50 <HAL_ADC_ConvCpltCallback+0x80>)
 8001cee:	f7fe ff99 	bl	8000c24 <__aeabi_fmul>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	4d17      	ldr	r5, [pc, #92]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x84>)
 8001cf6:	6828      	ldr	r0, [r5, #0]
 8001cf8:	f7fe fe8c 	bl	8000a14 <__addsf3>
 8001cfc:	6028      	str	r0, [r5, #0]
	//Im = ADCBuffer[1] * IMCOEF;
	vSense = (ADC_TO_VOLT * ADCBuffer[2]);// volts temperature;
 8001cfe:	88a0      	ldrh	r0, [r4, #4]
 8001d00:	b280      	uxth	r0, r0
 8001d02:	f7fe ff3b 	bl	8000b7c <__aeabi_i2f>
 8001d06:	4911      	ldr	r1, [pc, #68]	; (8001d4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001d08:	f7fe ff8c 	bl	8000c24 <__aeabi_fmul>
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_ADC_ConvCpltCallback+0x88>)
 8001d0e:	6018      	str	r0, [r3, #0]
	AvTemp += (V25 - vSense) / AVG_SLOPE + 25.0f;                  // convert sensor's output voltage to temperature [°C]
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_ADC_ConvCpltCallback+0x8c>)
 8001d14:	f7fe fe7c 	bl	8000a10 <__aeabi_fsub>
 8001d18:	4911      	ldr	r1, [pc, #68]	; (8001d60 <HAL_ADC_ConvCpltCallback+0x90>)
 8001d1a:	f7ff f837 	bl	8000d8c <__aeabi_fdiv>
 8001d1e:	4911      	ldr	r1, [pc, #68]	; (8001d64 <HAL_ADC_ConvCpltCallback+0x94>)
 8001d20:	f7fe fe78 	bl	8000a14 <__addsf3>
 8001d24:	4601      	mov	r1, r0
 8001d26:	4d10      	ldr	r5, [pc, #64]	; (8001d68 <HAL_ADC_ConvCpltCallback+0x98>)
 8001d28:	6828      	ldr	r0, [r5, #0]
 8001d2a:	f7fe fe73 	bl	8000a14 <__addsf3>
 8001d2e:	6028      	str	r0, [r5, #0]
	ADCBuffer[0] = ADCBuffer[1] = ADCBuffer[2] = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	80a3      	strh	r3, [r4, #4]
 8001d34:	8063      	strh	r3, [r4, #2]
 8001d36:	8023      	strh	r3, [r4, #0]
	CountMeasure++;
 8001d38:	4a02      	ldr	r2, [pc, #8]	; (8001d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8001d3a:	7813      	ldrb	r3, [r2, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	7013      	strb	r3, [r2, #0]
}
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	20000108 	.word	0x20000108
 8001d48:	2000037c 	.word	0x2000037c
 8001d4c:	3a533333 	.word	0x3a533333
 8001d50:	4121b6db 	.word	0x4121b6db
 8001d54:	20000104 	.word	0x20000104
 8001d58:	20000370 	.word	0x20000370
 8001d5c:	3fb70a3d 	.word	0x3fb70a3d
 8001d60:	3b8ce704 	.word	0x3b8ce704
 8001d64:	41c80000 	.word	0x41c80000
 8001d68:	20000100 	.word	0x20000100

08001d6c <HAL_ADC_ErrorCallback>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b508      	push	{r3, lr}
  /* Turn LED5 on: Transfer Error */
	printf("DMA Transfer Error\n");
 8001d6e:	4802      	ldr	r0, [pc, #8]	; (8001d78 <HAL_ADC_ErrorCallback+0xc>)
 8001d70:	f004 fe08 	bl	8006984 <puts>
}
 8001d74:	bd08      	pop	{r3, pc}
 8001d76:	bf00      	nop
 8001d78:	080080cc 	.word	0x080080cc

08001d7c <mo_SetSpeed>:
void mo_Init(void){

}


void mo_SetSpeed(int16_t speed){
 8001d7c:	b538      	push	{r3, r4, r5, lr}
 8001d7e:	4604      	mov	r4, r0

	Speed = speed;
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <mo_SetSpeed+0xc0>)
 8001d82:	8018      	strh	r0, [r3, #0]

	HAL_TIM_Base_Stop(&htim3);
 8001d84:	4d2e      	ldr	r5, [pc, #184]	; (8001e40 <mo_SetSpeed+0xc4>)
 8001d86:	4628      	mov	r0, r5
 8001d88:	f003 fa5c 	bl	8005244 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);  //PA_Pin Stop pwm
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f003 fc90 	bl	80056b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);  //PB_Pin Stop pwm
 8001d94:	2104      	movs	r1, #4
 8001d96:	4628      	mov	r0, r5
 8001d98:	f003 fc8c 	bl	80056b4 <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_RESET);   // Stop motor
 8001d9c:	4d29      	ldr	r5, [pc, #164]	; (8001e44 <mo_SetSpeed+0xc8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	4628      	mov	r0, r5
 8001da4:	f001 f89e 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	4628      	mov	r0, r5
 8001dae:	f001 f899 	bl	8002ee4 <HAL_GPIO_WritePin>

	if(speed > 0){
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	dd1e      	ble.n	8001df4 <mo_SetSpeed+0x78>
		UT_SATURATE(speed, MO_SPEED_MIN, MO_SPEED_MAX);
 8001db6:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8001dba:	dc03      	bgt.n	8001dc4 <mo_SetSpeed+0x48>
 8001dbc:	2c4f      	cmp	r4, #79	; 0x4f
 8001dbe:	dc03      	bgt.n	8001dc8 <mo_SetSpeed+0x4c>
 8001dc0:	2450      	movs	r4, #80	; 0x50
 8001dc2:	e001      	b.n	8001dc8 <mo_SetSpeed+0x4c>
 8001dc4:	f44f 7448 	mov.w	r4, #800	; 0x320
		HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_RESET);
 8001dc8:	4d1e      	ldr	r5, [pc, #120]	; (8001e44 <mo_SetSpeed+0xc8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f001 f888 	bl	8002ee4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	4628      	mov	r0, r5
 8001dda:	f001 f883 	bl	8002ee4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,speed); //Set motor speed% voltage
 8001dde:	4d18      	ldr	r5, [pc, #96]	; (8001e40 <mo_SetSpeed+0xc4>)
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	635c      	str	r4, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);  //PA_Pin Start pwm motor speed% duty cycle
 8001de4:	2100      	movs	r1, #0
 8001de6:	4628      	mov	r0, r5
 8001de8:	f003 fbf6 	bl	80055d8 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim3);
 8001dec:	4628      	mov	r0, r5
 8001dee:	f003 f9fb 	bl	80051e8 <HAL_TIM_Base_Start>

	}



}
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
	else if(speed < 0){
 8001df4:	2c00      	cmp	r4, #0
 8001df6:	dafc      	bge.n	8001df2 <mo_SetSpeed+0x76>
		speed *= -1;
 8001df8:	4264      	negs	r4, r4
 8001dfa:	b224      	sxth	r4, r4
		UT_SATURATE(speed, MO_SPEED_MIN, MO_SPEED_MAX);
 8001dfc:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 8001e00:	dc03      	bgt.n	8001e0a <mo_SetSpeed+0x8e>
 8001e02:	2c4f      	cmp	r4, #79	; 0x4f
 8001e04:	dc03      	bgt.n	8001e0e <mo_SetSpeed+0x92>
 8001e06:	2450      	movs	r4, #80	; 0x50
 8001e08:	e001      	b.n	8001e0e <mo_SetSpeed+0x92>
 8001e0a:	f44f 7448 	mov.w	r4, #800	; 0x320
		HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_SET);
 8001e0e:	4d0d      	ldr	r5, [pc, #52]	; (8001e44 <mo_SetSpeed+0xc8>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	4628      	mov	r0, r5
 8001e16:	f001 f865 	bl	8002ee4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f001 f860 	bl	8002ee4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,speed); //Set motor speed% voltage
 8001e24:	4d06      	ldr	r5, [pc, #24]	; (8001e40 <mo_SetSpeed+0xc4>)
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);  //PB_Pin Start pwm motor speed% duty cycle
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f003 fbd3 	bl	80055d8 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim3);
 8001e32:	4628      	mov	r0, r5
 8001e34:	f003 f9d8 	bl	80051e8 <HAL_TIM_Base_Start>
}
 8001e38:	e7db      	b.n	8001df2 <mo_SetSpeed+0x76>
 8001e3a:	bf00      	nop
 8001e3c:	20000388 	.word	0x20000388
 8001e40:	200004c4 	.word	0x200004c4
 8001e44:	40010800 	.word	0x40010800

08001e48 <SSD1306_Fill>:
//	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
//		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
//	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001e48:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e4a:	b930      	cbnz	r0, 8001e5a <SSD1306_Fill+0x12>
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <SSD1306_Fill+0x18>)
 8001e54:	f004 fd08 	bl	8006868 <memset>
	//memset(Buffer_DMA, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(Buffer_DMA));
	//Buffer_DMA_InitCommand();
}
 8001e58:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e5a:	21ff      	movs	r1, #255	; 0xff
 8001e5c:	e7f7      	b.n	8001e4e <SSD1306_Fill+0x6>
 8001e5e:	bf00      	nop
 8001e60:	20000114 	.word	0x20000114

08001e64 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return; //Error
 8001e64:	287f      	cmp	r0, #127	; 0x7f
 8001e66:	d815      	bhi.n	8001e94 <SSD1306_DrawPixel+0x30>
 8001e68:	291f      	cmp	r1, #31
 8001e6a:	d813      	bhi.n	8001e94 <SSD1306_DrawPixel+0x30>
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) color = (SSD1306_COLOR_t)!color;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <SSD1306_DrawPixel+0x4c>)
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	b113      	cbz	r3, 8001e78 <SSD1306_DrawPixel+0x14>
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	0952      	lsrs	r2, r2, #5
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e78:	2a01      	cmp	r2, #1
 8001e7a:	d00c      	beq.n	8001e96 <SSD1306_DrawPixel+0x32>
	else SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e7c:	08cb      	lsrs	r3, r1, #3
 8001e7e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001e82:	f001 0107 	and.w	r1, r1, #7
 8001e86:	2301      	movs	r3, #1
 8001e88:	408b      	lsls	r3, r1
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SSD1306_DrawPixel+0x50>)
 8001e8c:	5c11      	ldrb	r1, [r2, r0]
 8001e8e:	ea21 0103 	bic.w	r1, r1, r3
 8001e92:	5411      	strb	r1, [r2, r0]
	//Buffer_DMA[y % 8]
	//if (color == SSD1306_COLOR_WHITE) Buffer_DMA[(uint8_t)y/8].Data[x] |= 1 << (y % 8);
	//else Buffer_DMA[(uint8_t)y/8].Data[x] &= ~(1 << (y % 8));


}
 8001e94:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e96:	08cb      	lsrs	r3, r1, #3
 8001e98:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001e9c:	f001 0107 	and.w	r1, r1, #7
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	408b      	lsls	r3, r1
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <SSD1306_DrawPixel+0x50>)
 8001ea6:	5c11      	ldrb	r1, [r2, r0]
 8001ea8:	4319      	orrs	r1, r3
 8001eaa:	5411      	strb	r1, [r2, r0]
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000010c 	.word	0x2000010c
 8001eb4:	20000114 	.word	0x20000114

08001eb8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <SSD1306_GotoXY+0x8>)
 8001eba:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001ebc:	8059      	strh	r1, [r3, #2]
}
 8001ebe:	4770      	bx	lr
 8001ec0:	2000010c 	.word	0x2000010c

08001ec4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec8:	4690      	mov	r8, r2
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <SSD1306_Putc+0x98>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	780a      	ldrb	r2, [r1, #0]
 8001ed0:	4413      	add	r3, r2
	if (
 8001ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed4:	dc3e      	bgt.n	8001f54 <SSD1306_Putc+0x90>
 8001ed6:	4681      	mov	r9, r0
 8001ed8:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <SSD1306_Putc+0x98>)
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	784a      	ldrb	r2, [r1, #1]
 8001ee0:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ee2:	2b1f      	cmp	r3, #31
 8001ee4:	dc38      	bgt.n	8001f58 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	e020      	b.n	8001f2c <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <SSD1306_Putc+0x98>)
 8001eec:	8818      	ldrh	r0, [r3, #0]
 8001eee:	8859      	ldrh	r1, [r3, #2]
 8001ef0:	4431      	add	r1, r6
 8001ef2:	4420      	add	r0, r4
 8001ef4:	fab8 f288 	clz	r2, r8
 8001ef8:	0952      	lsrs	r2, r2, #5
 8001efa:	b289      	uxth	r1, r1
 8001efc:	b280      	uxth	r0, r0
 8001efe:	f7ff ffb1 	bl	8001e64 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f02:	3401      	adds	r4, #1
 8001f04:	782b      	ldrb	r3, [r5, #0]
 8001f06:	42a3      	cmp	r3, r4
 8001f08:	d90f      	bls.n	8001f2a <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8001f0a:	fa07 f304 	lsl.w	r3, r7, r4
 8001f0e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001f12:	d0ea      	beq.n	8001eea <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <SSD1306_Putc+0x98>)
 8001f16:	8818      	ldrh	r0, [r3, #0]
 8001f18:	8859      	ldrh	r1, [r3, #2]
 8001f1a:	4431      	add	r1, r6
 8001f1c:	4420      	add	r0, r4
 8001f1e:	4642      	mov	r2, r8
 8001f20:	b289      	uxth	r1, r1
 8001f22:	b280      	uxth	r0, r0
 8001f24:	f7ff ff9e 	bl	8001e64 <SSD1306_DrawPixel>
 8001f28:	e7eb      	b.n	8001f02 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	786a      	ldrb	r2, [r5, #1]
 8001f2e:	42b2      	cmp	r2, r6
 8001f30:	d908      	bls.n	8001f44 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001f32:	6869      	ldr	r1, [r5, #4]
 8001f34:	f1a9 0320 	sub.w	r3, r9, #32
 8001f38:	fb02 6303 	mla	r3, r2, r3, r6
 8001f3c:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001f40:	2400      	movs	r4, #0
 8001f42:	e7df      	b.n	8001f04 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f44:	782b      	ldrb	r3, [r5, #0]
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SSD1306_Putc+0x98>)
 8001f48:	8811      	ldrh	r1, [r2, #0]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8001f4e:	4648      	mov	r0, r9
}
 8001f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8001f54:	2000      	movs	r0, #0
 8001f56:	e7fb      	b.n	8001f50 <SSD1306_Putc+0x8c>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7f9      	b.n	8001f50 <SSD1306_Putc+0x8c>
 8001f5c:	2000010c 	.word	0x2000010c

08001f60 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4604      	mov	r4, r0
 8001f64:	460e      	mov	r6, r1
 8001f66:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001f68:	7820      	ldrb	r0, [r4, #0]
 8001f6a:	b148      	cbz	r0, 8001f80 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f6c:	462a      	mov	r2, r5
 8001f6e:	4631      	mov	r1, r6
 8001f70:	f7ff ffa8 	bl	8001ec4 <SSD1306_Putc>
 8001f74:	4603      	mov	r3, r0
 8001f76:	7820      	ldrb	r0, [r4, #0]
 8001f78:	4283      	cmp	r3, r0
 8001f7a:	d101      	bne.n	8001f80 <SSD1306_Puts+0x20>
			return *str;

		}

		/* Increase string pointer */
		str++;
 8001f7c:	3401      	adds	r4, #1
 8001f7e:	e7f3      	b.n	8001f68 <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f84 <ssd1306_I2C_Write>:
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
HAL_I2C_Mem_Write_DMA(&hi2c1, address, reg, 1, data, count);
}

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f84:	b500      	push	{lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, address, reg, 1, &data, 1, 10);
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	2301      	movs	r3, #1
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f10d 0217 	add.w	r2, sp, #23
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <ssd1306_I2C_Write+0x28>)
 8001fa0:	f001 fbbe 	bl	8003720 <HAL_I2C_Mem_Write>
}
 8001fa4:	b007      	add	sp, #28
 8001fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001faa:	bf00      	nop
 8001fac:	20000448 	.word	0x20000448

08001fb0 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001fb0:	b500      	push	{lr}
 8001fb2:	b083      	sub	sp, #12
	SSD1306_WRITECOMMAND(SSD1306_PAGEADDR);//SSD1306_PAGEADDR
 8001fb4:	2222      	movs	r2, #34	; 0x22
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2078      	movs	r0, #120	; 0x78
 8001fba:	f7ff ffe3 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0); // Page start address (0)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	2078      	movs	r0, #120	; 0x78
 8001fc4:	f7ff ffde 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND((SSD1306_HEIGHT/8)-1); // Page end address
 8001fc8:	2203      	movs	r2, #3
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2078      	movs	r0, #120	; 0x78
 8001fce:	f7ff ffd9 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_COLUMNADDR);
 8001fd2:	2221      	movs	r2, #33	; 0x21
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2078      	movs	r0, #120	; 0x78
 8001fd8:	f7ff ffd4 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0);   // Column start address (0)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4611      	mov	r1, r2
 8001fe0:	2078      	movs	r0, #120	; 0x78
 8001fe2:	f7ff ffcf 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_WIDTH-1); // Column end address (127)
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2078      	movs	r0, #120	; 0x78
 8001fec:	f7ff ffca 	bl	8001f84 <ssd1306_I2C_Write>
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <SSD1306_UpdateScreen+0x68>)
 8001ff2:	f002 fc07 	bl	8004804 <HAL_I2C_GetState>
 8001ff6:	2820      	cmp	r0, #32
 8001ff8:	d1fa      	bne.n	8001ff0 <SSD1306_UpdateScreen+0x40>
	HAL_I2C_Mem_Write_DMA(&hi2c1, SSD1306_I2C_ADDR, SSD1306_DATA, 1, &SSD1306_Buffer[0], sizeof(SSD1306_Buffer));
 8001ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SSD1306_UpdateScreen+0x6c>)
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2301      	movs	r3, #1
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	2178      	movs	r1, #120	; 0x78
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <SSD1306_UpdateScreen+0x68>)
 800200c:	f001 fc3a 	bl	8003884 <HAL_I2C_Mem_Write_DMA>
}
 8002010:	b003      	add	sp, #12
 8002012:	f85d fb04 	ldr.w	pc, [sp], #4
 8002016:	bf00      	nop
 8002018:	20000448 	.word	0x20000448
 800201c:	20000114 	.word	0x20000114

08002020 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002020:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 200) != HAL_OK) {
 8002022:	23c8      	movs	r3, #200	; 0xc8
 8002024:	2201      	movs	r2, #1
 8002026:	2178      	movs	r1, #120	; 0x78
 8002028:	484d      	ldr	r0, [pc, #308]	; (8002160 <SSD1306_Init+0x140>)
 800202a:	f001 fd0f 	bl	8003a4c <HAL_I2C_IsDeviceReady>
 800202e:	2800      	cmp	r0, #0
 8002030:	f040 8094 	bne.w	800215c <SSD1306_Init+0x13c>
	uint32_t p = 2500;
 8002034:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002038:	e000      	b.n	800203c <SSD1306_Init+0x1c>
		p--;
 800203a:	3b01      	subs	r3, #1
	while(p>0)
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1fc      	bne.n	800203a <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(SSD1306_DISPLAYOFF); 			// 0xAE vypnuto zobrazení
 8002040:	22ae      	movs	r2, #174	; 0xae
 8002042:	2100      	movs	r1, #0
 8002044:	2078      	movs	r0, #120	; 0x78
 8002046:	f7ff ff9d 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MEMORYMODE); 			// 0x20 režim adresování stránky
 800204a:	2220      	movs	r2, #32
 800204c:	2100      	movs	r1, #0
 800204e:	2078      	movs	r0, #120	; 0x78
 8002050:	f7ff ff98 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);          				// 0x00 horizontal addressing
 8002054:	2200      	movs	r2, #0
 8002056:	4611      	mov	r1, r2
 8002058:	2078      	movs	r0, #120	; 0x78
 800205a:	f7ff ff93 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MIRROR_VERT_NORM);		// 0xC8 Skenování od 127 do 0 (reverzní skenování)
 800205e:	22c8      	movs	r2, #200	; 0xc8
 8002060:	2100      	movs	r1, #0
 8002062:	2078      	movs	r0, #120	; 0x78
 8002064:	f7ff ff8e 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETSTARTLINE);    		// 0x40 První řádek); ze kterého se má zahájit skenování
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	2100      	movs	r1, #0
 800206c:	2078      	movs	r0, #120	; 0x78
 800206e:	f7ff ff89 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETCONTRAST);      	// 0x81 porovná hodnotu s 0x7F podle datasheetu
 8002072:	2281      	movs	r2, #129	; 0x81
 8002074:	2100      	movs	r1, #0
 8002076:	2078      	movs	r0, #120	; 0x78
 8002078:	f7ff ff84 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);							// 0xFF max
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	2100      	movs	r1, #0
 8002080:	2078      	movs	r0, #120	; 0x78
 8002082:	f7ff ff7f 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MIRROR_HORIZ_NORMAL);  // 0xA1 Použít reverzní mapování. 0x00 - je normální mapování
 8002086:	22a1      	movs	r2, #161	; 0xa1
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f7ff ff7a 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_NORMALDISPLAY);		// 0xA6 set normal display
 8002090:	22a6      	movs	r2, #166	; 0xa6
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f7ff ff75 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETMULTIPLEX);       	// 0xA8 set multiplex ratio(1 to 64)
 800209a:	22a8      	movs	r2, #168	; 0xa8
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f7ff ff70 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1);
 80020a4:	221f      	movs	r2, #31
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f7ff ff6b 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_SETDISPLAYOFFSET); 	// 0xD3 set display offset
 80020ae:	22d3      	movs	r2, #211	; 0xd3
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f7ff ff66 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);          				// 0x00 not offset
 80020b8:	2200      	movs	r2, #0
 80020ba:	4611      	mov	r1, r2
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f7ff ff61 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETDISPLAYCLOCKDIV); 	// 0xD5 set display clock divide ratio/oscillator frequency
 80020c2:	22d5      	movs	r2, #213	; 0xd5
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f7ff ff5c 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x80);          				// 0x80 set divide ratio default
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f7ff ff57 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETPRECHARGE);     	// 0xD9 set pre-charge period na 0x22 // 0xF1
 80020d6:	22d9      	movs	r2, #217	; 0xd9
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f7ff ff52 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 80020e0:	2222      	movs	r2, #34	; 0x22
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f7ff ff4d 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETCOMPINS);       	// 0xDA set com pins hardware configuration
 80020ea:	22da      	movs	r2, #218	; 0xda
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f7ff ff48 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02);							// 0x02 is for 128x32 !!!!!!!!!!!!!! UPDATE IN HEADER
 80020f4:	2202      	movs	r2, #2
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f7ff ff43 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETVCOMDETECT);     	// 0xDB set vcomh
 80020fe:	22db      	movs	r2, #219	; 0xdb
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f7ff ff3e 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20); 						// 0x20 0.77xVcc
 8002108:	2220      	movs	r2, #32
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f7ff ff39 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_CHARGEPUMP);        	// 0x8D set charge pump
 8002112:	228d      	movs	r2, #141	; 0x8d
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f7ff ff34 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14); 						// 0x14 using internal VCC
 800211c:	2214      	movs	r2, #20
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f7ff ff2f 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DISPLAYALLON_RESUME); 	// 0xA4 Output follows RAM content;0xA55,Output ignores RAM content
 8002126:	22a4      	movs	r2, #164	; 0xa4
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f7ff ff2a 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DISPLAYON);			// 0xAF turn on SSD1306 panel
 8002130:	22af      	movs	r2, #175	; 0xaf
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f7ff ff25 	bl	8001f84 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800213a:	222e      	movs	r2, #46	; 0x2e
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f7ff ff20 	bl	8001f84 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff fe7f 	bl	8001e48 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800214a:	f7ff ff31 	bl	8001fb0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SSD1306_Init+0x144>)
 8002150:	2200      	movs	r2, #0
 8002152:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002154:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002156:	2001      	movs	r0, #1
 8002158:	7158      	strb	r0, [r3, #5]
}
 800215a:	bd08      	pop	{r3, pc}
		return 0;
 800215c:	2000      	movs	r0, #0
 800215e:	e7fc      	b.n	800215a <SSD1306_Init+0x13a>
 8002160:	20000448 	.word	0x20000448
 8002164:	2000010c 	.word	0x2000010c

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b510      	push	{r4, lr}
 800216a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_InitTick+0x40>)
 800216e:	7818      	ldrb	r0, [r3, #0]
 8002170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002174:	fbb3 f3f0 	udiv	r3, r3, r0
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <HAL_InitTick+0x44>)
 800217a:	6810      	ldr	r0, [r2, #0]
 800217c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002180:	f000 fc12 	bl	80029a8 <HAL_SYSTICK_Config>
 8002184:	b968      	cbnz	r0, 80021a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	2c0f      	cmp	r4, #15
 8002188:	d901      	bls.n	800218e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800218a:	2001      	movs	r0, #1
 800218c:	e00a      	b.n	80021a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218e:	2200      	movs	r2, #0
 8002190:	4621      	mov	r1, r4
 8002192:	f04f 30ff 	mov.w	r0, #4294967295
 8002196:	f000 fbc5 	bl	8002924 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_InitTick+0x48>)
 800219c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2000      	movs	r0, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
}
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	20000068 	.word	0x20000068
 80021ac:	20000078 	.word	0x20000078
 80021b0:	2000006c 	.word	0x2000006c

080021b4 <HAL_Init>:
{
 80021b4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_Init+0x20>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 fb9d 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff ffce 	bl	8002168 <HAL_InitTick>
  HAL_MspInit();
 80021cc:	f004 f8da 	bl	8006384 <HAL_MspInit>
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	bd08      	pop	{r3, pc}
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x10>)
 80021da:	6811      	ldr	r1, [r2, #0]
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_IncTick+0x14>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	440b      	add	r3, r1
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000038c 	.word	0x2000038c
 80021ec:	20000068 	.word	0x20000068

080021f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <HAL_GetTick+0x8>)
 80021f2:	6818      	ldr	r0, [r3, #0]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	2000038c 	.word	0x2000038c

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fff6 	bl	80021f0 <HAL_GetTick>
 8002204:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	f1b4 3fff 	cmp.w	r4, #4294967295
 800220a:	d002      	beq.n	8002212 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_Delay+0x24>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002212:	f7ff ffed 	bl	80021f0 <HAL_GetTick>
 8002216:	1b40      	subs	r0, r0, r5
 8002218:	42a0      	cmp	r0, r4
 800221a:	d3fa      	bcc.n	8002212 <HAL_Delay+0x16>
  {
  }
}
 800221c:	bd38      	pop	{r3, r4, r5, pc}
 800221e:	bf00      	nop
 8002220:	20000068 	.word	0x20000068

08002224 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002224:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002226:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800222e:	d11e      	bne.n	800226e <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	6892      	ldr	r2, [r2, #8]
 800223c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002240:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002244:	d003      	beq.n	800224e <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd42 	bl	8001cd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800224c:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800224e:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002250:	2a00      	cmp	r2, #0
 8002252:	d1f8      	bne.n	8002246 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002262:	d1f0      	bne.n	8002246 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
 800226c:	e7eb      	b.n	8002246 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4798      	blx	r3
}
 8002274:	e7ea      	b.n	800224c <ADC_DMAConvCplt+0x28>

08002276 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002276:	4770      	bx	lr

08002278 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002278:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800227a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800227c:	f7ff fffb 	bl	8002276 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002280:	bd08      	pop	{r3, pc}

08002282 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_IRQHandler>:
{
 8002284:	b510      	push	{r4, lr}
 8002286:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	f012 0f20 	tst.w	r2, #32
 8002290:	d018      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f012 0f02 	tst.w	r2, #2
 8002298:	d014      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800229c:	f012 0f10 	tst.w	r2, #16
 80022a0:	d103      	bne.n	80022aa <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80022b0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80022b4:	d038      	beq.n	8002328 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff fd0a 	bl	8001cd0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	f06f 0212 	mvn.w	r2, #18
 80022c2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022cc:	d022      	beq.n	8002314 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f012 0f04 	tst.w	r2, #4
 80022d4:	d01e      	beq.n	8002314 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022d8:	f012 0f10 	tst.w	r2, #16
 80022dc:	d103      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80022ec:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80022f0:	d031      	beq.n	8002356 <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80022f2:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80022f4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002300:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002304:	d024      	beq.n	8002350 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002306:	4620      	mov	r0, r4
 8002308:	f000 faf8 	bl	80028fc <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	f06f 020c 	mvn.w	r2, #12
 8002312:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	f012 0f40 	tst.w	r2, #64	; 0x40
 800231c:	d003      	beq.n	8002326 <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f013 0f01 	tst.w	r3, #1
 8002324:	d128      	bne.n	8002378 <HAL_ADC_IRQHandler+0xf4>
}
 8002326:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002328:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800232a:	2a00      	cmp	r2, #0
 800232c:	d1c3      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	f022 0220 	bic.w	r2, r2, #32
 8002334:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002340:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002344:	d1b7      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	62a3      	str	r3, [r4, #40]	; 0x28
 800234e:	e7b2      	b.n	80022b6 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002350:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002352:	2a00      	cmp	r2, #0
 8002354:	d1d7      	bne.n	8002306 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800235e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002364:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002368:	f413 7f80 	tst.w	r3, #256	; 0x100
 800236c:	d1cb      	bne.n	8002306 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	62a3      	str	r3, [r4, #40]	; 0x28
 8002376:	e7c6      	b.n	8002306 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff ff7e 	bl	8002282 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f06f 0201 	mvn.w	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	e7ca      	b.n	8002326 <HAL_ADC_IRQHandler+0xa2>

08002390 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002390:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002392:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800239c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023a4:	f7ff fce2 	bl	8001d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a8:	bd08      	pop	{r3, pc}
	...

080023ac <HAL_ADC_ConfigChannel>:
{ 
 80023ac:	b430      	push	{r4, r5}
 80023ae:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80023b0:	2200      	movs	r2, #0
 80023b2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80023b4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80023b8:	2a01      	cmp	r2, #1
 80023ba:	f000 808b 	beq.w	80024d4 <HAL_ADC_ConfigChannel+0x128>
 80023be:	4603      	mov	r3, r0
 80023c0:	2201      	movs	r2, #1
 80023c2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80023c6:	684a      	ldr	r2, [r1, #4]
 80023c8:	2a06      	cmp	r2, #6
 80023ca:	d829      	bhi.n	8002420 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023cc:	6805      	ldr	r5, [r0, #0]
 80023ce:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80023d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023d4:	3a05      	subs	r2, #5
 80023d6:	241f      	movs	r4, #31
 80023d8:	4094      	lsls	r4, r2
 80023da:	ea20 0004 	bic.w	r0, r0, r4
 80023de:	680c      	ldr	r4, [r1, #0]
 80023e0:	fa04 f202 	lsl.w	r2, r4, r2
 80023e4:	4302      	orrs	r2, r0
 80023e6:	636a      	str	r2, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023e8:	680a      	ldr	r2, [r1, #0]
 80023ea:	2a09      	cmp	r2, #9
 80023ec:	d938      	bls.n	8002460 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023ee:	681d      	ldr	r5, [r3, #0]
 80023f0:	68e8      	ldr	r0, [r5, #12]
 80023f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023f6:	3a1e      	subs	r2, #30
 80023f8:	2407      	movs	r4, #7
 80023fa:	4094      	lsls	r4, r2
 80023fc:	ea20 0004 	bic.w	r0, r0, r4
 8002400:	688c      	ldr	r4, [r1, #8]
 8002402:	fa04 f202 	lsl.w	r2, r4, r2
 8002406:	4302      	orrs	r2, r0
 8002408:	60ea      	str	r2, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800240a:	680a      	ldr	r2, [r1, #0]
 800240c:	3a10      	subs	r2, #16
 800240e:	2a01      	cmp	r2, #1
 8002410:	d934      	bls.n	800247c <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800241a:	b002      	add	sp, #8
 800241c:	bc30      	pop	{r4, r5}
 800241e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002420:	2a0c      	cmp	r2, #12
 8002422:	d80e      	bhi.n	8002442 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002424:	6805      	ldr	r5, [r0, #0]
 8002426:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002428:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800242c:	3a23      	subs	r2, #35	; 0x23
 800242e:	241f      	movs	r4, #31
 8002430:	4094      	lsls	r4, r2
 8002432:	ea20 0004 	bic.w	r0, r0, r4
 8002436:	680c      	ldr	r4, [r1, #0]
 8002438:	fa04 f202 	lsl.w	r2, r4, r2
 800243c:	4302      	orrs	r2, r0
 800243e:	632a      	str	r2, [r5, #48]	; 0x30
 8002440:	e7d2      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002442:	6805      	ldr	r5, [r0, #0]
 8002444:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002446:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800244a:	3a41      	subs	r2, #65	; 0x41
 800244c:	241f      	movs	r4, #31
 800244e:	4094      	lsls	r4, r2
 8002450:	ea20 0004 	bic.w	r0, r0, r4
 8002454:	680c      	ldr	r4, [r1, #0]
 8002456:	fa04 f202 	lsl.w	r2, r4, r2
 800245a:	4302      	orrs	r2, r0
 800245c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800245e:	e7c3      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002460:	681d      	ldr	r5, [r3, #0]
 8002462:	6928      	ldr	r0, [r5, #16]
 8002464:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002468:	2407      	movs	r4, #7
 800246a:	4094      	lsls	r4, r2
 800246c:	ea20 0004 	bic.w	r0, r0, r4
 8002470:	688c      	ldr	r4, [r1, #8]
 8002472:	fa04 f202 	lsl.w	r2, r4, r2
 8002476:	4302      	orrs	r2, r0
 8002478:	612a      	str	r2, [r5, #16]
 800247a:	e7c6      	b.n	800240a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4816      	ldr	r0, [pc, #88]	; (80024d8 <HAL_ADC_ConfigChannel+0x12c>)
 8002480:	4282      	cmp	r2, r0
 8002482:	d005      	beq.n	8002490 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	e7c1      	b.n	8002414 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002490:	6890      	ldr	r0, [r2, #8]
 8002492:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002496:	d11b      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002498:	6890      	ldr	r0, [r2, #8]
 800249a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800249e:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a0:	680a      	ldr	r2, [r1, #0]
 80024a2:	2a10      	cmp	r2, #16
 80024a4:	d001      	beq.n	80024aa <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a6:	2000      	movs	r0, #0
 80024a8:	e7b4      	b.n	8002414 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_ADC_ConfigChannel+0x130>)
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	490c      	ldr	r1, [pc, #48]	; (80024e0 <HAL_ADC_ConfigChannel+0x134>)
 80024b0:	fba1 1202 	umull	r1, r2, r1, r2
 80024b4:	0c92      	lsrs	r2, r2, #18
 80024b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80024ba:	0052      	lsls	r2, r2, #1
 80024bc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80024be:	e002      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 80024c0:	9a01      	ldr	r2, [sp, #4]
 80024c2:	3a01      	subs	r2, #1
 80024c4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80024c6:	9a01      	ldr	r2, [sp, #4]
 80024c8:	2a00      	cmp	r2, #0
 80024ca:	d1f9      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2000      	movs	r0, #0
 80024ce:	e7a1      	b.n	8002414 <HAL_ADC_ConfigChannel+0x68>
 80024d0:	2000      	movs	r0, #0
 80024d2:	e79f      	b.n	8002414 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80024d4:	2002      	movs	r0, #2
 80024d6:	e7a0      	b.n	800241a <HAL_ADC_ConfigChannel+0x6e>
 80024d8:	40012400 	.word	0x40012400
 80024dc:	20000078 	.word	0x20000078
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <ADC_Enable>:
{
 80024e4:	b530      	push	{r4, r5, lr}
 80024e6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	f012 0f01 	tst.w	r2, #1
 80024f4:	d132      	bne.n	800255c <ADC_Enable+0x78>
 80024f6:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <ADC_Enable+0x80>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <ADC_Enable+0x84>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	b11b      	cbz	r3, 800251a <ADC_Enable+0x36>
      wait_loop_index--;
 8002512:	9b01      	ldr	r3, [sp, #4]
 8002514:	3b01      	subs	r3, #1
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	e7f9      	b.n	800250e <ADC_Enable+0x2a>
    tickstart = HAL_GetTick();
 800251a:	f7ff fe69 	bl	80021f0 <HAL_GetTick>
 800251e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f013 0f01 	tst.w	r3, #1
 8002528:	d116      	bne.n	8002558 <ADC_Enable+0x74>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800252a:	f7ff fe61 	bl	80021f0 <HAL_GetTick>
 800252e:	1b43      	subs	r3, r0, r5
 8002530:	2b02      	cmp	r3, #2
 8002532:	d9f5      	bls.n	8002520 <ADC_Enable+0x3c>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f013 0f01 	tst.w	r3, #1
 800253c:	d1f0      	bne.n	8002520 <ADC_Enable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 800254e:	2300      	movs	r3, #0
 8002550:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002554:	2001      	movs	r0, #1
 8002556:	e002      	b.n	800255e <ADC_Enable+0x7a>
  return HAL_OK;
 8002558:	2000      	movs	r0, #0
 800255a:	e000      	b.n	800255e <ADC_Enable+0x7a>
 800255c:	2000      	movs	r0, #0
}
 800255e:	b003      	add	sp, #12
 8002560:	bd30      	pop	{r4, r5, pc}
 8002562:	bf00      	nop
 8002564:	20000078 	.word	0x20000078
 8002568:	431bde83 	.word	0x431bde83

0800256c <HAL_ADC_Start_DMA>:
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	4604      	mov	r4, r0
 8002570:	460d      	mov	r5, r1
 8002572:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002574:	6803      	ldr	r3, [r0, #0]
 8002576:	4944      	ldr	r1, [pc, #272]	; (8002688 <HAL_ADC_Start_DMA+0x11c>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d059      	beq.n	8002630 <HAL_ADC_Start_DMA+0xc4>
 800257c:	4a43      	ldr	r2, [pc, #268]	; (800268c <HAL_ADC_Start_DMA+0x120>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d056      	beq.n	8002630 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8002582:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002586:	2b01      	cmp	r3, #1
 8002588:	d07c      	beq.n	8002684 <HAL_ADC_Start_DMA+0x118>
 800258a:	2301      	movs	r3, #1
 800258c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff ffa7 	bl	80024e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002596:	4607      	mov	r7, r0
 8002598:	2800      	cmp	r0, #0
 800259a:	d16e      	bne.n	800267a <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 800259c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800259e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_ADC_Start_DMA+0x120>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d044      	beq.n	800263e <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025ba:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025bc:	6853      	ldr	r3, [r2, #4]
 80025be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025c2:	d005      	beq.n	80025d0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ce:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80025d6:	d048      	beq.n	800266a <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025da:	f023 0306 	bic.w	r3, r3, #6
 80025de:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80025e0:	2300      	movs	r3, #0
 80025e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e6:	6a23      	ldr	r3, [r4, #32]
 80025e8:	4a29      	ldr	r2, [pc, #164]	; (8002690 <HAL_ADC_Start_DMA+0x124>)
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ec:	6a23      	ldr	r3, [r4, #32]
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_ADC_Start_DMA+0x128>)
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f2:	6a23      	ldr	r3, [r4, #32]
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_ADC_Start_DMA+0x12c>)
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	f06f 0202 	mvn.w	r2, #2
 80025fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002600:	6822      	ldr	r2, [r4, #0]
 8002602:	6893      	ldr	r3, [r2, #8]
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800260a:	6821      	ldr	r1, [r4, #0]
 800260c:	4633      	mov	r3, r6
 800260e:	462a      	mov	r2, r5
 8002610:	314c      	adds	r1, #76	; 0x4c
 8002612:	6a20      	ldr	r0, [r4, #32]
 8002614:	f000 fa2a 	bl	8002a6c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002620:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002624:	d024      	beq.n	8002670 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	e027      	b.n	8002680 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_ADC_Start_DMA+0x11c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002638:	d0a3      	beq.n	8002582 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800263a:	2701      	movs	r7, #1
 800263c:	e020      	b.n	8002680 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800263e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002648:	d0b4      	beq.n	80025b4 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800264a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800264c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002650:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_ADC_Start_DMA+0x11c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800265a:	d0b9      	beq.n	80025d0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800265c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800265e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002666:	62a3      	str	r3, [r4, #40]	; 0x28
 8002668:	e7b2      	b.n	80025d0 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800266a:	2300      	movs	r3, #0
 800266c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800266e:	e7b7      	b.n	80025e0 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e002      	b.n	8002680 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800267a:	2300      	movs	r3, #0
 800267c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002680:	4638      	mov	r0, r7
 8002682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002684:	2702      	movs	r7, #2
 8002686:	e7fb      	b.n	8002680 <HAL_ADC_Start_DMA+0x114>
 8002688:	40012400 	.word	0x40012400
 800268c:	40012800 	.word	0x40012800
 8002690:	08002225 	.word	0x08002225
 8002694:	08002279 	.word	0x08002279
 8002698:	08002391 	.word	0x08002391

0800269c <ADC_ConversionStop_Disable>:
{
 800269c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	f012 0f01 	tst.w	r2, #1
 80026a6:	d101      	bne.n	80026ac <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80026a8:	2000      	movs	r0, #0
}
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80026b6:	f7ff fd9b 	bl	80021f0 <HAL_GetTick>
 80026ba:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f013 0f01 	tst.w	r3, #1
 80026c4:	d013      	beq.n	80026ee <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c6:	f7ff fd93 	bl	80021f0 <HAL_GetTick>
 80026ca:	1b43      	subs	r3, r0, r5
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d9f5      	bls.n	80026bc <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f013 0f01 	tst.w	r3, #1
 80026d8:	d0f0      	beq.n	80026bc <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80026ea:	2001      	movs	r0, #1
 80026ec:	e7dd      	b.n	80026aa <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80026ee:	2000      	movs	r0, #0
 80026f0:	e7db      	b.n	80026aa <ADC_ConversionStop_Disable+0xe>
	...

080026f4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d07b      	beq.n	80027f0 <HAL_ADC_Init+0xfc>
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04d      	beq.n	800279e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff ffca 	bl	800269c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800270a:	f013 0310 	ands.w	r3, r3, #16
 800270e:	d169      	bne.n	80027e4 <HAL_ADC_Init+0xf0>
 8002710:	2800      	cmp	r0, #0
 8002712:	d167      	bne.n	80027e4 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8002714:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002716:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800271a:	f022 0202 	bic.w	r2, r2, #2
 800271e:	f042 0202 	orr.w	r2, r2, #2
 8002722:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002724:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002726:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002728:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800272a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800272c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002730:	68a5      	ldr	r5, [r4, #8]
 8002732:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002736:	d002      	beq.n	800273e <HAL_ADC_Init+0x4a>
 8002738:	2d01      	cmp	r5, #1
 800273a:	d036      	beq.n	80027aa <HAL_ADC_Init+0xb6>
 800273c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800273e:	7d26      	ldrb	r6, [r4, #20]
 8002740:	2e01      	cmp	r6, #1
 8002742:	d035      	beq.n	80027b0 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8002744:	6826      	ldr	r6, [r4, #0]
 8002746:	6871      	ldr	r1, [r6, #4]
 8002748:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800274c:	4329      	orrs	r1, r5
 800274e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002750:	6825      	ldr	r5, [r4, #0]
 8002752:	68ae      	ldr	r6, [r5, #8]
 8002754:	4927      	ldr	r1, [pc, #156]	; (80027f4 <HAL_ADC_Init+0x100>)
 8002756:	4031      	ands	r1, r6
 8002758:	4311      	orrs	r1, r2
 800275a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800275c:	68a1      	ldr	r1, [r4, #8]
 800275e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002762:	d001      	beq.n	8002768 <HAL_ADC_Init+0x74>
 8002764:	2901      	cmp	r1, #1
 8002766:	d102      	bne.n	800276e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002768:	6923      	ldr	r3, [r4, #16]
 800276a:	3b01      	subs	r3, #1
 800276c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002772:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002776:	430b      	orrs	r3, r1
 8002778:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_ADC_Init+0x104>)
 8002780:	400b      	ands	r3, r1
 8002782:	429a      	cmp	r2, r3
 8002784:	d025      	beq.n	80027d2 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002788:	f023 0312 	bic.w	r3, r3, #18
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800279a:	2001      	movs	r0, #1
 800279c:	e027      	b.n	80027ee <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800279e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80027a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80027a4:	f003 f928 	bl	80059f8 <HAL_ADC_MspInit>
 80027a8:	e7ab      	b.n	8002702 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027aa:	f44f 7580 	mov.w	r5, #256	; 0x100
 80027ae:	e7c6      	b.n	800273e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027b0:	b931      	cbnz	r1, 80027c0 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027b2:	69a1      	ldr	r1, [r4, #24]
 80027b4:	3901      	subs	r1, #1
 80027b6:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80027ba:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 80027be:	e7c1      	b.n	8002744 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80027c2:	f041 0120 	orr.w	r1, r1, #32
 80027c6:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80027ca:	f041 0101 	orr.w	r1, r1, #1
 80027ce:	62e1      	str	r1, [r4, #44]	; 0x2c
 80027d0:	e7b8      	b.n	8002744 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	2300      	movs	r3, #0
 80027d4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80027d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d8:	f023 0303 	bic.w	r3, r3, #3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80027e2:	e004      	b.n	80027ee <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
}
 80027f2:	4770      	bx	lr
 80027f4:	ffe1f7fd 	.word	0xffe1f7fd
 80027f8:	ff1f0efe 	.word	0xff1f0efe

080027fc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002804:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002808:	2b01      	cmp	r3, #1
 800280a:	d072      	beq.n	80028f2 <HAL_ADCEx_Calibration_Start+0xf6>
 800280c:	4604      	mov	r4, r0
 800280e:	2301      	movs	r3, #1
 8002810:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002814:	f7ff ff42 	bl	800269c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002818:	4605      	mov	r5, r0
 800281a:	b128      	cbz	r0, 8002828 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281c:	2300      	movs	r3, #0
 800281e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002822:	4628      	mov	r0, r5
 8002824:	b002      	add	sp, #8
 8002826:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800282a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800282e:	f023 0302 	bic.w	r3, r3, #2
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_ADCEx_Calibration_Start+0xfc>)
 800283a:	681e      	ldr	r6, [r3, #0]
 800283c:	2002      	movs	r0, #2
 800283e:	f002 fba5 	bl	8004f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002842:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002846:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002848:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 800284a:	e002      	b.n	8002852 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 800284c:	9b01      	ldr	r3, [sp, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002852:	9b01      	ldr	r3, [sp, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff fe43 	bl	80024e4 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	6893      	ldr	r3, [r2, #8]
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002868:	f7ff fcc2 	bl	80021f0 <HAL_GetTick>
 800286c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	f012 0f08 	tst.w	r2, #8
 8002876:	d014      	beq.n	80028a2 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002878:	f7ff fcba 	bl	80021f0 <HAL_GetTick>
 800287c:	1b80      	subs	r0, r0, r6
 800287e:	280a      	cmp	r0, #10
 8002880:	d9f5      	bls.n	800286e <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f013 0f08 	tst.w	r3, #8
 800288a:	d0f0      	beq.n	800286e <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 800288c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800288e:	f023 0312 	bic.w	r3, r3, #18
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002898:	2300      	movs	r3, #0
 800289a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 800289e:	2501      	movs	r5, #1
 80028a0:	e7bf      	b.n	8002822 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	f042 0204 	orr.w	r2, r2, #4
 80028a8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80028aa:	f7ff fca1 	bl	80021f0 <HAL_GetTick>
 80028ae:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f013 0f04 	tst.w	r3, #4
 80028b8:	d014      	beq.n	80028e4 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028ba:	f7ff fc99 	bl	80021f0 <HAL_GetTick>
 80028be:	1b80      	subs	r0, r0, r6
 80028c0:	280a      	cmp	r0, #10
 80028c2:	d9f5      	bls.n	80028b0 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f013 0f04 	tst.w	r3, #4
 80028cc:	d0f0      	beq.n	80028b0 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 80028ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028d0:	f023 0312 	bic.w	r3, r3, #18
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80028da:	2300      	movs	r3, #0
 80028dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80028e0:	2501      	movs	r5, #1
 80028e2:	e79e      	b.n	8002822 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80028f0:	e794      	b.n	800281c <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80028f2:	2502      	movs	r5, #2
 80028f4:	e795      	b.n	8002822 <HAL_ADCEx_Calibration_Start+0x26>
 80028f6:	bf00      	nop
 80028f8:	20000078 	.word	0x20000078

080028fc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002902:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002904:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800290c:	0200      	lsls	r0, r0, #8
 800290e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002912:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800291c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002924:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_NVIC_SetPriority+0x60>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292e:	f1c3 0407 	rsb	r4, r3, #7
 8002932:	2c04      	cmp	r4, #4
 8002934:	bf28      	it	cs
 8002936:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002938:	1d1d      	adds	r5, r3, #4
 800293a:	2d06      	cmp	r5, #6
 800293c:	d918      	bls.n	8002970 <HAL_NVIC_SetPriority+0x4c>
 800293e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 35ff 	mov.w	r5, #4294967295
 8002944:	fa05 f404 	lsl.w	r4, r5, r4
 8002948:	ea21 0104 	bic.w	r1, r1, r4
 800294c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294e:	fa05 f303 	lsl.w	r3, r5, r3
 8002952:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002956:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002958:	2800      	cmp	r0, #0
 800295a:	db0b      	blt.n	8002974 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	0109      	lsls	r1, r1, #4
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002964:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002968:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800296c:	bc30      	pop	{r4, r5}
 800296e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002970:	2300      	movs	r3, #0
 8002972:	e7e5      	b.n	8002940 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	f000 000f 	and.w	r0, r0, #15
 8002978:	0109      	lsls	r1, r1, #4
 800297a:	b2c9      	uxtb	r1, r1
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_NVIC_SetPriority+0x64>)
 800297e:	5419      	strb	r1, [r3, r0]
 8002980:	e7f4      	b.n	800296c <HAL_NVIC_SetPriority+0x48>
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	e000ed14 	.word	0xe000ed14

0800298c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800298c:	2800      	cmp	r0, #0
 800298e:	db07      	blt.n	80029a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002990:	f000 021f 	and.w	r2, r0, #31
 8002994:	0940      	lsrs	r0, r0, #5
 8002996:	2301      	movs	r3, #1
 8002998:	4093      	lsls	r3, r2
 800299a:	4a02      	ldr	r2, [pc, #8]	; (80029a4 <HAL_NVIC_EnableIRQ+0x18>)
 800299c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	3801      	subs	r0, #1
 80029aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80029ae:	d20a      	bcs.n	80029c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_SYSTICK_Config+0x24>)
 80029b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_SYSTICK_Config+0x28>)
 80029b6:	21f0      	movs	r1, #240	; 0xf0
 80029b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	2000      	movs	r0, #0
 80029be:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80029d8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80029da:	2401      	movs	r4, #1
 80029dc:	40b4      	lsls	r4, r6
 80029de:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029e0:	6804      	ldr	r4, [r0, #0]
 80029e2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e4:	6843      	ldr	r3, [r0, #4]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d005      	beq.n	80029f6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80029ea:	6803      	ldr	r3, [r0, #0]
 80029ec:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80029ee:	6803      	ldr	r3, [r0, #0]
 80029f0:	60da      	str	r2, [r3, #12]
  }
}
 80029f2:	bc70      	pop	{r4, r5, r6}
 80029f4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	60d9      	str	r1, [r3, #12]
 80029fe:	e7f8      	b.n	80029f2 <DMA_SetConfig+0x1e>

08002a00 <HAL_DMA_Init>:
  if(hdma == NULL)
 8002a00:	b360      	cbz	r0, 8002a5c <HAL_DMA_Init+0x5c>
{
 8002a02:	b410      	push	{r4}
 8002a04:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a06:	6801      	ldr	r1, [r0, #0]
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_DMA_Init+0x60>)
 8002a0a:	440b      	add	r3, r1
 8002a0c:	4815      	ldr	r0, [pc, #84]	; (8002a64 <HAL_DMA_Init+0x64>)
 8002a0e:	fba0 0303 	umull	r0, r3, r0, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_DMA_Init+0x68>)
 8002a1a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002a22:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a24:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8002a28:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002a2c:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2e:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8002a30:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	68d4      	ldr	r4, [r2, #12]
 8002a34:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a38:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3a:	6954      	ldr	r4, [r2, #20]
 8002a3c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3e:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	69d4      	ldr	r4, [r2, #28]
 8002a44:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002a46:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002a48:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002a54:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002a58:	bc10      	pop	{r4}
 8002a5a:	4770      	bx	lr
    return HAL_ERROR;
 8002a5c:	2001      	movs	r0, #1
}
 8002a5e:	4770      	bx	lr
 8002a60:	bffdfff8 	.word	0xbffdfff8
 8002a64:	cccccccd 	.word	0xcccccccd
 8002a68:	40020000 	.word	0x40020000

08002a6c <HAL_DMA_Start_IT>:
{
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002a70:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002a74:	2801      	cmp	r0, #1
 8002a76:	d031      	beq.n	8002adc <HAL_DMA_Start_IT+0x70>
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a7e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8002a82:	2801      	cmp	r0, #1
 8002a84:	d004      	beq.n	8002a90 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002a86:	2300      	movs	r3, #0
 8002a88:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002a8c:	2002      	movs	r0, #2
}
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a90:	2002      	movs	r0, #2
 8002a92:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	2000      	movs	r0, #0
 8002a98:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	6825      	ldr	r5, [r4, #0]
 8002a9c:	6828      	ldr	r0, [r5, #0]
 8002a9e:	f020 0001 	bic.w	r0, r0, #1
 8002aa2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff ff95 	bl	80029d4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aac:	b15b      	cbz	r3, 8002ac6 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	f043 030e 	orr.w	r3, r3, #14
 8002ab6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e7e3      	b.n	8002a8e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	f023 0304 	bic.w	r3, r3, #4
 8002ace:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	6813      	ldr	r3, [r2, #0]
 8002ad4:	f043 030a 	orr.w	r3, r3, #10
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e7ed      	b.n	8002ab8 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002adc:	2002      	movs	r0, #2
 8002ade:	e7d6      	b.n	8002a8e <HAL_DMA_Start_IT+0x22>

08002ae0 <HAL_DMA_Abort_IT>:
{  
 8002ae0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ae2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d003      	beq.n	8002af2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aea:	2304      	movs	r3, #4
 8002aec:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002aee:	2001      	movs	r0, #1
}
 8002af0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f023 030e 	bic.w	r3, r3, #14
 8002afa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002afc:	6802      	ldr	r2, [r0, #0]
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_DMA_Abort_IT+0x90>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d014      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x58>
 8002b0e:	3214      	adds	r2, #20
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d01f      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x74>
 8002b14:	3214      	adds	r2, #20
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01e      	beq.n	8002b58 <HAL_DMA_Abort_IT+0x78>
 8002b1a:	3214      	adds	r2, #20
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01e      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x7e>
 8002b20:	3214      	adds	r2, #20
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01e      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x84>
 8002b26:	3214      	adds	r2, #20
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d002      	beq.n	8002b32 <HAL_DMA_Abort_IT+0x52>
 8002b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b30:	e003      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
 8002b32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b36:	e000      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_DMA_Abort_IT+0x94>)
 8002b3c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002b44:	2300      	movs	r3, #0
 8002b46:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002b4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b4c:	b16b      	cbz	r3, 8002b6a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002b4e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002b50:	2000      	movs	r0, #0
 8002b52:	e7cd      	b.n	8002af0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b54:	2210      	movs	r2, #16
 8002b56:	e7f0      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
 8002b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b5c:	e7ed      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
 8002b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b62:	e7ea      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
 8002b64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b68:	e7e7      	b.n	8002b3a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e7c0      	b.n	8002af0 <HAL_DMA_Abort_IT+0x10>
 8002b6e:	bf00      	nop
 8002b70:	40020008 	.word	0x40020008
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_DMA_IRQHandler>:
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b7a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b7c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b7e:	6804      	ldr	r4, [r0, #0]
 8002b80:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b82:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b84:	2304      	movs	r3, #4
 8002b86:	408b      	lsls	r3, r1
 8002b88:	4213      	tst	r3, r2
 8002b8a:	d035      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x80>
 8002b8c:	f015 0f04 	tst.w	r5, #4
 8002b90:	d032      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	f013 0f20 	tst.w	r3, #32
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	4a43      	ldr	r2, [pc, #268]	; (8002cb4 <HAL_DMA_IRQHandler+0x13c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d014      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x5c>
 8002baa:	3214      	adds	r2, #20
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x6a>
 8002bb0:	3214      	adds	r2, #20
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x6e>
 8002bb6:	3214      	adds	r2, #20
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d017      	beq.n	8002bec <HAL_DMA_IRQHandler+0x74>
 8002bbc:	3214      	adds	r2, #20
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d017      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x7a>
 8002bc2:	3214      	adds	r2, #20
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d002      	beq.n	8002bce <HAL_DMA_IRQHandler+0x56>
 8002bc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bcc:	e003      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
 8002bce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bd2:	e000      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_DMA_IRQHandler+0x140>)
 8002bd8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bdc:	b103      	cbz	r3, 8002be0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002bde:	4798      	blx	r3
}
 8002be0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	e7f7      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
 8002be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bea:	e7f4      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
 8002bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf0:	e7f1      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
 8002bf2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bf6:	e7ee      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	408b      	lsls	r3, r1
 8002bfc:	4213      	tst	r3, r2
 8002bfe:	d03c      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x102>
 8002c00:	f015 0f02 	tst.w	r5, #2
 8002c04:	d039      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	f013 0f20 	tst.w	r3, #32
 8002c0c:	d106      	bne.n	8002c1c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f023 030a 	bic.w	r3, r3, #10
 8002c14:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c1c:	6803      	ldr	r3, [r0, #0]
 8002c1e:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <HAL_DMA_IRQHandler+0x13c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d014      	beq.n	8002c4e <HAL_DMA_IRQHandler+0xd6>
 8002c24:	3214      	adds	r2, #20
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01c      	beq.n	8002c64 <HAL_DMA_IRQHandler+0xec>
 8002c2a:	3214      	adds	r2, #20
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d01b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0xf0>
 8002c30:	3214      	adds	r2, #20
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01b      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xf6>
 8002c36:	3214      	adds	r2, #20
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01b      	beq.n	8002c74 <HAL_DMA_IRQHandler+0xfc>
 8002c3c:	3214      	adds	r2, #20
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d002      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd0>
 8002c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c46:	e003      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
 8002c48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c4c:	e000      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_DMA_IRQHandler+0x140>)
 8002c52:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002c54:	2300      	movs	r3, #0
 8002c56:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0bf      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8002c60:	4798      	blx	r3
 8002c62:	e7bd      	b.n	8002be0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c64:	2220      	movs	r2, #32
 8002c66:	e7f3      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
 8002c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6c:	e7f0      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
 8002c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c72:	e7ed      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
 8002c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c78:	e7ea      	b.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	fa03 f101 	lsl.w	r1, r3, r1
 8002c80:	4211      	tst	r1, r2
 8002c82:	d0ad      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x68>
 8002c84:	f015 0f08 	tst.w	r5, #8
 8002c88:	d0aa      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f023 030e 	bic.w	r3, r3, #14
 8002c90:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c92:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c94:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c96:	2301      	movs	r3, #1
 8002c98:	fa03 f202 	lsl.w	r2, r3, r2
 8002c9c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c9e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002caa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d097      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8002cb0:	4798      	blx	r3
  return;
 8002cb2:	e795      	b.n	8002be0 <HAL_DMA_IRQHandler+0x68>
 8002cb4:	40020008 	.word	0x40020008
 8002cb8:	40020000 	.word	0x40020000

08002cbc <HAL_DMA_GetState>:
}
 8002cbc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b4f0      	push	{r4, r5, r6, r7}
 8002cc6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc8:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8002cca:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	e0a3      	b.n	8002e16 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cce:	4f7f      	ldr	r7, [pc, #508]	; (8002ecc <HAL_GPIO_Init+0x208>)
 8002cd0:	42bb      	cmp	r3, r7
 8002cd2:	d010      	beq.n	8002cf6 <HAL_GPIO_Init+0x32>
 8002cd4:	d907      	bls.n	8002ce6 <HAL_GPIO_Init+0x22>
 8002cd6:	4f7e      	ldr	r7, [pc, #504]	; (8002ed0 <HAL_GPIO_Init+0x20c>)
 8002cd8:	42bb      	cmp	r3, r7
 8002cda:	d00c      	beq.n	8002cf6 <HAL_GPIO_Init+0x32>
 8002cdc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002ce0:	42bb      	cmp	r3, r7
 8002ce2:	d008      	beq.n	8002cf6 <HAL_GPIO_Init+0x32>
 8002ce4:	e013      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
 8002ce6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002cea:	42bb      	cmp	r3, r7
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x32>
 8002cee:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8002cf2:	42bb      	cmp	r3, r7
 8002cf4:	d107      	bne.n	8002d06 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cf6:	688b      	ldr	r3, [r1, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d058      	beq.n	8002dae <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d051      	beq.n	8002da4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002d00:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d02:	2508      	movs	r5, #8
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8002d06:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002d0a:	42bb      	cmp	r3, r7
 8002d0c:	d0f3      	beq.n	8002cf6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d0e:	2eff      	cmp	r6, #255	; 0xff
 8002d10:	d84f      	bhi.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d12:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d14:	2eff      	cmp	r6, #255	; 0xff
 8002d16:	d84f      	bhi.n	8002db8 <HAL_GPIO_Init+0xf4>
 8002d18:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d1a:	f8dc 3000 	ldr.w	r3, [ip]
 8002d1e:	270f      	movs	r7, #15
 8002d20:	4097      	lsls	r7, r2
 8002d22:	ea23 0307 	bic.w	r3, r3, r7
 8002d26:	fa05 f202 	lsl.w	r2, r5, r2
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d30:	684b      	ldr	r3, [r1, #4]
 8002d32:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d36:	d06d      	beq.n	8002e14 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_GPIO_Init+0x210>)
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	619a      	str	r2, [r3, #24]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002d4c:	08a2      	lsrs	r2, r4, #2
 8002d4e:	1c97      	adds	r7, r2, #2
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_GPIO_Init+0x214>)
 8002d52:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d56:	f004 0703 	and.w	r7, r4, #3
 8002d5a:	00bf      	lsls	r7, r7, #2
 8002d5c:	f04f 0c0f 	mov.w	ip, #15
 8002d60:	fa0c fc07 	lsl.w	ip, ip, r7
 8002d64:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d68:	4b5c      	ldr	r3, [pc, #368]	; (8002edc <HAL_GPIO_Init+0x218>)
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	d02a      	beq.n	8002dc4 <HAL_GPIO_Init+0x100>
 8002d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d72:	4298      	cmp	r0, r3
 8002d74:	f000 808a 	beq.w	8002e8c <HAL_GPIO_Init+0x1c8>
 8002d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7c:	4298      	cmp	r0, r3
 8002d7e:	f000 8087 	beq.w	8002e90 <HAL_GPIO_Init+0x1cc>
 8002d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d86:	4298      	cmp	r0, r3
 8002d88:	d01a      	beq.n	8002dc0 <HAL_GPIO_Init+0xfc>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e01b      	b.n	8002dc6 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d8e:	68cd      	ldr	r5, [r1, #12]
          break;
 8002d90:	e7bd      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d92:	68cd      	ldr	r5, [r1, #12]
 8002d94:	3504      	adds	r5, #4
          break;
 8002d96:	e7ba      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d98:	68cd      	ldr	r5, [r1, #12]
 8002d9a:	3508      	adds	r5, #8
          break;
 8002d9c:	e7b7      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d9e:	68cd      	ldr	r5, [r1, #12]
 8002da0:	350c      	adds	r5, #12
          break;
 8002da2:	e7b4      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002da4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da6:	2508      	movs	r5, #8
 8002da8:	e7b1      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002daa:	2500      	movs	r5, #0
 8002dac:	e7af      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dae:	2504      	movs	r5, #4
 8002db0:	e7ad      	b.n	8002d0e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db2:	f100 0c04 	add.w	ip, r0, #4
 8002db6:	e7ad      	b.n	8002d14 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	f1a4 0208 	sub.w	r2, r4, #8
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	e7ac      	b.n	8002d1a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <HAL_GPIO_Init+0x102>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	40bb      	lsls	r3, r7
 8002dc8:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002dcc:	3202      	adds	r2, #2
 8002dce:	4f42      	ldr	r7, [pc, #264]	; (8002ed8 <HAL_GPIO_Init+0x214>)
 8002dd0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd4:	684b      	ldr	r3, [r1, #4]
 8002dd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002dda:	d05b      	beq.n	8002e94 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ddc:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	4333      	orrs	r3, r6
 8002de2:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de4:	684b      	ldr	r3, [r1, #4]
 8002de6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002dea:	d059      	beq.n	8002ea0 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dec:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002dee:	6853      	ldr	r3, [r2, #4]
 8002df0:	4333      	orrs	r3, r6
 8002df2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df4:	684b      	ldr	r3, [r1, #4]
 8002df6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002dfa:	d057      	beq.n	8002eac <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002dfe:	6893      	ldr	r3, [r2, #8]
 8002e00:	4333      	orrs	r3, r6
 8002e02:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e04:	684b      	ldr	r3, [r1, #4]
 8002e06:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002e0a:	d055      	beq.n	8002eb8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e0c:	4a34      	ldr	r2, [pc, #208]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002e0e:	68d3      	ldr	r3, [r2, #12]
 8002e10:	431e      	orrs	r6, r3
 8002e12:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002e14:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	680b      	ldr	r3, [r1, #0]
 8002e18:	fa33 f204 	lsrs.w	r2, r3, r4
 8002e1c:	d052      	beq.n	8002ec4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8002e26:	ea32 0303 	bics.w	r3, r2, r3
 8002e2a:	d1f3      	bne.n	8002e14 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8002e2c:	684b      	ldr	r3, [r1, #4]
 8002e2e:	2b12      	cmp	r3, #18
 8002e30:	f63f af4d 	bhi.w	8002cce <HAL_GPIO_Init+0xa>
 8002e34:	2b12      	cmp	r3, #18
 8002e36:	f63f af6a 	bhi.w	8002d0e <HAL_GPIO_Init+0x4a>
 8002e3a:	a701      	add	r7, pc, #4	; (adr r7, 8002e40 <HAL_GPIO_Init+0x17c>)
 8002e3c:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8002e40:	08002cf7 	.word	0x08002cf7
 8002e44:	08002d8f 	.word	0x08002d8f
 8002e48:	08002d99 	.word	0x08002d99
 8002e4c:	08002dab 	.word	0x08002dab
 8002e50:	08002d0f 	.word	0x08002d0f
 8002e54:	08002d0f 	.word	0x08002d0f
 8002e58:	08002d0f 	.word	0x08002d0f
 8002e5c:	08002d0f 	.word	0x08002d0f
 8002e60:	08002d0f 	.word	0x08002d0f
 8002e64:	08002d0f 	.word	0x08002d0f
 8002e68:	08002d0f 	.word	0x08002d0f
 8002e6c:	08002d0f 	.word	0x08002d0f
 8002e70:	08002d0f 	.word	0x08002d0f
 8002e74:	08002d0f 	.word	0x08002d0f
 8002e78:	08002d0f 	.word	0x08002d0f
 8002e7c:	08002d0f 	.word	0x08002d0f
 8002e80:	08002d0f 	.word	0x08002d0f
 8002e84:	08002d93 	.word	0x08002d93
 8002e88:	08002d9f 	.word	0x08002d9f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e79a      	b.n	8002dc6 <HAL_GPIO_Init+0x102>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e798      	b.n	8002dc6 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	ea23 0306 	bic.w	r3, r3, r6
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e7a1      	b.n	8002de4 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002ea2:	6853      	ldr	r3, [r2, #4]
 8002ea4:	ea23 0306 	bic.w	r3, r3, r6
 8002ea8:	6053      	str	r3, [r2, #4]
 8002eaa:	e7a3      	b.n	8002df4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002eae:	6893      	ldr	r3, [r2, #8]
 8002eb0:	ea23 0306 	bic.w	r3, r3, r6
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	e7a5      	b.n	8002e04 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb8:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_GPIO_Init+0x21c>)
 8002eba:	68d3      	ldr	r3, [r2, #12]
 8002ebc:	ea23 0606 	bic.w	r6, r3, r6
 8002ec0:	60d6      	str	r6, [r2, #12]
 8002ec2:	e7a7      	b.n	8002e14 <HAL_GPIO_Init+0x150>
  }
}
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	10220000 	.word	0x10220000
 8002ed0:	10310000 	.word	0x10310000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	b10a      	cbz	r2, 8002eea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	6101      	str	r1, [r0, #16]
 8002ee8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eea:	0409      	lsls	r1, r1, #16
 8002eec:	6101      	str	r1, [r0, #16]
  }
}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ef0:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef2:	ea01 0203 	and.w	r2, r1, r3
 8002ef6:	ea21 0103 	bic.w	r1, r1, r3
 8002efa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002efe:	6101      	str	r1, [r0, #16]
}
 8002f00:	4770      	bx	lr

08002f02 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f02:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d010      	beq.n	8002f2e <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f0c:	6903      	ldr	r3, [r0, #16]
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f12:	d01b      	beq.n	8002f4c <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002f14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d139      	bne.n	8002f8e <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f1c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002f20:	6802      	ldr	r2, [r0, #0]
 8002f22:	f003 0306 	and.w	r3, r3, #6
 8002f26:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002f2a:	6113      	str	r3, [r2, #16]
 8002f2c:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8002f2e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f30:	b92b      	cbnz	r3, 8002f3e <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f34:	6802      	ldr	r2, [r0, #0]
 8002f36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f3a:	6113      	str	r3, [r2, #16]
 8002f3c:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	6113      	str	r3, [r2, #16]
 8002f4a:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f4c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b21      	cmp	r3, #33	; 0x21
 8002f54:	d00f      	beq.n	8002f76 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f58:	6802      	ldr	r2, [r0, #0]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f64:	b16b      	cbz	r3, 8002f82 <I2C_Master_SB+0x80>
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	b15b      	cbz	r3, 8002f82 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	6853      	ldr	r3, [r2, #4]
 8002f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f72:	6053      	str	r3, [r2, #4]
 8002f74:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f78:	6802      	ldr	r2, [r0, #0]
 8002f7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f7e:	6113      	str	r3, [r2, #16]
 8002f80:	e7ef      	b.n	8002f62 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f84:	b133      	cbz	r3, 8002f94 <I2C_Master_SB+0x92>
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <I2C_Master_SB+0x68>
 8002f8c:	e002      	b.n	8002f94 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8002f8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d000      	beq.n	8002f96 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8002f94:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f96:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f98:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002f9c:	6802      	ldr	r2, [r0, #0]
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8002fa6:	6113      	str	r3, [r2, #16]
}
 8002fa8:	e7f4      	b.n	8002f94 <I2C_Master_SB+0x92>

08002faa <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002faa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fac:	6802      	ldr	r2, [r0, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fb4:	b13b      	cbz	r3, 8002fc6 <I2C_Master_ADD10+0x1c>
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	b12b      	cbz	r3, 8002fc6 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fba:	6802      	ldr	r2, [r0, #0]
 8002fbc:	6853      	ldr	r3, [r2, #4]
 8002fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc2:	6053      	str	r3, [r2, #4]
  }
}
 8002fc4:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0fb      	beq.n	8002fc4 <I2C_Master_ADD10+0x1a>
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f3      	bne.n	8002fba <I2C_Master_ADD10+0x10>
 8002fd2:	e7f7      	b.n	8002fc4 <I2C_Master_ADD10+0x1a>

08002fd4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b410      	push	{r4}
 8002fd6:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002fd8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002fdc:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002fde:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002fe0:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b22      	cmp	r3, #34	; 0x22
 8002fea:	d00a      	beq.n	8003002 <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ff0:	6803      	ldr	r3, [r0, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }
}
 8002ffc:	b00d      	add	sp, #52	; 0x34
 8002ffe:	bc10      	pop	{r4}
 8003000:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003002:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003004:	b90b      	cbnz	r3, 800300a <I2C_Master_ADDR+0x36>
 8003006:	2a40      	cmp	r2, #64	; 0x40
 8003008:	d017      	beq.n	800303a <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800300a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800300c:	b91b      	cbnz	r3, 8003016 <I2C_Master_ADDR+0x42>
 800300e:	6903      	ldr	r3, [r0, #16]
 8003010:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003014:	d019      	beq.n	800304a <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 8003016:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d125      	bne.n	800306a <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	9303      	str	r3, [sp, #12]
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	9203      	str	r2, [sp, #12]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	9203      	str	r2, [sp, #12]
 800302a:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	6503      	str	r3, [r0, #80]	; 0x50
 8003038:	e7e0      	b.n	8002ffc <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	6803      	ldr	r3, [r0, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	9201      	str	r2, [sp, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9b01      	ldr	r3, [sp, #4]
 8003048:	e7d8      	b.n	8002ffc <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	6803      	ldr	r3, [r0, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	9202      	str	r2, [sp, #8]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	9202      	str	r2, [sp, #8]
 8003058:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003062:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003064:	3301      	adds	r3, #1
 8003066:	6503      	str	r3, [r0, #80]	; 0x50
 8003068:	e7c8      	b.n	8002ffc <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 800306a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d025      	beq.n	80030be <I2C_Master_ADDR+0xea>
      else if (hi2c->XferCount == 2U)
 8003072:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d07b      	beq.n	8003172 <I2C_Master_ADDR+0x19e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307a:	6802      	ldr	r2, [r0, #0]
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003084:	6803      	ldr	r3, [r0, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800308c:	d00e      	beq.n	80030ac <I2C_Master_ADDR+0xd8>
 800308e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003092:	d007      	beq.n	80030a4 <I2C_Master_ADDR+0xd0>
 8003094:	2901      	cmp	r1, #1
 8003096:	d005      	beq.n	80030a4 <I2C_Master_ADDR+0xd0>
 8003098:	2908      	cmp	r1, #8
 800309a:	d003      	beq.n	80030a4 <I2C_Master_ADDR+0xd0>
 800309c:	2910      	cmp	r1, #16
 800309e:	d001      	beq.n	80030a4 <I2C_Master_ADDR+0xd0>
 80030a0:	2920      	cmp	r1, #32
 80030a2:	d103      	bne.n	80030ac <I2C_Master_ADDR+0xd8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030aa:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ac:	2300      	movs	r3, #0
 80030ae:	930a      	str	r3, [sp, #40]	; 0x28
 80030b0:	6803      	ldr	r3, [r0, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	920a      	str	r2, [sp, #40]	; 0x28
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	930a      	str	r3, [sp, #40]	; 0x28
 80030ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030bc:	e7ba      	b.n	8003034 <I2C_Master_ADDR+0x60>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80030be:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80030c2:	d011      	beq.n	80030e8 <I2C_Master_ADDR+0x114>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80030c4:	2908      	cmp	r1, #8
 80030c6:	d034      	beq.n	8003132 <I2C_Master_ADDR+0x15e>
 80030c8:	2920      	cmp	r1, #32
 80030ca:	d032      	beq.n	8003132 <I2C_Master_ADDR+0x15e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80030cc:	2c12      	cmp	r4, #18
 80030ce:	d02e      	beq.n	800312e <I2C_Master_ADDR+0x15a>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030d0:	2904      	cmp	r1, #4
 80030d2:	d040      	beq.n	8003156 <I2C_Master_ADDR+0x182>
 80030d4:	2902      	cmp	r1, #2
 80030d6:	d03e      	beq.n	8003156 <I2C_Master_ADDR+0x182>
 80030d8:	2910      	cmp	r1, #16
 80030da:	d03c      	beq.n	8003156 <I2C_Master_ADDR+0x182>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030dc:	6802      	ldr	r2, [r0, #0]
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e03b      	b.n	8003160 <I2C_Master_ADDR+0x18c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	6802      	ldr	r2, [r0, #0]
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f0:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030f2:	6803      	ldr	r3, [r0, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80030fa:	d00c      	beq.n	8003116 <I2C_Master_ADDR+0x142>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003102:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	9304      	str	r3, [sp, #16]
 8003108:	6803      	ldr	r3, [r0, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	9204      	str	r2, [sp, #16]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	9304      	str	r3, [sp, #16]
 8003112:	9b04      	ldr	r3, [sp, #16]
 8003114:	e78e      	b.n	8003034 <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2200      	movs	r2, #0
 8003118:	9205      	str	r2, [sp, #20]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	9205      	str	r2, [sp, #20]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	9205      	str	r2, [sp, #20]
 8003122:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e782      	b.n	8003034 <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800312e:	2901      	cmp	r1, #1
 8003130:	d0ce      	beq.n	80030d0 <I2C_Master_ADDR+0xfc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	6802      	ldr	r2, [r0, #0]
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313a:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313c:	2300      	movs	r3, #0
 800313e:	9307      	str	r3, [sp, #28]
 8003140:	6803      	ldr	r3, [r0, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	9207      	str	r2, [sp, #28]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	9207      	str	r2, [sp, #28]
 800314a:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e76e      	b.n	8003034 <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	6802      	ldr	r2, [r0, #0]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	9306      	str	r3, [sp, #24]
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	9206      	str	r2, [sp, #24]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	9306      	str	r3, [sp, #24]
 800316e:	9b06      	ldr	r3, [sp, #24]
 8003170:	e760      	b.n	8003034 <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003172:	2904      	cmp	r1, #4
 8003174:	d015      	beq.n	80031a2 <I2C_Master_ADDR+0x1ce>
 8003176:	2902      	cmp	r1, #2
 8003178:	d013      	beq.n	80031a2 <I2C_Master_ADDR+0x1ce>
 800317a:	2910      	cmp	r1, #16
 800317c:	d011      	beq.n	80031a2 <I2C_Master_ADDR+0x1ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317e:	6802      	ldr	r2, [r0, #0]
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003186:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003188:	2300      	movs	r3, #0
 800318a:	9308      	str	r3, [sp, #32]
 800318c:	6803      	ldr	r3, [r0, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	9208      	str	r2, [sp, #32]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	9208      	str	r2, [sp, #32]
 8003196:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e00c      	b.n	80031bc <I2C_Master_ADDR+0x1e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	6802      	ldr	r2, [r0, #0]
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ac:	2300      	movs	r3, #0
 80031ae:	9309      	str	r3, [sp, #36]	; 0x24
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	9209      	str	r2, [sp, #36]	; 0x24
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031bc:	6803      	ldr	r3, [r0, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80031c4:	f43f af36 	beq.w	8003034 <I2C_Master_ADDR+0x60>
 80031c8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80031cc:	d008      	beq.n	80031e0 <I2C_Master_ADDR+0x20c>
 80031ce:	2901      	cmp	r1, #1
 80031d0:	d006      	beq.n	80031e0 <I2C_Master_ADDR+0x20c>
 80031d2:	2908      	cmp	r1, #8
 80031d4:	d004      	beq.n	80031e0 <I2C_Master_ADDR+0x20c>
 80031d6:	2910      	cmp	r1, #16
 80031d8:	d002      	beq.n	80031e0 <I2C_Master_ADDR+0x20c>
 80031da:	2920      	cmp	r1, #32
 80031dc:	f47f af2a 	bne.w	8003034 <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	e724      	b.n	8003034 <I2C_Master_ADDR+0x60>

080031ea <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80031ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	b15b      	cbz	r3, 8003208 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003208:	4770      	bx	lr

0800320a <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 800320a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	b15b      	cbz	r3, 8003228 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	6803      	ldr	r3, [r0, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003216:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003218:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800321a:	3301      	adds	r3, #1
 800321c:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800321e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003228:	4770      	bx	lr
	...

0800322c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800322c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003244:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 800324c:	9b01      	ldr	r3, [sp, #4]
 800324e:	b133      	cbz	r3, 800325e <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003250:	6803      	ldr	r3, [r0, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003258:	d1f5      	bne.n	8003246 <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 800325a:	2000      	movs	r0, #0
 800325c:	e004      	b.n	8003268 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8003266:	2001      	movs	r0, #1
}
 8003268:	b002      	add	sp, #8
 800326a:	4770      	bx	lr
 800326c:	20000078 	.word	0x20000078
 8003270:	14f8b589 	.word	0x14f8b589

08003274 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003274:	6803      	ldr	r3, [r0, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800327c:	d101      	bne.n	8003282 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800327e:	2000      	movs	r0, #0
}
 8003280:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003286:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	2300      	movs	r3, #0
 800328a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	2220      	movs	r2, #32
 800328e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003292:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003296:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003298:	f042 0204 	orr.w	r2, r2, #4
 800329c:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800329e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80032a2:	2001      	movs	r0, #1
 80032a4:	4770      	bx	lr

080032a6 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032ac:	d004      	beq.n	80032b8 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80032ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80032b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032b4:	d003      	beq.n	80032be <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032b6:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80032b8:	2301      	movs	r3, #1
 80032ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80032bc:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032be:	2308      	movs	r3, #8
 80032c0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80032c2:	e7f8      	b.n	80032b6 <I2C_ConvertOtherXferOptions+0x10>

080032c4 <I2C_WaitOnFlagUntilTimeout>:
{
 80032c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c8:	4607      	mov	r7, r0
 80032ca:	460d      	mov	r5, r1
 80032cc:	4690      	mov	r8, r2
 80032ce:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d0:	e022      	b.n	8003318 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe ff8d 	bl	80021f0 <HAL_GetTick>
 80032d6:	9b06      	ldr	r3, [sp, #24]
 80032d8:	1ac0      	subs	r0, r0, r3
 80032da:	42b0      	cmp	r0, r6
 80032dc:	d800      	bhi.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0x1c>
 80032de:	b9de      	cbnz	r6, 8003318 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e4:	2220      	movs	r2, #32
 80032e6:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032f0:	f042 0220 	orr.w	r2, r2, #32
 80032f4:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
 80032fc:	e01a      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699c      	ldr	r4, [r3, #24]
 8003302:	ea25 0404 	bic.w	r4, r5, r4
 8003306:	b2a4      	uxth	r4, r4
 8003308:	fab4 f484 	clz	r4, r4
 800330c:	0964      	lsrs	r4, r4, #5
 800330e:	45a0      	cmp	r8, r4
 8003310:	d10f      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8003312:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003316:	d1dc      	bne.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800331c:	2b01      	cmp	r3, #1
 800331e:	d1ee      	bne.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x3a>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695c      	ldr	r4, [r3, #20]
 8003324:	ea25 0404 	bic.w	r4, r5, r4
 8003328:	b2a4      	uxth	r4, r4
 800332a:	fab4 f484 	clz	r4, r4
 800332e:	0964      	lsrs	r4, r4, #5
 8003330:	e7ed      	b.n	800330e <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8003332:	2000      	movs	r0, #0
}
 8003334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003338 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333c:	4605      	mov	r5, r0
 800333e:	460e      	mov	r6, r1
 8003340:	4617      	mov	r7, r2
 8003342:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003344:	e03d      	b.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003354:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003356:	2300      	movs	r3, #0
 8003358:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	2220      	movs	r2, #32
 800335c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003364:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003366:	f042 0204 	orr.w	r2, r2, #4
 800336a:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800336c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003370:	2001      	movs	r0, #1
 8003372:	e034      	b.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe ff3c 	bl	80021f0 <HAL_GetTick>
 8003378:	eba0 0008 	sub.w	r0, r0, r8
 800337c:	42b8      	cmp	r0, r7
 800337e:	d800      	bhi.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8003380:	b9ff      	cbnz	r7, 80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	2300      	movs	r3, #0
 8003384:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	2220      	movs	r2, #32
 8003388:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003398:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e01e      	b.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	699c      	ldr	r4, [r3, #24]
 80033a4:	ea26 0404 	bic.w	r4, r6, r4
 80033a8:	b2a4      	uxth	r4, r4
 80033aa:	3c00      	subs	r4, #0
 80033ac:	bf18      	it	ne
 80033ae:	2401      	movne	r4, #1
 80033b0:	b1a4      	cbz	r4, 80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80033ba:	d1c4      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	f1b7 3fff 	cmp.w	r7, #4294967295
 80033c0:	d1d8      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c2:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d1ea      	bne.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	695c      	ldr	r4, [r3, #20]
 80033ce:	ea26 0404 	bic.w	r4, r6, r4
 80033d2:	b2a4      	uxth	r4, r4
 80033d4:	3c00      	subs	r4, #0
 80033d6:	bf18      	it	ne
 80033d8:	2401      	movne	r4, #1
 80033da:	e7e9      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 80033dc:	2000      	movs	r0, #0
}
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033e2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80033e2:	b570      	push	{r4, r5, r6, lr}
 80033e4:	4604      	mov	r4, r0
 80033e6:	460d      	mov	r5, r1
 80033e8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033f2:	d11c      	bne.n	800342e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff ff3d 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80033fa:	b9d0      	cbnz	r0, 8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003400:	d0f3      	beq.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fe fef5 	bl	80021f0 <HAL_GetTick>
 8003406:	1b80      	subs	r0, r0, r6
 8003408:	42a8      	cmp	r0, r5
 800340a:	d801      	bhi.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800340c:	2d00      	cmp	r5, #0
 800340e:	d1ec      	bne.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	2300      	movs	r3, #0
 8003412:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	2220      	movs	r2, #32
 8003416:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003426:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
 800342c:	e000      	b.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
}
 8003430:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
 8003434:	e7fc      	b.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08003438 <I2C_RequestMemoryWrite>:
{
 8003438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800343c:	b085      	sub	sp, #20
 800343e:	4604      	mov	r4, r0
 8003440:	460d      	mov	r5, r1
 8003442:	4691      	mov	r9, r2
 8003444:	461f      	mov	r7, r3
 8003446:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800344a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344c:	6803      	ldr	r3, [r0, #0]
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003454:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003456:	9600      	str	r6, [sp, #0]
 8003458:	4643      	mov	r3, r8
 800345a:	2200      	movs	r2, #0
 800345c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003460:	f7ff ff30 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003464:	b960      	cbnz	r0, 8003480 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800346c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346e:	4633      	mov	r3, r6
 8003470:	4642      	mov	r2, r8
 8003472:	4926      	ldr	r1, [pc, #152]	; (800350c <I2C_RequestMemoryWrite+0xd4>)
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff ff5f 	bl	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347a:	b168      	cbz	r0, 8003498 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
 800347e:	e008      	b.n	8003492 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003488:	d002      	beq.n	8003490 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003490:	2003      	movs	r0, #3
}
 8003492:	b005      	add	sp, #20
 8003494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003498:	2300      	movs	r3, #0
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	9203      	str	r2, [sp, #12]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a8:	4632      	mov	r2, r6
 80034aa:	4641      	mov	r1, r8
 80034ac:	4620      	mov	r0, r4
 80034ae:	f7ff ff98 	bl	80033e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b2:	b930      	cbnz	r0, 80034c2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b4:	2f01      	cmp	r7, #1
 80034b6:	d10f      	bne.n	80034d8 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	fa5f f689 	uxtb.w	r6, r9
 80034be:	611e      	str	r6, [r3, #16]
 80034c0:	e7e7      	b.n	8003492 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d001      	beq.n	80034cc <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
 80034ca:	e7e2      	b.n	8003492 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e7f7      	b.n	80034c8 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80034de:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e0:	4632      	mov	r2, r6
 80034e2:	4641      	mov	r1, r8
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff ff7c 	bl	80033e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ea:	b920      	cbnz	r0, 80034f6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	fa5f f689 	uxtb.w	r6, r9
 80034f2:	611e      	str	r6, [r3, #16]
 80034f4:	e7cd      	b.n	8003492 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d001      	beq.n	8003500 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e7c8      	b.n	8003492 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e7f7      	b.n	80034fc <I2C_RequestMemoryWrite+0xc4>
 800350c:	00010002 	.word	0x00010002

08003510 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4604      	mov	r4, r0
 8003514:	460d      	mov	r5, r1
 8003516:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f013 0f04 	tst.w	r3, #4
 8003520:	d11c      	bne.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff fea6 	bl	8003274 <I2C_IsAcknowledgeFailed>
 8003528:	b9d0      	cbnz	r0, 8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800352a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800352e:	d0f3      	beq.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fe5e 	bl	80021f0 <HAL_GetTick>
 8003534:	1b80      	subs	r0, r0, r6
 8003536:	42a8      	cmp	r0, r5
 8003538:	d801      	bhi.n	800353e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800353a:	2d00      	cmp	r5, #0
 800353c:	d1ec      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	2300      	movs	r3, #0
 8003540:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003542:	2220      	movs	r2, #32
 8003544:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
 800355a:	e000      	b.n	800355e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800355c:	2000      	movs	r0, #0
}
 800355e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003560:	2001      	movs	r0, #1
 8003562:	e7fc      	b.n	800355e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003564 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003564:	2800      	cmp	r0, #0
 8003566:	f000 80cc 	beq.w	8003702 <HAL_I2C_Init+0x19e>
{
 800356a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003572:	2b00      	cmp	r3, #0
 8003574:	d077      	beq.n	8003666 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003576:	2324      	movs	r3, #36	; 0x24
 8003578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	6813      	ldr	r3, [r2, #0]
 800358a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003598:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800359a:	f001 fc4d 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359e:	6862      	ldr	r2, [r4, #4]
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_I2C_Init+0x1a8>)
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d864      	bhi.n	8003670 <HAL_I2C_Init+0x10c>
 80035a6:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_I2C_Init+0x1ac>)
 80035a8:	4298      	cmp	r0, r3
 80035aa:	bf8c      	ite	hi
 80035ac:	2300      	movhi	r3, #0
 80035ae:	2301      	movls	r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 80a8 	bne.w	8003706 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80035b6:	4d57      	ldr	r5, [pc, #348]	; (8003714 <HAL_I2C_Init+0x1b0>)
 80035b8:	fba5 3500 	umull	r3, r5, r5, r0
 80035bc:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035be:	6826      	ldr	r6, [r4, #0]
 80035c0:	6871      	ldr	r1, [r6, #4]
 80035c2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80035c6:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80035ca:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035cc:	6821      	ldr	r1, [r4, #0]
 80035ce:	6a0b      	ldr	r3, [r1, #32]
 80035d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035d4:	6865      	ldr	r5, [r4, #4]
 80035d6:	4a4d      	ldr	r2, [pc, #308]	; (800370c <HAL_I2C_Init+0x1a8>)
 80035d8:	4295      	cmp	r5, r2
 80035da:	d84f      	bhi.n	800367c <HAL_I2C_Init+0x118>
 80035dc:	1c7a      	adds	r2, r7, #1
 80035de:	4313      	orrs	r3, r2
 80035e0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e2:	6825      	ldr	r5, [r4, #0]
 80035e4:	69e9      	ldr	r1, [r5, #28]
 80035e6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80035ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035ee:	6863      	ldr	r3, [r4, #4]
 80035f0:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_I2C_Init+0x1a8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d84c      	bhi.n	8003690 <HAL_I2C_Init+0x12c>
 80035f6:	3801      	subs	r0, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80035fe:	3001      	adds	r0, #1
 8003600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003604:	4218      	tst	r0, r3
 8003606:	d078      	beq.n	80036fa <HAL_I2C_Init+0x196>
 8003608:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800360c:	430b      	orrs	r3, r1
 800360e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003610:	6821      	ldr	r1, [r4, #0]
 8003612:	680b      	ldr	r3, [r1, #0]
 8003614:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003618:	69e2      	ldr	r2, [r4, #28]
 800361a:	6a20      	ldr	r0, [r4, #32]
 800361c:	4302      	orrs	r2, r0
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	688b      	ldr	r3, [r1, #8]
 8003626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362e:	6922      	ldr	r2, [r4, #16]
 8003630:	68e0      	ldr	r0, [r4, #12]
 8003632:	4302      	orrs	r2, r0
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003638:	6821      	ldr	r1, [r4, #0]
 800363a:	68cb      	ldr	r3, [r1, #12]
 800363c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003640:	6962      	ldr	r2, [r4, #20]
 8003642:	69a0      	ldr	r0, [r4, #24]
 8003644:	4302      	orrs	r2, r0
 8003646:	4313      	orrs	r3, r2
 8003648:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	2000      	movs	r0, #0
 8003656:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003658:	2320      	movs	r3, #32
 800365a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800366a:	f002 fabd 	bl	8005be8 <HAL_I2C_MspInit>
 800366e:	e782      	b.n	8003576 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_I2C_Init+0x1b4>)
 8003672:	4298      	cmp	r0, r3
 8003674:	bf8c      	ite	hi
 8003676:	2300      	movhi	r3, #0
 8003678:	2301      	movls	r3, #1
 800367a:	e799      	b.n	80035b0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003680:	fb02 f207 	mul.w	r2, r2, r7
 8003684:	4d25      	ldr	r5, [pc, #148]	; (800371c <HAL_I2C_Init+0x1b8>)
 8003686:	fba5 5202 	umull	r5, r2, r5, r2
 800368a:	0992      	lsrs	r2, r2, #6
 800368c:	3201      	adds	r2, #1
 800368e:	e7a6      	b.n	80035de <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003690:	68a2      	ldr	r2, [r4, #8]
 8003692:	b9ba      	cbnz	r2, 80036c4 <HAL_I2C_Init+0x160>
 8003694:	1e46      	subs	r6, r0, #1
 8003696:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800369a:	fbb6 f6f7 	udiv	r6, r6, r7
 800369e:	3601      	adds	r6, #1
 80036a0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80036a4:	fab6 f686 	clz	r6, r6
 80036a8:	0976      	lsrs	r6, r6, #5
 80036aa:	bb46      	cbnz	r6, 80036fe <HAL_I2C_Init+0x19a>
 80036ac:	b9c2      	cbnz	r2, 80036e0 <HAL_I2C_Init+0x17c>
 80036ae:	1e42      	subs	r2, r0, #1
 80036b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80036b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b8:	3201      	adds	r2, #1
 80036ba:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80036be:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80036c2:	e7a3      	b.n	800360c <HAL_I2C_Init+0xa8>
 80036c4:	1e46      	subs	r6, r0, #1
 80036c6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80036ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80036ce:	fbb6 f6f7 	udiv	r6, r6, r7
 80036d2:	3601      	adds	r6, #1
 80036d4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80036d8:	fab6 f686 	clz	r6, r6
 80036dc:	0976      	lsrs	r6, r6, #5
 80036de:	e7e4      	b.n	80036aa <HAL_I2C_Init+0x146>
 80036e0:	1e42      	subs	r2, r0, #1
 80036e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ee:	3201      	adds	r2, #1
 80036f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80036f4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80036f8:	e788      	b.n	800360c <HAL_I2C_Init+0xa8>
 80036fa:	2304      	movs	r3, #4
 80036fc:	e786      	b.n	800360c <HAL_I2C_Init+0xa8>
 80036fe:	2301      	movs	r3, #1
 8003700:	e784      	b.n	800360c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003702:	2001      	movs	r0, #1
}
 8003704:	4770      	bx	lr
    return HAL_ERROR;
 8003706:	2001      	movs	r0, #1
 8003708:	e7ac      	b.n	8003664 <HAL_I2C_Init+0x100>
 800370a:	bf00      	nop
 800370c:	000186a0 	.word	0x000186a0
 8003710:	001e847f 	.word	0x001e847f
 8003714:	431bde83 	.word	0x431bde83
 8003718:	003d08ff 	.word	0x003d08ff
 800371c:	10624dd3 	.word	0x10624dd3

08003720 <HAL_I2C_Mem_Write>:
{
 8003720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003724:	b083      	sub	sp, #12
 8003726:	4604      	mov	r4, r0
 8003728:	460f      	mov	r7, r1
 800372a:	4690      	mov	r8, r2
 800372c:	4699      	mov	r9, r3
 800372e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7fe fd5e 	bl	80021f0 <HAL_GetTick>
 8003734:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800373a:	b2c0      	uxtb	r0, r0
 800373c:	2820      	cmp	r0, #32
 800373e:	d003      	beq.n	8003748 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8003740:	2002      	movs	r0, #2
}
 8003742:	b003      	add	sp, #12
 8003744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003748:	9500      	str	r5, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	494b      	ldr	r1, [pc, #300]	; (800387c <HAL_I2C_Mem_Write+0x15c>)
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff fdb7 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003756:	2800      	cmp	r0, #0
 8003758:	f040 8089 	bne.w	800386e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 800375c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	f000 8086 	beq.w	8003872 <HAL_I2C_Mem_Write+0x152>
 8003766:	2301      	movs	r3, #1
 8003768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	f012 0f01 	tst.w	r2, #1
 8003774:	d103      	bne.n	800377e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003786:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003788:	2321      	movs	r3, #33	; 0x21
 800378a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800378e:	2340      	movs	r3, #64	; 0x40
 8003790:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800379a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800379c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80037a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037a4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_I2C_Mem_Write+0x160>)
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	9501      	str	r5, [sp, #4]
 80037ac:	9600      	str	r6, [sp, #0]
 80037ae:	464b      	mov	r3, r9
 80037b0:	4642      	mov	r2, r8
 80037b2:	4639      	mov	r1, r7
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fe3f 	bl	8003438 <I2C_RequestMemoryWrite>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d15b      	bne.n	8003876 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80037be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d035      	beq.n	8003830 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	462a      	mov	r2, r5
 80037c6:	4631      	mov	r1, r6
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff fe0a 	bl	80033e2 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ce:	bb20      	cbnz	r0, 800381a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037da:	1c4b      	adds	r3, r1, #1
 80037dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80037de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80037e0:	3a01      	subs	r2, #1
 80037e2:	b292      	uxth	r2, r2
 80037e4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80037e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	6958      	ldr	r0, [r3, #20]
 80037f4:	f010 0f04 	tst.w	r0, #4
 80037f8:	d0e1      	beq.n	80037be <HAL_I2C_Mem_Write+0x9e>
 80037fa:	2a00      	cmp	r2, #0
 80037fc:	d0df      	beq.n	80037be <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	784a      	ldrb	r2, [r1, #1]
 8003800:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003804:	3301      	adds	r3, #1
 8003806:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003808:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800380e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29b      	uxth	r3, r3
 8003816:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003818:	e7d1      	b.n	80037be <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800381c:	2b04      	cmp	r3, #4
 800381e:	d001      	beq.n	8003824 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003820:	2001      	movs	r0, #1
 8003822:	e78e      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e7f7      	b.n	8003820 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	462a      	mov	r2, r5
 8003832:	4631      	mov	r1, r6
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff fe6b 	bl	8003510 <I2C_WaitOnBTFFlagUntilTimeout>
 800383a:	b150      	cbz	r0, 8003852 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
 8003844:	e77d      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e7f7      	b.n	8003842 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	2320      	movs	r3, #32
 800385e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	2300      	movs	r3, #0
 8003864:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003868:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800386c:	e769      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800386e:	2002      	movs	r0, #2
 8003870:	e767      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8003872:	2002      	movs	r0, #2
 8003874:	e765      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
 8003878:	e763      	b.n	8003742 <HAL_I2C_Mem_Write+0x22>
 800387a:	bf00      	nop
 800387c:	00100002 	.word	0x00100002
 8003880:	ffff0000 	.word	0xffff0000

08003884 <HAL_I2C_Mem_Write_DMA>:
{
 8003884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003888:	b085      	sub	sp, #20
 800388a:	4605      	mov	r5, r0
 800388c:	460e      	mov	r6, r1
 800388e:	4617      	mov	r7, r2
 8003890:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	9303      	str	r3, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 8003896:	f7fe fcab 	bl	80021f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800389a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 80c2 	bne.w	8003a2a <HAL_I2C_Mem_Write_DMA+0x1a6>
 80038a6:	4681      	mov	r9, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a8:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_I2C_Mem_Write_DMA+0x1b4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <HAL_I2C_Mem_Write_DMA+0x1b8>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038be:	9303      	str	r3, [sp, #12]
      count--;
 80038c0:	9c03      	ldr	r4, [sp, #12]
 80038c2:	3c01      	subs	r4, #1
 80038c4:	9403      	str	r4, [sp, #12]
      if (count == 0U)
 80038c6:	9c03      	ldr	r4, [sp, #12]
 80038c8:	2c00      	cmp	r4, #0
 80038ca:	d050      	beq.n	800396e <HAL_I2C_Mem_Write_DMA+0xea>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	f012 0f02 	tst.w	r2, #2
 80038d4:	d1f4      	bne.n	80038c0 <HAL_I2C_Mem_Write_DMA+0x3c>
    __HAL_LOCK(hi2c);
 80038d6:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80038da:	2a01      	cmp	r2, #1
 80038dc:	f000 80a9 	beq.w	8003a32 <HAL_I2C_Mem_Write_DMA+0x1ae>
 80038e0:	2201      	movs	r2, #1
 80038e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	f012 0f01 	tst.w	r2, #1
 80038ec:	d103      	bne.n	80038f6 <HAL_I2C_Mem_Write_DMA+0x72>
      __HAL_I2C_ENABLE(hi2c);
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f6:	682a      	ldr	r2, [r5, #0]
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038fe:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003900:	2321      	movs	r3, #33	; 0x21
 8003902:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003906:	2340      	movs	r3, #64	; 0x40
 8003908:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	2300      	movs	r3, #0
 800390e:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003912:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003914:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8003918:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800391a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003920:	4a47      	ldr	r2, [pc, #284]	; (8003a40 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8003922:	62ea      	str	r2, [r5, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 8003924:	2b00      	cmp	r3, #0
 8003926:	d072      	beq.n	8003a0e <HAL_I2C_Mem_Write_DMA+0x18a>
      if (hi2c->hdmatx != NULL)
 8003928:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02e      	beq.n	800398c <HAL_I2C_Mem_Write_DMA+0x108>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800392e:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003932:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003934:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003938:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800393a:	2300      	movs	r3, #0
 800393c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 800393e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003940:	6353      	str	r3, [r2, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003942:	682a      	ldr	r2, [r5, #0]
 8003944:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003946:	3210      	adds	r2, #16
 8003948:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800394a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800394c:	f7ff f88e 	bl	8002a6c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8003950:	b350      	cbz	r0, 80039a8 <HAL_I2C_Mem_Write_DMA+0x124>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003952:	2320      	movs	r3, #32
 8003954:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003958:	2200      	movs	r2, #0
 800395a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800395e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003960:	f043 0310 	orr.w	r3, r3, #16
 8003964:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003966:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800396a:	2001      	movs	r0, #1
 800396c:	e05e      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	2300      	movs	r3, #0
 8003970:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	2220      	movs	r2, #32
 8003974:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800397e:	f042 0220 	orr.w	r2, r2, #32
 8003982:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003984:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800398c:	2320      	movs	r3, #32
 800398e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003992:	2200      	movs	r2, #0
 8003994:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003998:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800399a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399e:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039a0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80039a4:	2001      	movs	r0, #1
 80039a6:	e041      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80039a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80039ac:	2323      	movs	r3, #35	; 0x23
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4643      	mov	r3, r8
 80039b2:	463a      	mov	r2, r7
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	f7ff fd3e 	bl	8003438 <I2C_RequestMemoryWrite>
 80039bc:	b998      	cbnz	r0, 80039e6 <HAL_I2C_Mem_Write_DMA+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2200      	movs	r2, #0
 80039c0:	9202      	str	r2, [sp, #8]
 80039c2:	682b      	ldr	r3, [r5, #0]
 80039c4:	6959      	ldr	r1, [r3, #20]
 80039c6:	9102      	str	r1, [sp, #8]
 80039c8:	6999      	ldr	r1, [r3, #24]
 80039ca:	9102      	str	r1, [sp, #8]
 80039cc:	9902      	ldr	r1, [sp, #8]
        __HAL_UNLOCK(hi2c);
 80039ce:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039da:	682a      	ldr	r2, [r5, #0]
 80039dc:	6853      	ldr	r3, [r2, #4]
 80039de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e2:	6053      	str	r3, [r2, #4]
        return HAL_OK;
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80039e6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80039e8:	f7ff f87a 	bl	8002ae0 <HAL_DMA_Abort_IT>
          hi2c->hdmatx->XferCpltCallback = NULL;
 80039ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80039ee:	2300      	movs	r3, #0
 80039f0:	6293      	str	r3, [r2, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	6829      	ldr	r1, [r5, #0]
 80039f4:	680a      	ldr	r2, [r1, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	600a      	str	r2, [r1, #0]
          hi2c->XferSize = 0U;
 80039fc:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount = 0U;
 80039fe:	856b      	strh	r3, [r5, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 8003a00:	682a      	ldr	r2, [r5, #0]
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	e00e      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a14:	2200      	movs	r2, #0
 8003a16:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003a1a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a20:	642b      	str	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003a22:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
 8003a28:	e000      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
    return HAL_BUSY;
 8003a2a:	2002      	movs	r0, #2
}
 8003a2c:	b005      	add	sp, #20
 8003a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8003a32:	2002      	movs	r0, #2
 8003a34:	e7fa      	b.n	8003a2c <HAL_I2C_Mem_Write_DMA+0x1a8>
 8003a36:	bf00      	nop
 8003a38:	20000078 	.word	0x20000078
 8003a3c:	14f8b589 	.word	0x14f8b589
 8003a40:	ffff0000 	.word	0xffff0000
 8003a44:	0800406f 	.word	0x0800406f
 8003a48:	08004035 	.word	0x08004035

08003a4c <HAL_I2C_IsDeviceReady>:
{
 8003a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	4605      	mov	r5, r0
 8003a54:	4689      	mov	r9, r1
 8003a56:	4692      	mov	sl, r2
 8003a58:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8003a5a:	f7fe fbc9 	bl	80021f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d003      	beq.n	8003a70 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003a68:	2002      	movs	r0, #2
}
 8003a6a:	b004      	add	sp, #16
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	9000      	str	r0, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	4958      	ldr	r1, [pc, #352]	; (8003bdc <HAL_I2C_IsDeviceReady+0x190>)
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff fc22 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f040 80a2 	bne.w	8003bca <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8003a86:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	f000 809f 	beq.w	8003bce <HAL_I2C_IsDeviceReady+0x182>
 8003a90:	2301      	movs	r3, #1
 8003a92:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f012 0f01 	tst.w	r2, #1
 8003a9e:	d103      	bne.n	8003aa8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa8:	682a      	ldr	r2, [r5, #0]
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ab0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	2324      	movs	r3, #36	; 0x24
 8003ab4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003abc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003ac0:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003ac2:	f04f 0801 	mov.w	r8, #1
 8003ac6:	e03f      	b.n	8003b48 <HAL_I2C_IsDeviceReady+0xfc>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ad0:	d002      	beq.n	8003ad8 <HAL_I2C_IsDeviceReady+0x8c>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad6:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8003ad8:	2003      	movs	r0, #3
 8003ada:	e7c6      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003adc:	23a0      	movs	r3, #160	; 0xa0
 8003ade:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ae2:	682a      	ldr	r2, [r5, #0]
 8003ae4:	6953      	ldr	r3, [r2, #20]
 8003ae6:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	6952      	ldr	r2, [r2, #20]
 8003aec:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003af0:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 8003af4:	b2e4      	uxtb	r4, r4
 8003af6:	2ca0      	cmp	r4, #160	; 0xa0
 8003af8:	d009      	beq.n	8003b0e <HAL_I2C_IsDeviceReady+0xc2>
 8003afa:	b943      	cbnz	r3, 8003b0e <HAL_I2C_IsDeviceReady+0xc2>
 8003afc:	b93a      	cbnz	r2, 8003b0e <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fb77 	bl	80021f0 <HAL_GetTick>
 8003b02:	1bc0      	subs	r0, r0, r7
 8003b04:	42b0      	cmp	r0, r6
 8003b06:	d8e9      	bhi.n	8003adc <HAL_I2C_IsDeviceReady+0x90>
 8003b08:	2e00      	cmp	r6, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_I2C_IsDeviceReady+0x96>
 8003b0c:	e7e6      	b.n	8003adc <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	f012 0f02 	tst.w	r2, #2
 8003b1c:	d132      	bne.n	8003b84 <HAL_I2C_IsDeviceReady+0x138>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b2e:	9700      	str	r7, [sp, #0]
 8003b30:	2319      	movs	r3, #25
 8003b32:	2201      	movs	r2, #1
 8003b34:	4929      	ldr	r1, [pc, #164]	; (8003bdc <HAL_I2C_IsDeviceReady+0x190>)
 8003b36:	4628      	mov	r0, r5
 8003b38:	f7ff fbc4 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d14a      	bne.n	8003bd6 <HAL_I2C_IsDeviceReady+0x18a>
      I2C_Trials++;
 8003b40:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8003b44:	45d0      	cmp	r8, sl
 8003b46:	d238      	bcs.n	8003bba <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b48:	682a      	ldr	r2, [r5, #0]
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	9700      	str	r7, [sp, #0]
 8003b54:	4633      	mov	r3, r6
 8003b56:	2200      	movs	r2, #0
 8003b58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f7ff fbb1 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d1b0      	bne.n	8003ac8 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 8003b6c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fb3f 	bl	80021f0 <HAL_GetTick>
 8003b72:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b74:	682a      	ldr	r2, [r5, #0]
 8003b76:	6953      	ldr	r3, [r2, #20]
 8003b78:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	6952      	ldr	r2, [r2, #20]
 8003b7e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b82:	e7b5      	b.n	8003af0 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	9203      	str	r2, [sp, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	9303      	str	r3, [sp, #12]
 8003b9a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9c:	9700      	str	r7, [sp, #0]
 8003b9e:	2319      	movs	r3, #25
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_I2C_IsDeviceReady+0x190>)
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f7ff fb8d 	bl	80032c4 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	b990      	cbnz	r0, 8003bd2 <HAL_I2C_IsDeviceReady+0x186>
        hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	2320      	movs	r3, #32
 8003bae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8003bb8:	e757      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	e74f      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003bca:	2002      	movs	r0, #2
 8003bcc:	e74d      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003bce:	2002      	movs	r0, #2
 8003bd0:	e74b      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	e749      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	e747      	b.n	8003a6a <HAL_I2C_IsDeviceReady+0x1e>
 8003bda:	bf00      	nop
 8003bdc:	00100002 	.word	0x00100002

08003be0 <HAL_I2C_MasterTxCpltCallback>:
}
 8003be0:	4770      	bx	lr

08003be2 <HAL_I2C_MasterRxCpltCallback>:
}
 8003be2:	4770      	bx	lr

08003be4 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003be4:	4770      	bx	lr

08003be6 <I2C_SlaveTransmit_TXE>:
{
 8003be6:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bec:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003bee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b183      	cbz	r3, 8003c16 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003bf6:	6803      	ldr	r3, [r0, #0]
 8003bf8:	7809      	ldrb	r1, [r1, #0]
 8003bfa:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003bfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003bfe:	3301      	adds	r3, #1
 8003c00:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003c02:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c0c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b90b      	cbnz	r3, 8003c16 <I2C_SlaveTransmit_TXE+0x30>
 8003c12:	2a29      	cmp	r2, #41	; 0x29
 8003c14:	d000      	beq.n	8003c18 <I2C_SlaveTransmit_TXE+0x32>
}
 8003c16:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c18:	6802      	ldr	r2, [r0, #0]
 8003c1a:	6853      	ldr	r3, [r2, #4]
 8003c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c20:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c22:	2321      	movs	r3, #33	; 0x21
 8003c24:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c26:	2328      	movs	r3, #40	; 0x28
 8003c28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c2c:	f7ff ffda 	bl	8003be4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c30:	e7f1      	b.n	8003c16 <I2C_SlaveTransmit_TXE+0x30>

08003c32 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003c32:	4770      	bx	lr

08003c34 <I2C_SlaveReceive_RXNE>:
{
 8003c34:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c3a:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003c3c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b183      	cbz	r3, 8003c64 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	6803      	ldr	r3, [r0, #0]
 8003c44:	6919      	ldr	r1, [r3, #16]
 8003c46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c48:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003c4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003c50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c5a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b90b      	cbnz	r3, 8003c64 <I2C_SlaveReceive_RXNE+0x30>
 8003c60:	2a2a      	cmp	r2, #42	; 0x2a
 8003c62:	d000      	beq.n	8003c66 <I2C_SlaveReceive_RXNE+0x32>
}
 8003c64:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c66:	6802      	ldr	r2, [r0, #0]
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c6e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c70:	2322      	movs	r3, #34	; 0x22
 8003c72:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c74:	2328      	movs	r3, #40	; 0x28
 8003c76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c7a:	f7ff ffda 	bl	8003c32 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c7e:	e7f1      	b.n	8003c64 <I2C_SlaveReceive_RXNE+0x30>

08003c80 <HAL_I2C_AddrCallback>:
}
 8003c80:	4770      	bx	lr

08003c82 <I2C_Slave_ADDR>:
{
 8003c82:	b500      	push	{lr}
 8003c84:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c8e:	2b28      	cmp	r3, #40	; 0x28
 8003c90:	d00c      	beq.n	8003cac <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	6802      	ldr	r2, [r0, #0]
 8003c98:	6951      	ldr	r1, [r2, #20]
 8003c9a:	9101      	str	r1, [sp, #4]
 8003c9c:	6992      	ldr	r2, [r2, #24]
 8003c9e:	9201      	str	r2, [sp, #4]
 8003ca0:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8003ca2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003ca6:	b003      	add	sp, #12
 8003ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cac:	6802      	ldr	r2, [r0, #0]
 8003cae:	6853      	ldr	r3, [r2, #4]
 8003cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cb4:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cb6:	f011 0f04 	tst.w	r1, #4
 8003cba:	d00b      	beq.n	8003cd4 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cbc:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003cc2:	d109      	bne.n	8003cd8 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003cc4:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7ff ffd7 	bl	8003c80 <HAL_I2C_AddrCallback>
 8003cd2:	e7e8      	b.n	8003ca6 <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e7f2      	b.n	8003cbe <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cd8:	8b02      	ldrh	r2, [r0, #24]
 8003cda:	e7f4      	b.n	8003cc6 <I2C_Slave_ADDR+0x44>

08003cdc <HAL_I2C_ListenCpltCallback>:
}
 8003cdc:	4770      	bx	lr

08003cde <I2C_MasterTransmit_BTF>:
{
 8003cde:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ce2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b21      	cmp	r3, #33	; 0x21
 8003cea:	d000      	beq.n	8003cee <I2C_MasterTransmit_BTF+0x10>
}
 8003cec:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003cee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b163      	cbz	r3, 8003d0e <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003d02:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003d0c:	e7ee      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d0e:	2a08      	cmp	r2, #8
 8003d10:	d004      	beq.n	8003d1c <I2C_MasterTransmit_BTF+0x3e>
 8003d12:	2a20      	cmp	r2, #32
 8003d14:	d002      	beq.n	8003d1c <I2C_MasterTransmit_BTF+0x3e>
 8003d16:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003d1a:	d119      	bne.n	8003d50 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d24:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	6802      	ldr	r2, [r0, #0]
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2e:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	2320      	movs	r3, #32
 8003d36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d3a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d015      	beq.n	8003d70 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d4a:	f7ff ff49 	bl	8003be0 <HAL_I2C_MasterTxCpltCallback>
}
 8003d4e:	e7cd      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d50:	6802      	ldr	r2, [r0, #0]
 8003d52:	6853      	ldr	r3, [r2, #4]
 8003d54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d58:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d5a:	2311      	movs	r3, #17
 8003d5c:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	2320      	movs	r3, #32
 8003d66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d6a:	f7ff ff39 	bl	8003be0 <HAL_I2C_MasterTxCpltCallback>
 8003d6e:	e7bd      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d76:	f002 f897 	bl	8005ea8 <HAL_I2C_MemTxCpltCallback>
 8003d7a:	e7b7      	b.n	8003cec <I2C_MasterTransmit_BTF+0xe>

08003d7c <I2C_MemoryTransmit_TXE_BTF>:
{
 8003d7c:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8003d82:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003d84:	b99a      	cbnz	r2, 8003dae <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d008      	beq.n	8003d9e <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003d92:	6802      	ldr	r2, [r0, #0]
 8003d94:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003d96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003d9c:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d9e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003da0:	6802      	ldr	r2, [r0, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003da6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003da8:	3302      	adds	r3, #2
 8003daa:	6503      	str	r3, [r0, #80]	; 0x50
 8003dac:	e7f6      	b.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003dae:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8003db0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003db2:	2a01      	cmp	r2, #1
 8003db4:	d023      	beq.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8003db6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003db8:	2a02      	cmp	r2, #2
 8003dba:	d1ef      	bne.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003dbc:	2b22      	cmp	r3, #34	; 0x22
 8003dbe:	d026      	beq.n	8003e0e <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dc0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	b10a      	cbz	r2, 8003dca <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8003dc6:	2b21      	cmp	r3, #33	; 0x21
 8003dc8:	d02a      	beq.n	8003e20 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	2a00      	cmp	r2, #0
 8003dd0:	d1e4      	bne.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003dd2:	2b21      	cmp	r3, #33	; 0x21
 8003dd4:	d1e2      	bne.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd6:	6802      	ldr	r2, [r0, #0]
 8003dd8:	6853      	ldr	r3, [r2, #4]
 8003dda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dde:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	6802      	ldr	r2, [r0, #0]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	2220      	movs	r2, #32
 8003df0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003df8:	f002 f856 	bl	8005ea8 <HAL_I2C_MemTxCpltCallback>
}
 8003dfc:	e7ce      	b.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dfe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003e00:	6802      	ldr	r2, [r0, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8003e06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003e08:	3301      	adds	r3, #1
 8003e0a:	6503      	str	r3, [r0, #80]	; 0x50
 8003e0c:	e7c6      	b.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e0e:	6802      	ldr	r2, [r0, #0]
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e16:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8003e18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6503      	str	r3, [r0, #80]	; 0x50
 8003e1e:	e7bd      	b.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e20:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003e22:	6803      	ldr	r3, [r0, #0]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003e2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003e38:	e7b0      	b.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x20>

08003e3a <I2C_MasterTransmit_TXE>:
{
 8003e3a:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e42:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003e46:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e4a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003e4c:	b909      	cbnz	r1, 8003e52 <I2C_MasterTransmit_TXE+0x18>
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d004      	beq.n	8003e5c <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e52:	2b21      	cmp	r3, #33	; 0x21
 8003e54:	d03b      	beq.n	8003ece <I2C_MasterTransmit_TXE+0x94>
 8003e56:	2a40      	cmp	r2, #64	; 0x40
 8003e58:	d037      	beq.n	8003eca <I2C_MasterTransmit_TXE+0x90>
}
 8003e5a:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e5c:	2c08      	cmp	r4, #8
 8003e5e:	d004      	beq.n	8003e6a <I2C_MasterTransmit_TXE+0x30>
 8003e60:	2c20      	cmp	r4, #32
 8003e62:	d002      	beq.n	8003e6a <I2C_MasterTransmit_TXE+0x30>
 8003e64:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8003e68:	d119      	bne.n	8003e9e <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6a:	6802      	ldr	r2, [r0, #0]
 8003e6c:	6853      	ldr	r3, [r2, #4]
 8003e6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e72:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	6802      	ldr	r2, [r0, #0]
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	2320      	movs	r3, #32
 8003e84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d015      	beq.n	8003ebe <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e98:	f7ff fea2 	bl	8003be0 <HAL_I2C_MasterTxCpltCallback>
 8003e9c:	e7dd      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9e:	6802      	ldr	r2, [r0, #0]
 8003ea0:	6853      	ldr	r3, [r2, #4]
 8003ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ea6:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ea8:	2311      	movs	r3, #17
 8003eaa:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eb8:	f7ff fe92 	bl	8003be0 <HAL_I2C_MasterTxCpltCallback>
 8003ebc:	e7cd      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec4:	f001 fff0 	bl	8005ea8 <HAL_I2C_MemTxCpltCallback>
 8003ec8:	e7c7      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003eca:	2b22      	cmp	r3, #34	; 0x22
 8003ecc:	d1c5      	bne.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8003ece:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	b92b      	cbnz	r3, 8003ee0 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed4:	6802      	ldr	r2, [r0, #0]
 8003ed6:	6853      	ldr	r3, [r2, #4]
 8003ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003edc:	6053      	str	r3, [r2, #4]
 8003ede:	e7bc      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d00c      	beq.n	8003f04 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003eec:	6803      	ldr	r3, [r0, #0]
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ef2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8003ef8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003f02:	e7aa      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f04:	f7ff ff3a 	bl	8003d7c <I2C_MemoryTransmit_TXE_BTF>
 8003f08:	e7a7      	b.n	8003e5a <I2C_MasterTransmit_TXE+0x20>

08003f0a <HAL_I2C_MemRxCpltCallback>:
}
 8003f0a:	4770      	bx	lr

08003f0c <I2C_MasterReceive_BTF>:
{
 8003f0c:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f0e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003f10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d014      	beq.n	8003f42 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8003f18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d022      	beq.n	8003f66 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8003f20:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d039      	beq.n	8003f9c <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f32:	3301      	adds	r3, #1
 8003f34:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003f36:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003f40:	e010      	b.n	8003f64 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f42:	6802      	ldr	r2, [r0, #0]
 8003f44:	6853      	ldr	r3, [r2, #4]
 8003f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f4a:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	6803      	ldr	r3, [r0, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f56:	3301      	adds	r3, #1
 8003f58:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003f5a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003f64:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f66:	6801      	ldr	r1, [r0, #0]
 8003f68:	684b      	ldr	r3, [r1, #4]
 8003f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6e:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f70:	2a04      	cmp	r2, #4
 8003f72:	d006      	beq.n	8003f82 <I2C_MasterReceive_BTF+0x76>
 8003f74:	2a02      	cmp	r2, #2
 8003f76:	d004      	beq.n	8003f82 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f78:	6802      	ldr	r2, [r0, #0]
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f80:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	6803      	ldr	r3, [r0, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003f90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003f9a:	e7e3      	b.n	8003f64 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	d00b      	beq.n	8003fb8 <I2C_MasterReceive_BTF+0xac>
 8003fa0:	2a10      	cmp	r2, #16
 8003fa2:	d009      	beq.n	8003fb8 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fa4:	2a04      	cmp	r2, #4
 8003fa6:	d038      	beq.n	800401a <I2C_MasterReceive_BTF+0x10e>
 8003fa8:	2a02      	cmp	r2, #2
 8003faa:	d036      	beq.n	800401a <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	6802      	ldr	r2, [r0, #0]
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e004      	b.n	8003fc2 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb8:	6802      	ldr	r2, [r0, #0]
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc0:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003fcc:	1c53      	adds	r3, r2, #1
 8003fce:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003fd0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8003fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003fe6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ff0:	6802      	ldr	r2, [r0, #0]
 8003ff2:	6853      	ldr	r3, [r2, #4]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004000:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d00d      	beq.n	8004026 <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	2300      	movs	r3, #0
 800400c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004010:	2312      	movs	r3, #18
 8004012:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004014:	f7ff fde5 	bl	8003be2 <HAL_I2C_MasterRxCpltCallback>
 8004018:	e7a4      	b.n	8003f64 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	6802      	ldr	r2, [r0, #0]
 800401c:	6813      	ldr	r3, [r2, #0]
 800401e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e7cd      	b.n	8003fc2 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	2300      	movs	r3, #0
 8004028:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800402c:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800402e:	f7ff ff6c 	bl	8003f0a <HAL_I2C_MemRxCpltCallback>
 8004032:	e797      	b.n	8003f64 <I2C_MasterReceive_BTF+0x58>

08004034 <I2C_DMAError>:
{
 8004034:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004036:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hi2c->hdmatx != NULL)
 8004038:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800403a:	b10b      	cbz	r3, 8004040 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8004040:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004042:	b10b      	cbz	r3, 8004048 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004044:	2200      	movs	r2, #0
 8004046:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	6802      	ldr	r2, [r0, #0]
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004050:	6013      	str	r3, [r2, #0]
  hi2c->XferCount       = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004056:	2220      	movs	r2, #32
 8004058:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800405c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004060:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004062:	f043 0310 	orr.w	r3, r3, #16
 8004066:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8004068:	f001 ff24 	bl	8005eb4 <HAL_I2C_ErrorCallback>
}
 800406c:	bd08      	pop	{r3, pc}

0800406e <I2C_DMAXferCplt>:
{
 800406e:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004070:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004072:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004078:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800407c:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800407e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	6842      	ldr	r2, [r0, #4]
 8004084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004088:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 800408a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800408c:	b10a      	cbz	r2, 8004092 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800408e:	2000      	movs	r0, #0
 8004090:	6290      	str	r0, [r2, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8004092:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004094:	b10a      	cbz	r2, 800409a <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004096:	2000      	movs	r0, #0
 8004098:	6290      	str	r0, [r2, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800409a:	f003 0221 	and.w	r2, r3, #33	; 0x21
 800409e:	2a21      	cmp	r2, #33	; 0x21
 80040a0:	d041      	beq.n	8004126 <I2C_DMAXferCplt+0xb8>
 80040a2:	f003 0222 	and.w	r2, r3, #34	; 0x22
 80040a6:	2a22      	cmp	r2, #34	; 0x22
 80040a8:	d03b      	beq.n	8004122 <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80040aa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d049      	beq.n	8004146 <I2C_DMAXferCplt+0xd8>
    if (hi2c->XferCount == (uint16_t)1)
 80040b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d058      	beq.n	800416c <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	6853      	ldr	r3, [r2, #4]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040c4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80040c8:	d006      	beq.n	80040d8 <I2C_DMAXferCplt+0x6a>
 80040ca:	2d08      	cmp	r5, #8
 80040cc:	d004      	beq.n	80040d8 <I2C_DMAXferCplt+0x6a>
 80040ce:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80040d2:	d001      	beq.n	80040d8 <I2C_DMAXferCplt+0x6a>
 80040d4:	2d20      	cmp	r5, #32
 80040d6:	d104      	bne.n	80040e2 <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	6853      	ldr	r3, [r2, #4]
 80040e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ea:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	6853      	ldr	r3, [r2, #4]
 80040f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f4:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d13b      	bne.n	8004178 <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004100:	2320      	movs	r3, #32
 8004102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004106:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d037      	beq.n	8004180 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	2300      	movs	r3, #0
 8004112:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004116:	2312      	movs	r3, #18
 8004118:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800411a:	4620      	mov	r0, r4
 800411c:	f7ff fd61 	bl	8003be2 <HAL_I2C_MasterRxCpltCallback>
}
 8004120:	e011      	b.n	8004146 <I2C_DMAXferCplt+0xd8>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004122:	2920      	cmp	r1, #32
 8004124:	d1c1      	bne.n	80040aa <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004126:	6821      	ldr	r1, [r4, #0]
 8004128:	684a      	ldr	r2, [r1, #4]
 800412a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412e:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 8004130:	2200      	movs	r2, #0
 8004132:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004134:	2b29      	cmp	r3, #41	; 0x29
 8004136:	d007      	beq.n	8004148 <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004138:	2b2a      	cmp	r3, #42	; 0x2a
 800413a:	d00e      	beq.n	800415a <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	6853      	ldr	r3, [r2, #4]
 8004140:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004144:	6053      	str	r3, [r2, #4]
}
 8004146:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004148:	2321      	movs	r3, #33	; 0x21
 800414a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800414c:	2328      	movs	r3, #40	; 0x28
 800414e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff fd46 	bl	8003be4 <HAL_I2C_SlaveTxCpltCallback>
 8004158:	e7f0      	b.n	800413c <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800415a:	2322      	movs	r3, #34	; 0x22
 800415c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800415e:	2328      	movs	r3, #40	; 0x28
 8004160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004164:	4620      	mov	r0, r4
 8004166:	f7ff fd64 	bl	8003c32 <HAL_I2C_SlaveRxCpltCallback>
 800416a:	e7e7      	b.n	800413c <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e7a0      	b.n	80040ba <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 8004178:	4620      	mov	r0, r4
 800417a:	f001 fe9b 	bl	8005eb4 <HAL_I2C_ErrorCallback>
 800417e:	e7e2      	b.n	8004146 <I2C_DMAXferCplt+0xd8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	2300      	movs	r3, #0
 8004182:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004186:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004188:	4620      	mov	r0, r4
 800418a:	f7ff febe 	bl	8003f0a <HAL_I2C_MemRxCpltCallback>
 800418e:	e7da      	b.n	8004146 <I2C_DMAXferCplt+0xd8>

08004190 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004190:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b22      	cmp	r3, #34	; 0x22
 8004198:	d000      	beq.n	800419c <I2C_MasterReceive_RXNE+0xc>
 800419a:	4770      	bx	lr
{
 800419c:	b510      	push	{r4, lr}
 800419e:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 80041a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d916      	bls.n	80041d6 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041ae:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041b2:	3301      	adds	r3, #1
 80041b4:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80041b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80041c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d000      	beq.n	80041ca <I2C_MasterReceive_RXNE+0x3a>
}
 80041c8:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ca:	6802      	ldr	r2, [r0, #0]
 80041cc:	6853      	ldr	r3, [r2, #4]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	6053      	str	r3, [r2, #4]
 80041d4:	e7f8      	b.n	80041c8 <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80041d8:	2a02      	cmp	r2, #2
 80041da:	d0f5      	beq.n	80041c8 <I2C_MasterReceive_RXNE+0x38>
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d8f3      	bhi.n	80041c8 <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041e0:	f7ff f824 	bl	800322c <I2C_WaitOnSTOPRequestThroughIT>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d12e      	bne.n	8004246 <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f0:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	6853      	ldr	r3, [r2, #4]
 80041f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041fa:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004202:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004206:	3301      	adds	r3, #1
 8004208:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800420a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004214:	2320      	movs	r3, #32
 8004216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800421a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d008      	beq.n	8004236 <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	2300      	movs	r3, #0
 8004226:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800422a:	2312      	movs	r3, #18
 800422c:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff fcd7 	bl	8003be2 <HAL_I2C_MasterRxCpltCallback>
 8004234:	e7c8      	b.n	80041c8 <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	2300      	movs	r3, #0
 8004238:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800423c:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800423e:	4620      	mov	r0, r4
 8004240:	f7ff fe63 	bl	8003f0a <HAL_I2C_MemRxCpltCallback>
 8004244:	e7c0      	b.n	80041c8 <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	6853      	ldr	r3, [r2, #4]
 800424a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800424e:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004256:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800425a:	3301      	adds	r3, #1
 800425c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800425e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004268:	2320      	movs	r3, #32
 800426a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	2300      	movs	r3, #0
 8004270:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004274:	4620      	mov	r0, r4
 8004276:	f001 fe1d 	bl	8005eb4 <HAL_I2C_ErrorCallback>
}
 800427a:	e7a5      	b.n	80041c8 <I2C_MasterReceive_RXNE+0x38>

0800427c <HAL_I2C_AbortCpltCallback>:
}
 800427c:	4770      	bx	lr
	...

08004280 <I2C_DMAAbort>:
{
 8004280:	b500      	push	{lr}
 8004282:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004288:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800428e:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <I2C_DMAAbort+0xdc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	4932      	ldr	r1, [pc, #200]	; (8004360 <I2C_DMAAbort+0xe0>)
 8004298:	fba1 1303 	umull	r1, r3, r1, r3
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80042a6:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	b143      	cbz	r3, 80042be <I2C_DMAAbort+0x3e>
    count--;
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042b2:	6803      	ldr	r3, [r0, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80042ba:	d1f5      	bne.n	80042a8 <I2C_DMAAbort+0x28>
 80042bc:	e003      	b.n	80042c6 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042c0:	f043 0320 	orr.w	r3, r3, #32
 80042c4:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 80042c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042c8:	b10b      	cbz	r3, 80042ce <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042ca:	2100      	movs	r1, #0
 80042cc:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80042ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042d0:	b10b      	cbz	r3, 80042d6 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042d2:	2100      	movs	r1, #0
 80042d4:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	6801      	ldr	r1, [r0, #0]
 80042d8:	680b      	ldr	r3, [r1, #0]
 80042da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042de:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80042e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042e6:	b10b      	cbz	r3, 80042ec <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042e8:	2100      	movs	r1, #0
 80042ea:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80042ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042ee:	b10b      	cbz	r3, 80042f4 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042f0:	2100      	movs	r1, #0
 80042f2:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	6801      	ldr	r1, [r0, #0]
 80042f6:	680b      	ldr	r3, [r1, #0]
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d00e      	beq.n	8004326 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004308:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800430c:	2a28      	cmp	r2, #40	; 0x28
 800430e:	d014      	beq.n	800433a <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8004310:	2320      	movs	r3, #32
 8004312:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004316:	2300      	movs	r3, #0
 8004318:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800431c:	f001 fdca 	bl	8005eb4 <HAL_I2C_ErrorCallback>
}
 8004320:	b003      	add	sp, #12
 8004322:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004326:	2320      	movs	r3, #32
 8004328:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800432c:	2300      	movs	r3, #0
 800432e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004332:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004334:	f7ff ffa2 	bl	800427c <HAL_I2C_AbortCpltCallback>
 8004338:	e7f2      	b.n	8004320 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 800433a:	6802      	ldr	r2, [r0, #0]
 800433c:	6813      	ldr	r3, [r2, #0]
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004344:	6802      	ldr	r2, [r0, #0]
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800434e:	2300      	movs	r3, #0
 8004350:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004352:	2328      	movs	r3, #40	; 0x28
 8004354:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8004358:	e7e0      	b.n	800431c <I2C_DMAAbort+0x9c>
 800435a:	bf00      	nop
 800435c:	20000078 	.word	0x20000078
 8004360:	14f8b589 	.word	0x14f8b589

08004364 <I2C_ITError>:
{
 8004364:	b510      	push	{r4, lr}
 8004366:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004368:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800436e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004372:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004374:	2a10      	cmp	r2, #16
 8004376:	d035      	beq.n	80043e4 <I2C_ITError+0x80>
 8004378:	2a40      	cmp	r2, #64	; 0x40
 800437a:	d033      	beq.n	80043e4 <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800437c:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8004380:	2a28      	cmp	r2, #40	; 0x28
 8004382:	d037      	beq.n	80043f4 <I2C_ITError+0x90>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6852      	ldr	r2, [r2, #4]
 8004388:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800438c:	d107      	bne.n	800439e <I2C_ITError+0x3a>
 800438e:	2b60      	cmp	r3, #96	; 0x60
 8004390:	d005      	beq.n	800439e <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004392:	2320      	movs	r3, #32
 8004394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	2300      	movs	r3, #0
 800439a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80043aa:	d047      	beq.n	800443c <I2C_ITError+0xd8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b2:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043b6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80043ba:	2a01      	cmp	r2, #1
 80043bc:	d020      	beq.n	8004400 <I2C_ITError+0x9c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043be:	4a44      	ldr	r2, [pc, #272]	; (80044d0 <I2C_ITError+0x16c>)
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80043c4:	f7fe fb8c 	bl	8002ae0 <HAL_DMA_Abort_IT>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d049      	beq.n	8004460 <I2C_ITError+0xfc>
        __HAL_I2C_DISABLE(hi2c);
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	2320      	movs	r3, #32
 80043d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80043de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043e0:	4798      	blx	r3
 80043e2:	e03d      	b.n	8004460 <I2C_ITError+0xfc>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043e4:	2b22      	cmp	r3, #34	; 0x22
 80043e6:	d1c9      	bne.n	800437c <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043e8:	6821      	ldr	r1, [r4, #0]
 80043ea:	680a      	ldr	r2, [r1, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	600a      	str	r2, [r1, #0]
 80043f2:	e7c3      	b.n	800437c <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f8:	2328      	movs	r3, #40	; 0x28
 80043fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80043fe:	e7d0      	b.n	80043a2 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004402:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <I2C_ITError+0x16c>)
 8004404:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004406:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004408:	f7fe fb6a 	bl	8002ae0 <HAL_DMA_Abort_IT>
 800440c:	b340      	cbz	r0, 8004460 <I2C_ITError+0xfc>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004416:	d005      	beq.n	8004424 <I2C_ITError+0xc0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800441c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800441e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004420:	3301      	adds	r3, #1
 8004422:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800442e:	2320      	movs	r3, #32
 8004430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004434:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004436:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004438:	4798      	blx	r3
 800443a:	e011      	b.n	8004460 <I2C_ITError+0xfc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800443c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	2a60      	cmp	r2, #96	; 0x60
 8004444:	d01f      	beq.n	8004486 <I2C_ITError+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f012 0f40 	tst.w	r2, #64	; 0x40
 800444c:	d005      	beq.n	800445a <I2C_ITError+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004452:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004456:	3301      	adds	r3, #1
 8004458:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800445a:	4620      	mov	r0, r4
 800445c:	f001 fd2a 	bl	8005eb4 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8004460:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004462:	f013 0f0f 	tst.w	r3, #15
 8004466:	d004      	beq.n	8004472 <I2C_ITError+0x10e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	6853      	ldr	r3, [r2, #4]
 800446c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004470:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004472:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004476:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004478:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800447a:	f012 0f04 	tst.w	r2, #4
 800447e:	d001      	beq.n	8004484 <I2C_ITError+0x120>
 8004480:	2b28      	cmp	r3, #40	; 0x28
 8004482:	d018      	beq.n	80044b6 <I2C_ITError+0x152>
}
 8004484:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	2220      	movs	r2, #32
 8004488:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	2200      	movs	r2, #0
 800448e:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004496:	d005      	beq.n	80044a4 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800449c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800449e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a0:	3301      	adds	r3, #1
 80044a2:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7ff fee4 	bl	800427c <HAL_I2C_AbortCpltCallback>
 80044b4:	e7d4      	b.n	8004460 <I2C_ITError+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <I2C_ITError+0x170>)
 80044b8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044be:	2220      	movs	r2, #32
 80044c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7ff fc07 	bl	8003cdc <HAL_I2C_ListenCpltCallback>
}
 80044ce:	e7d9      	b.n	8004484 <I2C_ITError+0x120>
 80044d0:	08004281 	.word	0x08004281
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <I2C_Slave_STOPF>:
{
 80044d8:	b530      	push	{r4, r5, lr}
 80044da:	b083      	sub	sp, #12
 80044dc:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044de:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80044e2:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e4:	6802      	ldr	r2, [r0, #0]
 80044e6:	6853      	ldr	r3, [r2, #4]
 80044e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044ec:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	6803      	ldr	r3, [r0, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	9201      	str	r2, [sp, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	6802      	ldr	r2, [r0, #0]
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450a:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800450c:	6803      	ldr	r3, [r0, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004514:	d038      	beq.n	8004588 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004516:	2d22      	cmp	r5, #34	; 0x22
 8004518:	d021      	beq.n	800455e <I2C_Slave_STOPF+0x86>
 800451a:	2d2a      	cmp	r5, #42	; 0x2a
 800451c:	d01f      	beq.n	800455e <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800451e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	b292      	uxth	r2, r2
 8004526:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004528:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800452a:	b292      	uxth	r2, r2
 800452c:	b11a      	cbz	r2, 8004536 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800452e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004530:	f042 0204 	orr.w	r2, r2, #4
 8004534:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800453e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004540:	f7fe fbbc 	bl	8002cbc <HAL_DMA_GetState>
 8004544:	2801      	cmp	r0, #1
 8004546:	d01f      	beq.n	8004588 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800454a:	4a44      	ldr	r2, [pc, #272]	; (800465c <I2C_Slave_STOPF+0x184>)
 800454c:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800454e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004550:	f7fe fac6 	bl	8002ae0 <HAL_DMA_Abort_IT>
 8004554:	b1c0      	cbz	r0, 8004588 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004556:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800455a:	4798      	blx	r3
 800455c:	e014      	b.n	8004588 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800455e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	b292      	uxth	r2, r2
 8004566:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004568:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800456a:	b292      	uxth	r2, r2
 800456c:	b11a      	cbz	r2, 8004576 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800456e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004570:	f042 0204 	orr.w	r2, r2, #4
 8004574:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800457e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004580:	f7fe fb9c 	bl	8002cbc <HAL_DMA_GetState>
 8004584:	2801      	cmp	r0, #1
 8004586:	d142      	bne.n	800460e <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8004588:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	b333      	cbz	r3, 80045dc <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	f012 0f04 	tst.w	r2, #4
 8004596:	d00a      	beq.n	80045ae <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800459c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800459e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80045b6:	d00a      	beq.n	80045ce <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80045be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c0:	3301      	adds	r3, #1
 80045c2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80045ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b11b      	cbz	r3, 80045dc <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045de:	bb13      	cbnz	r3, 8004626 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045e0:	2d2a      	cmp	r5, #42	; 0x2a
 80045e2:	d025      	beq.n	8004630 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d029      	beq.n	8004642 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045f0:	2b22      	cmp	r3, #34	; 0x22
 80045f2:	d001      	beq.n	80045f8 <I2C_Slave_STOPF+0x120>
 80045f4:	2d22      	cmp	r5, #34	; 0x22
 80045f6:	d119      	bne.n	800462c <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	2220      	movs	r2, #32
 80045fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff fb13 	bl	8003c32 <HAL_I2C_SlaveRxCpltCallback>
}
 800460c:	e00e      	b.n	800462c <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800460e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004610:	4a12      	ldr	r2, [pc, #72]	; (800465c <I2C_Slave_STOPF+0x184>)
 8004612:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004614:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004616:	f7fe fa63 	bl	8002ae0 <HAL_DMA_Abort_IT>
 800461a:	2800      	cmp	r0, #0
 800461c:	d0b4      	beq.n	8004588 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800461e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004620:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004622:	4798      	blx	r3
 8004624:	e7b0      	b.n	8004588 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8004626:	4620      	mov	r0, r4
 8004628:	f7ff fe9c 	bl	8004364 <I2C_ITError>
}
 800462c:	b003      	add	sp, #12
 800462e:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	2300      	movs	r3, #0
 8004632:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004634:	2328      	movs	r3, #40	; 0x28
 8004636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff faf9 	bl	8003c32 <HAL_I2C_SlaveRxCpltCallback>
 8004640:	e7d0      	b.n	80045e4 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <I2C_Slave_STOPF+0x188>)
 8004644:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004646:	2300      	movs	r3, #0
 8004648:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800464a:	2220      	movs	r2, #32
 800464c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff fb41 	bl	8003cdc <HAL_I2C_ListenCpltCallback>
 800465a:	e7e7      	b.n	800462c <I2C_Slave_STOPF+0x154>
 800465c:	08004281 	.word	0x08004281
 8004660:	ffff0000 	.word	0xffff0000

08004664 <HAL_I2C_EV_IRQHandler>:
{
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004668:	6802      	ldr	r2, [r0, #0]
 800466a:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800466c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800466e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004672:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004674:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8004678:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800467a:	2b10      	cmp	r3, #16
 800467c:	d013      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x42>
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d011      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d07a      	beq.n	800477e <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004688:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 800468a:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800468c:	f013 0f02 	tst.w	r3, #2
 8004690:	d078      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x120>
 8004692:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004696:	d075      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800469a:	b103      	cbz	r3, 800469e <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800469c:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff faef 	bl	8003c82 <I2C_Slave_ADDR>
}
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046a6:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046aa:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046ac:	f011 0701 	ands.w	r7, r1, #1
 80046b0:	d105      	bne.n	80046be <HAL_I2C_EV_IRQHandler+0x5a>
 80046b2:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80046b6:	d0f5      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
 80046b8:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80046bc:	d0f2      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046be:	b117      	cbz	r7, 80046c6 <HAL_I2C_EV_IRQHandler+0x62>
 80046c0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80046c4:	d129      	bne.n	800471a <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c6:	f011 0f08 	tst.w	r1, #8
 80046ca:	d002      	beq.n	80046d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80046cc:	f415 7f00 	tst.w	r5, #512	; 0x200
 80046d0:	d12a      	bne.n	8004728 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d2:	f011 0f02 	tst.w	r1, #2
 80046d6:	d002      	beq.n	80046de <HAL_I2C_EV_IRQHandler+0x7a>
 80046d8:	f415 7f00 	tst.w	r5, #512	; 0x200
 80046dc:	d128      	bne.n	8004730 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80046de:	f01c 0f04 	tst.w	ip, #4
 80046e2:	d031      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80046ea:	d1db      	bne.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046f0:	d005      	beq.n	80046fe <HAL_I2C_EV_IRQHandler+0x9a>
 80046f2:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80046f6:	d002      	beq.n	80046fe <HAL_I2C_EV_IRQHandler+0x9a>
 80046f8:	f011 0f04 	tst.w	r1, #4
 80046fc:	d01c      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fe:	f011 0f04 	tst.w	r1, #4
 8004702:	d0cf      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
 8004704:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004708:	d0cc      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800470a:	2821      	cmp	r0, #33	; 0x21
 800470c:	d018      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d1c8      	bne.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fb32 	bl	8003d7c <I2C_MemoryTransmit_TXE_BTF>
 8004718:	e7c4      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 800471a:	4620      	mov	r0, r4
 800471c:	f7fe fdc3 	bl	80032a6 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8004720:	4620      	mov	r0, r4
 8004722:	f7fe fbee 	bl	8002f02 <I2C_Master_SB>
 8004726:	e7bd      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8004728:	4620      	mov	r0, r4
 800472a:	f7fe fc3e 	bl	8002faa <I2C_Master_ADD10>
 800472e:	e7b9      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8004730:	4620      	mov	r0, r4
 8004732:	f7fe fc4f 	bl	8002fd4 <I2C_Master_ADDR>
 8004736:	e7b5      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8004738:	4620      	mov	r0, r4
 800473a:	f7ff fb7e 	bl	8003e3a <I2C_MasterTransmit_TXE>
 800473e:	e7b1      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff facc 	bl	8003cde <I2C_MasterTransmit_BTF>
 8004746:	e7ad      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004748:	6853      	ldr	r3, [r2, #4]
 800474a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800474e:	d1a9      	bne.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004750:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004754:	d005      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xfe>
 8004756:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800475a:	d002      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xfe>
 800475c:	f011 0f04 	tst.w	r1, #4
 8004760:	d009      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004762:	f011 0f04 	tst.w	r1, #4
 8004766:	d09d      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
 8004768:	f415 7f00 	tst.w	r5, #512	; 0x200
 800476c:	d09a      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff fbcc 	bl	8003f0c <I2C_MasterReceive_BTF>
 8004774:	e796      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff fd0a 	bl	8004190 <I2C_MasterReceive_RXNE>
 800477c:	e792      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800477e:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004780:	6953      	ldr	r3, [r2, #20]
 8004782:	e783      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004784:	f013 0f10 	tst.w	r3, #16
 8004788:	d002      	beq.n	8004790 <HAL_I2C_EV_IRQHandler+0x12c>
 800478a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800478e:	d118      	bne.n	80047c2 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004790:	2821      	cmp	r0, #33	; 0x21
 8004792:	d01a      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x166>
 8004794:	2829      	cmp	r0, #41	; 0x29
 8004796:	d018      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004798:	f013 0f40 	tst.w	r3, #64	; 0x40
 800479c:	d005      	beq.n	80047aa <HAL_I2C_EV_IRQHandler+0x146>
 800479e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80047a2:	d002      	beq.n	80047aa <HAL_I2C_EV_IRQHandler+0x146>
 80047a4:	f013 0f04 	tst.w	r3, #4
 80047a8:	d028      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047aa:	f013 0f04 	tst.w	r3, #4
 80047ae:	f43f af79 	beq.w	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
 80047b2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80047b6:	f43f af75 	beq.w	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7fe fd25 	bl	800320a <I2C_SlaveReceive_BTF>
      }
 80047c0:	e770      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7ff fe88 	bl	80044d8 <I2C_Slave_STOPF>
 80047c8:	e76c      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80047ce:	d005      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x178>
 80047d0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80047d4:	d002      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x178>
 80047d6:	f013 0f04 	tst.w	r3, #4
 80047da:	d00b      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047dc:	f013 0f04 	tst.w	r3, #4
 80047e0:	f43f af60 	beq.w	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
 80047e4:	f415 7f00 	tst.w	r5, #512	; 0x200
 80047e8:	f43f af5c 	beq.w	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7fe fcfc 	bl	80031ea <I2C_SlaveTransmit_BTF>
 80047f2:	e757      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7ff f9f6 	bl	8003be6 <I2C_SlaveTransmit_TXE>
 80047fa:	e753      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff fa19 	bl	8003c34 <I2C_SlaveReceive_RXNE>
 8004802:	e74f      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x40>

08004804 <HAL_I2C_GetState>:
  return hi2c->State;
 8004804:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004808:	4770      	bx	lr
	...

0800480c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800480c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <RCC_Delay+0x24>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <RCC_Delay+0x28>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0a5b      	lsrs	r3, r3, #9
 800481a:	fb00 f303 	mul.w	r3, r0, r3
 800481e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004820:	bf00      	nop
  }
  while (Delay --);
 8004822:	9b01      	ldr	r3, [sp, #4]
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	9201      	str	r2, [sp, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f9      	bne.n	8004820 <RCC_Delay+0x14>
}
 800482c:	b002      	add	sp, #8
 800482e:	4770      	bx	lr
 8004830:	20000078 	.word	0x20000078
 8004834:	10624dd3 	.word	0x10624dd3

08004838 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004838:	2800      	cmp	r0, #0
 800483a:	f000 81f1 	beq.w	8004c20 <HAL_RCC_OscConfig+0x3e8>
{
 800483e:	b570      	push	{r4, r5, r6, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	f013 0f01 	tst.w	r3, #1
 800484a:	d02c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800484c:	4baa      	ldr	r3, [pc, #680]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b04      	cmp	r3, #4
 8004856:	d01d      	beq.n	8004894 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004858:	4ba7      	ldr	r3, [pc, #668]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d012      	beq.n	800488a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d041      	beq.n	80048f0 <HAL_RCC_OscConfig+0xb8>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d155      	bne.n	800491c <HAL_RCC_OscConfig+0xe4>
 8004870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004874:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e037      	b.n	80048fa <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800488a:	4b9b      	ldr	r3, [pc, #620]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004892:	d0e7      	beq.n	8004864 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	4b98      	ldr	r3, [pc, #608]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800489c:	d003      	beq.n	80048a6 <HAL_RCC_OscConfig+0x6e>
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 81bf 	beq.w	8004c24 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	f013 0f02 	tst.w	r3, #2
 80048ac:	d075      	beq.n	800499a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ae:	4b92      	ldr	r3, [pc, #584]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f013 0f0c 	tst.w	r3, #12
 80048b6:	d05f      	beq.n	8004978 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048b8:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d054      	beq.n	800496e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8089 	beq.w	80049de <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 80048cc:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <HAL_RCC_OscConfig+0x2c4>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80048d2:	f7fd fc8d 	bl	80021f0 <HAL_GetTick>
 80048d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d8:	4b87      	ldr	r3, [pc, #540]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f013 0f02 	tst.w	r3, #2
 80048e0:	d174      	bne.n	80049cc <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fd fc85 	bl	80021f0 <HAL_GetTick>
 80048e6:	1b40      	subs	r0, r0, r5
 80048e8:	2802      	cmp	r0, #2
 80048ea:	d9f5      	bls.n	80048d8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80048ec:	2003      	movs	r0, #3
 80048ee:	e19e      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	4a81      	ldr	r2, [pc, #516]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	b343      	cbz	r3, 8004950 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80048fe:	f7fd fc77 	bl	80021f0 <HAL_GetTick>
 8004902:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004904:	4b7c      	ldr	r3, [pc, #496]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800490c:	d1cb      	bne.n	80048a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490e:	f7fd fc6f 	bl	80021f0 <HAL_GetTick>
 8004912:	1b40      	subs	r0, r0, r5
 8004914:	2864      	cmp	r0, #100	; 0x64
 8004916:	d9f5      	bls.n	8004904 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004918:	2003      	movs	r0, #3
 800491a:	e188      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004920:	d009      	beq.n	8004936 <HAL_RCC_OscConfig+0xfe>
 8004922:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e7e1      	b.n	80048fa <HAL_RCC_OscConfig+0xc2>
 8004936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800493a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e7d4      	b.n	80048fa <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004950:	f7fd fc4e 	bl	80021f0 <HAL_GetTick>
 8004954:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800495e:	d0a2      	beq.n	80048a6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd fc46 	bl	80021f0 <HAL_GetTick>
 8004964:	1b40      	subs	r0, r0, r5
 8004966:	2864      	cmp	r0, #100	; 0x64
 8004968:	d9f5      	bls.n	8004956 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
 800496c:	e15f      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004976:	d1a5      	bne.n	80048c4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004978:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f013 0f02 	tst.w	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_OscConfig+0x152>
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 814f 	bne.w	8004c28 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4a5b      	ldr	r2, [pc, #364]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004992:	6961      	ldr	r1, [r4, #20]
 8004994:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004998:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f013 0f08 	tst.w	r3, #8
 80049a0:	d032      	beq.n	8004a08 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a2:	69a3      	ldr	r3, [r4, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d045      	beq.n	8004a34 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80049a8:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <HAL_RCC_OscConfig+0x2c8>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80049ae:	f7fd fc1f 	bl	80021f0 <HAL_GetTick>
 80049b2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f013 0f02 	tst.w	r3, #2
 80049bc:	d121      	bne.n	8004a02 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049be:	f7fd fc17 	bl	80021f0 <HAL_GetTick>
 80049c2:	1b40      	subs	r0, r0, r5
 80049c4:	2802      	cmp	r0, #2
 80049c6:	d9f5      	bls.n	80049b4 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
 80049ca:	e130      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4a4a      	ldr	r2, [pc, #296]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049d4:	6961      	ldr	r1, [r4, #20]
 80049d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e7dd      	b.n	800499a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_OscConfig+0x2c4>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80049e4:	f7fd fc04 	bl	80021f0 <HAL_GetTick>
 80049e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f013 0f02 	tst.w	r3, #2
 80049f2:	d0d2      	beq.n	800499a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd fbfc 	bl	80021f0 <HAL_GetTick>
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	2802      	cmp	r0, #2
 80049fc:	d9f5      	bls.n	80049ea <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80049fe:	2003      	movs	r0, #3
 8004a00:	e115      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f7ff ff02 	bl	800480c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f013 0f04 	tst.w	r3, #4
 8004a0e:	f000 8097 	beq.w	8004b40 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b39      	ldr	r3, [pc, #228]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004a1a:	d11d      	bne.n	8004a58 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a30:	2501      	movs	r5, #1
 8004a32:	e012      	b.n	8004a5a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8004a34:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <HAL_RCC_OscConfig+0x2c8>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004a3a:	f7fd fbd9 	bl	80021f0 <HAL_GetTick>
 8004a3e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a40:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f013 0f02 	tst.w	r3, #2
 8004a48:	d0de      	beq.n	8004a08 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fd fbd1 	bl	80021f0 <HAL_GetTick>
 8004a4e:	1b40      	subs	r0, r0, r5
 8004a50:	2802      	cmp	r0, #2
 8004a52:	d9f5      	bls.n	8004a40 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8004a54:	2003      	movs	r0, #3
 8004a56:	e0ea      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8004a58:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	; (8004b04 <HAL_RCC_OscConfig+0x2cc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a62:	d011      	beq.n	8004a88 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	68e3      	ldr	r3, [r4, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d022      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x278>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d138      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2a8>
 8004a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	621a      	str	r2, [r3, #32]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	f022 0204 	bic.w	r2, r2, #4
 8004a84:	621a      	str	r2, [r3, #32]
 8004a86:	e018      	b.n	8004aba <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a88:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_RCC_OscConfig+0x2cc>)
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a92:	f7fd fbad 	bl	80021f0 <HAL_GetTick>
 8004a96:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCC_OscConfig+0x2cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004aa0:	d1e0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa2:	f7fd fba5 	bl	80021f0 <HAL_GetTick>
 8004aa6:	1b80      	subs	r0, r0, r6
 8004aa8:	2864      	cmp	r0, #100	; 0x64
 8004aaa:	d9f5      	bls.n	8004a98 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
 8004aae:	e0be      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004ab2:	6a13      	ldr	r3, [r2, #32]
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	b373      	cbz	r3, 8004b1c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8004abe:	f7fd fb97 	bl	80021f0 <HAL_GetTick>
 8004ac2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f013 0f02 	tst.w	r3, #2
 8004acc:	d137      	bne.n	8004b3e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd fb8f 	bl	80021f0 <HAL_GetTick>
 8004ad2:	1b80      	subs	r0, r0, r6
 8004ad4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ad8:	4298      	cmp	r0, r3
 8004ada:	d9f3      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8004adc:	2003      	movs	r0, #3
 8004ade:	e0a6      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d011      	beq.n	8004b08 <HAL_RCC_OscConfig+0x2d0>
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <HAL_RCC_OscConfig+0x2c0>)
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	621a      	str	r2, [r3, #32]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	f022 0204 	bic.w	r2, r2, #4
 8004af4:	621a      	str	r2, [r3, #32]
 8004af6:	e7e0      	b.n	8004aba <HAL_RCC_OscConfig+0x282>
 8004af8:	40021000 	.word	0x40021000
 8004afc:	42420000 	.word	0x42420000
 8004b00:	42420480 	.word	0x42420480
 8004b04:	40007000 	.word	0x40007000
 8004b08:	4b4d      	ldr	r3, [pc, #308]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	f042 0204 	orr.w	r2, r2, #4
 8004b10:	621a      	str	r2, [r3, #32]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	621a      	str	r2, [r3, #32]
 8004b1a:	e7ce      	b.n	8004aba <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fb68 	bl	80021f0 <HAL_GetTick>
 8004b20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f013 0f02 	tst.w	r3, #2
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2c:	f7fd fb60 	bl	80021f0 <HAL_GetTick>
 8004b30:	1b80      	subs	r0, r0, r6
 8004b32:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b36:	4298      	cmp	r0, r3
 8004b38:	d9f3      	bls.n	8004b22 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004b3a:	2003      	movs	r0, #3
 8004b3c:	e077      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8004b3e:	b9e5      	cbnz	r5, 8004b7a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b40:	69e3      	ldr	r3, [r4, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d072      	beq.n	8004c2c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b46:	4a3e      	ldr	r2, [pc, #248]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b48:	6852      	ldr	r2, [r2, #4]
 8004b4a:	f002 020c 	and.w	r2, r2, #12
 8004b4e:	2a08      	cmp	r2, #8
 8004b50:	d056      	beq.n	8004c00 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d017      	beq.n	8004b86 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8004b56:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCC_OscConfig+0x40c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b5c:	f7fd fb48 	bl	80021f0 <HAL_GetTick>
 8004b60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b62:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b6a:	d047      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fb40 	bl	80021f0 <HAL_GetTick>
 8004b70:	1b00      	subs	r0, r0, r4
 8004b72:	2802      	cmp	r0, #2
 8004b74:	d9f5      	bls.n	8004b62 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
 8004b78:	e059      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7a:	4a31      	ldr	r2, [pc, #196]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b7c:	69d3      	ldr	r3, [r2, #28]
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	61d3      	str	r3, [r2, #28]
 8004b84:	e7dc      	b.n	8004b40 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <HAL_RCC_OscConfig+0x40c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fb30 	bl	80021f0 <HAL_GetTick>
 8004b90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b92:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b9a:	d006      	beq.n	8004baa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd fb28 	bl	80021f0 <HAL_GetTick>
 8004ba0:	1b40      	subs	r0, r0, r5
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	d9f5      	bls.n	8004b92 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	e041      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004baa:	6a23      	ldr	r3, [r4, #32]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d01a      	beq.n	8004be8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb2:	4923      	ldr	r1, [pc, #140]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004bb4:	684b      	ldr	r3, [r1, #4]
 8004bb6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8004bba:	6a22      	ldr	r2, [r4, #32]
 8004bbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bbe:	4302      	orrs	r2, r0
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <HAL_RCC_OscConfig+0x40c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004bca:	f7fd fb11 	bl	80021f0 <HAL_GetTick>
 8004bce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fd fb09 	bl	80021f0 <HAL_GetTick>
 8004bde:	1b00      	subs	r0, r0, r4
 8004be0:	2802      	cmp	r0, #2
 8004be2:	d9f5      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8004be4:	2003      	movs	r0, #3
 8004be6:	e022      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004bea:	6853      	ldr	r3, [r2, #4]
 8004bec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bf0:	68a1      	ldr	r1, [r4, #8]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	6053      	str	r3, [r2, #4]
 8004bf6:	e7dc      	b.n	8004bb2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e018      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e016      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d016      	beq.n	8004c32 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCC_OscConfig+0x408>)
 8004c06:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004c0c:	6a22      	ldr	r2, [r4, #32]
 8004c0e:	4291      	cmp	r1, r2
 8004c10:	d111      	bne.n	8004c36 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c12:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10e      	bne.n	8004c3a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e006      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004c20:	2001      	movs	r0, #1
}
 8004c22:	4770      	bx	lr
        return HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004c2c:	2000      	movs	r0, #0
}
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004c32:	2001      	movs	r0, #1
 8004c34:	e7fb      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8004c36:	2001      	movs	r0, #1
 8004c38:	e7f9      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	e7f7      	b.n	8004c2e <HAL_RCC_OscConfig+0x3f6>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	42420060 	.word	0x42420060

08004c48 <HAL_RCC_GetSysClockFreq>:
{
 8004c48:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_RCC_GetSysClockFreq+0x64>)
 8004c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c4e:	f10d 0c18 	add.w	ip, sp, #24
 8004c52:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c56:	f240 2301 	movw	r3, #513	; 0x201
 8004c5a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x68>)
 8004c60:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c62:	f002 030c 	and.w	r3, r2, #12
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d01a      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x58>
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d11a      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x5c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c6e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004c72:	4463      	add	r3, ip
 8004c74:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c78:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004c7c:	d00c      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x50>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x68>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004c86:	4463      	add	r3, ip
 8004c88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c8c:	4809      	ldr	r0, [pc, #36]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004c8e:	fb00 f001 	mul.w	r0, r0, r1
 8004c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c96:	e006      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x5e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c98:	4807      	ldr	r0, [pc, #28]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x70>)
 8004c9a:	fb00 f001 	mul.w	r0, r0, r1
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x5e>
  switch (tmpreg & RCC_CFGR_SWS)
 8004ca0:	4804      	ldr	r0, [pc, #16]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x5e>
      sysclockfreq = HSI_VALUE;
 8004ca4:	4805      	ldr	r0, [pc, #20]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x74>)
}
 8004ca6:	b006      	add	sp, #24
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	080080e0 	.word	0x080080e0
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	003d0900 	.word	0x003d0900
 8004cbc:	007a1200 	.word	0x007a1200

08004cc0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f000 80a0 	beq.w	8004e06 <HAL_RCC_ClockConfig+0x146>
{
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	460d      	mov	r5, r1
 8004cca:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCC_ClockConfig+0x158>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d20b      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd8:	4a4f      	ldr	r2, [pc, #316]	; (8004e18 <HAL_RCC_ClockConfig+0x158>)
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	f023 0307 	bic.w	r3, r3, #7
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce4:	6813      	ldr	r3, [r2, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	428b      	cmp	r3, r1
 8004cec:	f040 808d 	bne.w	8004e0a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f013 0f02 	tst.w	r3, #2
 8004cf6:	d017      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	f013 0f04 	tst.w	r3, #4
 8004cfc:	d004      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d00:	6853      	ldr	r3, [r2, #4]
 8004d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d06:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	f013 0f08 	tst.w	r3, #8
 8004d0e:	d004      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d10:	4a42      	ldr	r2, [pc, #264]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d12:	6853      	ldr	r3, [r2, #4]
 8004d14:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d18:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d1a:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d1c:	6853      	ldr	r3, [r2, #4]
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d22:	68a1      	ldr	r1, [r4, #8]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f013 0f01 	tst.w	r3, #1
 8004d2e:	d031      	beq.n	8004d94 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d020      	beq.n	8004d78 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d025      	beq.n	8004d86 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	4a38      	ldr	r2, [pc, #224]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	f012 0f02 	tst.w	r2, #2
 8004d42:	d064      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d44:	4935      	ldr	r1, [pc, #212]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d46:	684a      	ldr	r2, [r1, #4]
 8004d48:	f022 0203 	bic.w	r2, r2, #3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004d50:	f7fd fa4e 	bl	80021f0 <HAL_GetTick>
 8004d54:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	6862      	ldr	r2, [r4, #4]
 8004d60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d66:	f7fd fa43 	bl	80021f0 <HAL_GetTick>
 8004d6a:	1b80      	subs	r0, r0, r6
 8004d6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d70:	4298      	cmp	r0, r3
 8004d72:	d9f0      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004d74:	2003      	movs	r0, #3
 8004d76:	e045      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d78:	4a28      	ldr	r2, [pc, #160]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d80:	d1e0      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004d82:	2001      	movs	r0, #1
 8004d84:	e03e      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d8e:	d1d9      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
 8004d92:	e037      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d94:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_ClockConfig+0x158>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	d90a      	bls.n	8004db6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_RCC_ClockConfig+0x158>)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	432b      	orrs	r3, r5
 8004daa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	42ab      	cmp	r3, r5
 8004db4:	d12d      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f013 0f04 	tst.w	r3, #4
 8004dbc:	d006      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004dc0:	6853      	ldr	r3, [r2, #4]
 8004dc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dc6:	68e1      	ldr	r1, [r4, #12]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f013 0f08 	tst.w	r3, #8
 8004dd2:	d007      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004dd6:	6853      	ldr	r3, [r2, #4]
 8004dd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004ddc:	6921      	ldr	r1, [r4, #16]
 8004dde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004de2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004de4:	f7ff ff30 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_RCC_ClockConfig+0x15c>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004df0:	4a0b      	ldr	r2, [pc, #44]	; (8004e20 <HAL_RCC_ClockConfig+0x160>)
 8004df2:	5cd3      	ldrb	r3, [r2, r3]
 8004df4:	40d8      	lsrs	r0, r3
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x164>)
 8004df8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_ClockConfig+0x168>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f7fd f9b3 	bl	8002168 <HAL_InitTick>
  return HAL_OK;
 8004e02:	2000      	movs	r0, #0
}
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e06:	2001      	movs	r0, #1
}
 8004e08:	4770      	bx	lr
    return HAL_ERROR;
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	e7fa      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7f8      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004e12:	2001      	movs	r0, #1
 8004e14:	e7f6      	b.n	8004e04 <HAL_RCC_ClockConfig+0x144>
 8004e16:	bf00      	nop
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	080081ec 	.word	0x080081ec
 8004e24:	20000078 	.word	0x20000078
 8004e28:	2000006c 	.word	0x2000006c

08004e2c <HAL_RCC_GetHCLKFreq>:
}
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000078 	.word	0x20000078

08004e38 <HAL_RCC_GetPCLK1Freq>:
{
 8004e38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e3a:	f7ff fff7 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004e46:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e48:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e4a:	40d8      	lsrs	r0, r3
 8004e4c:	bd08      	pop	{r3, pc}
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	080081fc 	.word	0x080081fc

08004e58 <HAL_RCC_GetPCLK2Freq>:
{
 8004e58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e5a:	f7ff ffe7 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004e66:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e68:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e6a:	40d8      	lsrs	r0, r3
 8004e6c:	bd08      	pop	{r3, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
 8004e74:	080081fc 	.word	0x080081fc

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e7e:	6803      	ldr	r3, [r0, #0]
 8004e80:	f013 0f01 	tst.w	r3, #1
 8004e84:	d034      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e86:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004e8e:	d147      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e98:	61da      	str	r2, [r3, #28]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ea4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004eae:	d039      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb0:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004eb8:	d011      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d00c      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec4:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004ec6:	6a13      	ldr	r3, [r2, #32]
 8004ec8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ecc:	492e      	ldr	r1, [pc, #184]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004ece:	2601      	movs	r6, #1
 8004ed0:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ed6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ed8:	f013 0f01 	tst.w	r3, #1
 8004edc:	d136      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ede:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004ee0:	6a13      	ldr	r3, [r2, #32]
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	6861      	ldr	r1, [r4, #4]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d13e      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f013 0f02 	tst.w	r3, #2
 8004ef6:	d006      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef8:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004efa:	6853      	ldr	r3, [r2, #4]
 8004efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f00:	68a1      	ldr	r1, [r4, #8]
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	f013 0f10 	tst.w	r3, #16
 8004f0c:	d034      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004f10:	6853      	ldr	r3, [r2, #4]
 8004f12:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f16:	68e1      	ldr	r1, [r4, #12]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e02c      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x102>
    FlagStatus pwrclkchanged = RESET;
 8004f20:	2500      	movs	r5, #0
 8004f22:	e7c0      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004f2e:	f7fd f95f 	bl	80021f0 <HAL_GetTick>
 8004f32:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f3c:	d1b8      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3e:	f7fd f957 	bl	80021f0 <HAL_GetTick>
 8004f42:	1b80      	subs	r0, r0, r6
 8004f44:	2864      	cmp	r0, #100	; 0x64
 8004f46:	d9f5      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8004f48:	2003      	movs	r0, #3
 8004f4a:	e016      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x102>
        tickstart = HAL_GetTick();
 8004f4c:	f7fd f950 	bl	80021f0 <HAL_GetTick>
 8004f50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f013 0f02 	tst.w	r3, #2
 8004f5a:	d1c0      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fd f948 	bl	80021f0 <HAL_GetTick>
 8004f60:	1b80      	subs	r0, r0, r6
 8004f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f66:	4298      	cmp	r0, r3
 8004f68:	d9f3      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	e005      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6e:	69d3      	ldr	r3, [r2, #28]
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	61d3      	str	r3, [r2, #28]
 8004f76:	e7bb      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8004f78:	2000      	movs	r0, #0
}
 8004f7a:	b002      	add	sp, #8
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
 8004f88:	42420440 	.word	0x42420440

08004f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8004f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f96:	f10d 0c18 	add.w	ip, sp, #24
 8004f9a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f9e:	f240 2301 	movw	r3, #513	; 0x201
 8004fa2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004fa6:	2c02      	cmp	r4, #2
 8004fa8:	d051      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004faa:	2c10      	cmp	r4, #16
 8004fac:	d004      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8004fae:	2c01      	cmp	r4, #1
 8004fb0:	d02c      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8004fb2:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004fb4:	b006      	add	sp, #24
 8004fb6:	bd10      	pop	{r4, pc}
      temp_reg = RCC->CFGR;
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004fba:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004fc2:	d0f7      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fc4:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004fc8:	a906      	add	r1, sp, #24
 8004fca:	440b      	add	r3, r1
 8004fcc:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004fd4:	d016      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004fde:	440b      	add	r3, r1
 8004fe0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004fe4:	4b23      	ldr	r3, [pc, #140]	; (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8004fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fea:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ff6:	d1dd      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 8004ff8:	0040      	lsls	r0, r0, #1
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004ffc:	fba3 3000 	umull	r3, r0, r3, r0
 8005000:	0840      	lsrs	r0, r0, #1
 8005002:	e7d7      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8005006:	fb03 f000 	mul.w	r0, r3, r0
 800500a:	e7f0      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      temp_reg = RCC->BDCR;
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005010:	f240 3202 	movw	r2, #770	; 0x302
 8005014:	401a      	ands	r2, r3
 8005016:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800501a:	d023      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800501c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005024:	d004      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502a:	d009      	beq.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  uint32_t temp_reg = 0U, frequency = 0U;
 800502c:	2000      	movs	r0, #0
 800502e:	e7c1      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005034:	f012 0f02 	tst.w	r2, #2
 8005038:	d0f5      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 800503a:	f649 4040 	movw	r0, #40000	; 0x9c40
 800503e:	e7b9      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005048:	d0b4      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 800504a:	480d      	ldr	r0, [pc, #52]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
  return (frequency);
 800504c:	e7b2      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800504e:	f7ff ff03 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800505a:	3301      	adds	r3, #1
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005062:	e7a7      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = LSE_VALUE;
 8005064:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005068:	e7a4      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800506a:	bf00      	nop
 800506c:	080080e0 	.word	0x080080e0
 8005070:	40021000 	.word	0x40021000
 8005074:	00f42400 	.word	0x00f42400
 8005078:	aaaaaaab 	.word	0xaaaaaaab
 800507c:	003d0900 	.word	0x003d0900
 8005080:	0001e848 	.word	0x0001e848

08005084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	6a03      	ldr	r3, [r0, #32]
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005092:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005094:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	680c      	ldr	r4, [r1, #0]
 800509a:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509e:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	688b      	ldr	r3, [r1, #8]
 80050a4:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a6:	4c0d      	ldr	r4, [pc, #52]	; (80050dc <TIM_OC1_SetConfig+0x58>)
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d009      	beq.n	80050c0 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	4c0b      	ldr	r4, [pc, #44]	; (80050dc <TIM_OC1_SetConfig+0x58>)
 80050ae:	42a0      	cmp	r0, r4
 80050b0:	d00d      	beq.n	80050ce <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b4:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050b6:	684a      	ldr	r2, [r1, #4]
 80050b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ba:	6203      	str	r3, [r0, #32]
}
 80050bc:	bc70      	pop	{r4, r5, r6}
 80050be:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	68ca      	ldr	r2, [r1, #12]
 80050c6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	e7ee      	b.n	80050ac <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ce:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80050d2:	694a      	ldr	r2, [r1, #20]
 80050d4:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d6:	698e      	ldr	r6, [r1, #24]
 80050d8:	4316      	orrs	r6, r2
 80050da:	e7ea      	b.n	80050b2 <TIM_OC1_SetConfig+0x2e>
 80050dc:	40012c00 	.word	0x40012c00

080050e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e2:	6a03      	ldr	r3, [r0, #32]
 80050e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	680c      	ldr	r4, [r1, #0]
 80050f6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fc:	688c      	ldr	r4, [r1, #8]
 80050fe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005102:	4c0f      	ldr	r4, [pc, #60]	; (8005140 <TIM_OC3_SetConfig+0x60>)
 8005104:	42a0      	cmp	r0, r4
 8005106:	d009      	beq.n	800511c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	4c0d      	ldr	r4, [pc, #52]	; (8005140 <TIM_OC3_SetConfig+0x60>)
 800510a:	42a0      	cmp	r0, r4
 800510c:	d00e      	beq.n	800512c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005110:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005112:	684a      	ldr	r2, [r1, #4]
 8005114:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	6203      	str	r3, [r0, #32]
}
 8005118:	bc30      	pop	{r4, r5}
 800511a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800511c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005120:	68cc      	ldr	r4, [r1, #12]
 8005122:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512a:	e7ed      	b.n	8005108 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005130:	694c      	ldr	r4, [r1, #20]
 8005132:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005136:	698c      	ldr	r4, [r1, #24]
 8005138:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 800513c:	e7e7      	b.n	800510e <TIM_OC3_SetConfig+0x2e>
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00

08005144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005146:	6a03      	ldr	r3, [r0, #32]
 8005148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800514c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005152:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005154:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	680d      	ldr	r5, [r1, #0]
 800515a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005162:	688d      	ldr	r5, [r1, #8]
 8005164:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	4d07      	ldr	r5, [pc, #28]	; (8005188 <TIM_OC4_SetConfig+0x44>)
 800516a:	42a8      	cmp	r0, r5
 800516c:	d006      	beq.n	800517c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005170:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005172:	684a      	ldr	r2, [r1, #4]
 8005174:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	6203      	str	r3, [r0, #32]
}
 8005178:	bc30      	pop	{r4, r5}
 800517a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800517c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005180:	694d      	ldr	r5, [r1, #20]
 8005182:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005186:	e7f2      	b.n	800516e <TIM_OC4_SetConfig+0x2a>
 8005188:	40012c00 	.word	0x40012c00

0800518c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800518e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005190:	6a05      	ldr	r5, [r0, #32]
 8005192:	f025 0501 	bic.w	r5, r5, #1
 8005196:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800519a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519e:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80051a6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051a8:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80051aa:	6203      	str	r3, [r0, #32]
}
 80051ac:	bc30      	pop	{r4, r5}
 80051ae:	4770      	bx	lr

080051b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b2:	6a05      	ldr	r5, [r0, #32]
 80051b4:	f025 0510 	bic.w	r5, r5, #16
 80051b8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80051bc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c2:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ce:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80051d0:	6203      	str	r3, [r0, #32]
}
 80051d2:	bc30      	pop	{r4, r5}
 80051d4:	4770      	bx	lr

080051d6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051dc:	430b      	orrs	r3, r1
 80051de:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	6083      	str	r3, [r0, #8]
}
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80051e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	2302      	movs	r3, #2
 80051f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	6803      	ldr	r3, [r0, #0]
 80051fa:	4a11      	ldr	r2, [pc, #68]	; (8005240 <HAL_TIM_Base_Start+0x58>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d010      	beq.n	8005222 <HAL_TIM_Base_Start+0x3a>
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d00d      	beq.n	8005222 <HAL_TIM_Base_Start+0x3a>
 8005206:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_TIM_Base_Start+0x3a>
 800520e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005212:	4293      	cmp	r3, r2
 8005214:	d005      	beq.n	8005222 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800521e:	2000      	movs	r0, #0
 8005220:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	2a06      	cmp	r2, #6
 800522a:	d007      	beq.n	800523c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005234:	2000      	movs	r0, #0
 8005236:	4770      	bx	lr
    return HAL_ERROR;
 8005238:	2001      	movs	r0, #1
 800523a:	4770      	bx	lr
  return HAL_OK;
 800523c:	2000      	movs	r0, #0
}
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00

08005244 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8005244:	6803      	ldr	r3, [r0, #0]
 8005246:	6a19      	ldr	r1, [r3, #32]
 8005248:	f241 1211 	movw	r2, #4369	; 0x1111
 800524c:	4211      	tst	r1, r2
 800524e:	d108      	bne.n	8005262 <HAL_TIM_Base_Stop+0x1e>
 8005250:	6a19      	ldr	r1, [r3, #32]
 8005252:	f240 4244 	movw	r2, #1092	; 0x444
 8005256:	4211      	tst	r1, r2
 8005258:	d103      	bne.n	8005262 <HAL_TIM_Base_Stop+0x1e>
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005262:	2301      	movs	r3, #1
 8005264:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005268:	2000      	movs	r0, #0
 800526a:	4770      	bx	lr

0800526c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800526c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <TIM_Base_SetConfig+0x70>)
 8005270:	4290      	cmp	r0, r2
 8005272:	d00a      	beq.n	800528a <TIM_Base_SetConfig+0x1e>
 8005274:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0x1e>
 800527a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800527e:	4290      	cmp	r0, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0x1e>
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	4290      	cmp	r0, r2
 8005288:	d103      	bne.n	8005292 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800528e:	684a      	ldr	r2, [r1, #4]
 8005290:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_Base_SetConfig+0x70>)
 8005294:	4290      	cmp	r0, r2
 8005296:	d00a      	beq.n	80052ae <TIM_Base_SetConfig+0x42>
 8005298:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0x42>
 800529e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80052a2:	4290      	cmp	r0, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0x42>
 80052a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052aa:	4290      	cmp	r0, r2
 80052ac:	d103      	bne.n	80052b6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	68ca      	ldr	r2, [r1, #12]
 80052b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	694a      	ldr	r2, [r1, #20]
 80052bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80052be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	688b      	ldr	r3, [r1, #8]
 80052c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <TIM_Base_SetConfig+0x70>)
 80052ca:	4298      	cmp	r0, r3
 80052cc:	d002      	beq.n	80052d4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80052ce:	2301      	movs	r3, #1
 80052d0:	6143      	str	r3, [r0, #20]
}
 80052d2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80052d4:	690b      	ldr	r3, [r1, #16]
 80052d6:	6303      	str	r3, [r0, #48]	; 0x30
 80052d8:	e7f9      	b.n	80052ce <TIM_Base_SetConfig+0x62>
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00

080052e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80052e0:	b340      	cbz	r0, 8005334 <HAL_TIM_Base_Init+0x54>
{
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80052e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052ea:	b1f3      	cbz	r3, 800532a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	4621      	mov	r1, r4
 80052f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80052f8:	f7ff ffb8 	bl	800526c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005306:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800530a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800530e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800531e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005326:	2000      	movs	r0, #0
}
 8005328:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800532a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800532e:	f001 f96f 	bl	8006610 <HAL_TIM_Base_MspInit>
 8005332:	e7db      	b.n	80052ec <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005334:	2001      	movs	r0, #1
}
 8005336:	4770      	bx	lr

08005338 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005338:	b340      	cbz	r0, 800538c <HAL_TIM_PWM_Init+0x54>
{
 800533a:	b510      	push	{r4, lr}
 800533c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005342:	b1f3      	cbz	r3, 8005382 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	2302      	movs	r3, #2
 8005346:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534a:	4621      	mov	r1, r4
 800534c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005350:	f7ff ff8c 	bl	800526c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	2301      	movs	r3, #1
 8005356:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800535e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005362:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005366:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005372:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800537a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800537e:	2000      	movs	r0, #0
}
 8005380:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005382:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005386:	f001 f92d 	bl	80065e4 <HAL_TIM_PWM_MspInit>
 800538a:	e7db      	b.n	8005344 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800538c:	2001      	movs	r0, #1
}
 800538e:	4770      	bx	lr

08005390 <TIM_OC2_SetConfig>:
{
 8005390:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005392:	6a03      	ldr	r3, [r0, #32]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800539a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800539c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800539e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	680d      	ldr	r5, [r1, #0]
 80053a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80053aa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ae:	688d      	ldr	r5, [r1, #8]
 80053b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b4:	4d0e      	ldr	r5, [pc, #56]	; (80053f0 <TIM_OC2_SetConfig+0x60>)
 80053b6:	42a8      	cmp	r0, r5
 80053b8:	d009      	beq.n	80053ce <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <TIM_OC2_SetConfig+0x60>)
 80053bc:	42a8      	cmp	r0, r5
 80053be:	d00e      	beq.n	80053de <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80053c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053c2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053c4:	684a      	ldr	r2, [r1, #4]
 80053c6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053c8:	6203      	str	r3, [r0, #32]
}
 80053ca:	bc30      	pop	{r4, r5}
 80053cc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d2:	68cd      	ldr	r5, [r1, #12]
 80053d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053dc:	e7ed      	b.n	80053ba <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053de:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e2:	694d      	ldr	r5, [r1, #20]
 80053e4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e8:	698d      	ldr	r5, [r1, #24]
 80053ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80053ee:	e7e7      	b.n	80053c0 <TIM_OC2_SetConfig+0x30>
 80053f0:	40012c00 	.word	0x40012c00

080053f4 <HAL_TIM_PWM_ConfigChannel>:
{
 80053f4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80053f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d060      	beq.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80053fe:	4604      	mov	r4, r0
 8005400:	460d      	mov	r5, r1
 8005402:	2301      	movs	r3, #1
 8005404:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005408:	2a0c      	cmp	r2, #12
 800540a:	d81a      	bhi.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800540c:	e8df f002 	tbb	[pc, r2]
 8005410:	19191907 	.word	0x19191907
 8005414:	1919191d 	.word	0x1919191d
 8005418:	19191931 	.word	0x19191931
 800541c:	44          	.byte	0x44
 800541d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f7ff fe30 	bl	8005084 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	6993      	ldr	r3, [r2, #24]
 8005428:	f043 0308 	orr.w	r3, r3, #8
 800542c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	6993      	ldr	r3, [r2, #24]
 8005432:	f023 0304 	bic.w	r3, r3, #4
 8005436:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	6993      	ldr	r3, [r2, #24]
 800543c:	6929      	ldr	r1, [r5, #16]
 800543e:	430b      	orrs	r3, r1
 8005440:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8005442:	2000      	movs	r0, #0
 8005444:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005448:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	f7ff ffa0 	bl	8005390 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	6993      	ldr	r3, [r2, #24]
 8005454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005458:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	6993      	ldr	r3, [r2, #24]
 800545e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005462:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	6993      	ldr	r3, [r2, #24]
 8005468:	6929      	ldr	r1, [r5, #16]
 800546a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800546e:	6193      	str	r3, [r2, #24]
      break;
 8005470:	e7e7      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	f7ff fe34 	bl	80050e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	69d3      	ldr	r3, [r2, #28]
 800547c:	f043 0308 	orr.w	r3, r3, #8
 8005480:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	69d3      	ldr	r3, [r2, #28]
 8005486:	f023 0304 	bic.w	r3, r3, #4
 800548a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	69d3      	ldr	r3, [r2, #28]
 8005490:	6929      	ldr	r1, [r5, #16]
 8005492:	430b      	orrs	r3, r1
 8005494:	61d3      	str	r3, [r2, #28]
      break;
 8005496:	e7d4      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005498:	6800      	ldr	r0, [r0, #0]
 800549a:	f7ff fe53 	bl	8005144 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	69d3      	ldr	r3, [r2, #28]
 80054a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	69d3      	ldr	r3, [r2, #28]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	69d3      	ldr	r3, [r2, #28]
 80054b6:	6929      	ldr	r1, [r5, #16]
 80054b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054bc:	61d3      	str	r3, [r2, #28]
      break;
 80054be:	e7c0      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80054c0:	2002      	movs	r0, #2
 80054c2:	e7c1      	b.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x54>

080054c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054cc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80054d0:	430a      	orrs	r2, r1
 80054d2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d4:	6082      	str	r2, [r0, #8]
}
 80054d6:	bc10      	pop	{r4}
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80054da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d066      	beq.n	80055b0 <HAL_TIM_ConfigClockSource+0xd6>
{
 80054e2:	b510      	push	{r4, lr}
 80054e4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80054e6:	2301      	movs	r3, #1
 80054e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80054f2:	6802      	ldr	r2, [r0, #0]
 80054f4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80054fe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	2b60      	cmp	r3, #96	; 0x60
 8005504:	d040      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xae>
 8005506:	d822      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x74>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d047      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xc2>
 800550c:	d90b      	bls.n	8005526 <HAL_TIM_ConfigClockSource+0x4c>
 800550e:	2b50      	cmp	r3, #80	; 0x50
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	68ca      	ldr	r2, [r1, #12]
 8005514:	6849      	ldr	r1, [r1, #4]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	f7ff fe38 	bl	800518c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800551c:	2150      	movs	r1, #80	; 0x50
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	f7ff fe59 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8005524:	e004      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8005526:	2b20      	cmp	r3, #32
 8005528:	d00c      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0x6a>
 800552a:	d908      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x64>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d009      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8005530:	2301      	movs	r3, #1
 8005532:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005536:	2000      	movs	r0, #0
 8005538:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800553c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800553e:	b10b      	cbz	r3, 8005544 <HAL_TIM_ConfigClockSource+0x6a>
 8005540:	2b10      	cmp	r3, #16
 8005542:	d1f5      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005544:	4619      	mov	r1, r3
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	f7ff fe45 	bl	80051d6 <TIM_ITRx_SetConfig>
        break;
 800554c:	e7f0      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800554e:	2b70      	cmp	r3, #112	; 0x70
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0x96>
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005556:	d1eb      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	68cb      	ldr	r3, [r1, #12]
 800555a:	684a      	ldr	r2, [r1, #4]
 800555c:	6889      	ldr	r1, [r1, #8]
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	f7ff ffb0 	bl	80054c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	6893      	ldr	r3, [r2, #8]
 8005568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800556c:	6093      	str	r3, [r2, #8]
      break;
 800556e:	e7df      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	68cb      	ldr	r3, [r1, #12]
 8005572:	684a      	ldr	r2, [r1, #4]
 8005574:	6889      	ldr	r1, [r1, #8]
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	f7ff ffa4 	bl	80054c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005584:	6093      	str	r3, [r2, #8]
      break;
 8005586:	e7d3      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005588:	68ca      	ldr	r2, [r1, #12]
 800558a:	6849      	ldr	r1, [r1, #4]
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f7ff fe0f 	bl	80051b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005592:	2160      	movs	r1, #96	; 0x60
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	f7ff fe1e 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 800559a:	e7c9      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559c:	68ca      	ldr	r2, [r1, #12]
 800559e:	6849      	ldr	r1, [r1, #4]
 80055a0:	6800      	ldr	r0, [r0, #0]
 80055a2:	f7ff fdf3 	bl	800518c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	f7ff fe14 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 80055ae:	e7bf      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80055b0:	2002      	movs	r0, #2
}
 80055b2:	4770      	bx	lr

080055b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b6:	f001 011f 	and.w	r1, r1, #31
 80055ba:	2301      	movs	r3, #1
 80055bc:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c0:	6a03      	ldr	r3, [r0, #32]
 80055c2:	ea23 0304 	bic.w	r3, r3, r4
 80055c6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	fa02 f101 	lsl.w	r1, r2, r1
 80055ce:	430b      	orrs	r3, r1
 80055d0:	6203      	str	r3, [r0, #32]
}
 80055d2:	bc10      	pop	{r4}
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_TIM_PWM_Start>:
{
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055dc:	4608      	mov	r0, r1
 80055de:	bb51      	cbnz	r1, 8005636 <HAL_TIM_PWM_Start+0x5e>
 80055e0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	bf18      	it	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d15b      	bne.n	80056a8 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d139      	bne.n	8005668 <HAL_TIM_PWM_Start+0x90>
 80055f4:	2302      	movs	r3, #2
 80055f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055fa:	2201      	movs	r2, #1
 80055fc:	4601      	mov	r1, r0
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	f7ff ffd8 	bl	80055b4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <HAL_TIM_PWM_Start+0xd8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d03d      	beq.n	8005688 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <HAL_TIM_PWM_Start+0xd8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d03e      	beq.n	8005692 <HAL_TIM_PWM_Start+0xba>
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d03b      	beq.n	8005692 <HAL_TIM_PWM_Start+0xba>
 800561a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800561e:	4293      	cmp	r3, r2
 8005620:	d037      	beq.n	8005692 <HAL_TIM_PWM_Start+0xba>
 8005622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005626:	4293      	cmp	r3, r2
 8005628:	d033      	beq.n	8005692 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005632:	2000      	movs	r0, #0
 8005634:	e039      	b.n	80056aa <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005636:	2904      	cmp	r1, #4
 8005638:	d008      	beq.n	800564c <HAL_TIM_PWM_Start+0x74>
 800563a:	2908      	cmp	r1, #8
 800563c:	d00d      	beq.n	800565a <HAL_TIM_PWM_Start+0x82>
 800563e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	bf18      	it	ne
 8005648:	2301      	movne	r3, #1
 800564a:	e7cf      	b.n	80055ec <HAL_TIM_PWM_Start+0x14>
 800564c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005650:	b2db      	uxtb	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	bf18      	it	ne
 8005656:	2301      	movne	r3, #1
 8005658:	e7c8      	b.n	80055ec <HAL_TIM_PWM_Start+0x14>
 800565a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800565e:	b2db      	uxtb	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	bf18      	it	ne
 8005664:	2301      	movne	r3, #1
 8005666:	e7c1      	b.n	80055ec <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005668:	2804      	cmp	r0, #4
 800566a:	d005      	beq.n	8005678 <HAL_TIM_PWM_Start+0xa0>
 800566c:	2808      	cmp	r0, #8
 800566e:	d007      	beq.n	8005680 <HAL_TIM_PWM_Start+0xa8>
 8005670:	2302      	movs	r3, #2
 8005672:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005676:	e7c0      	b.n	80055fa <HAL_TIM_PWM_Start+0x22>
 8005678:	2302      	movs	r3, #2
 800567a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800567e:	e7bc      	b.n	80055fa <HAL_TIM_PWM_Start+0x22>
 8005680:	2302      	movs	r3, #2
 8005682:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005686:	e7b8      	b.n	80055fa <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8005688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
 8005690:	e7bc      	b.n	800560c <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	2a06      	cmp	r2, #6
 800569a:	d007      	beq.n	80056ac <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056a4:	2000      	movs	r0, #0
 80056a6:	e000      	b.n	80056aa <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80056a8:	2001      	movs	r0, #1
}
 80056aa:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80056ac:	2000      	movs	r0, #0
 80056ae:	e7fc      	b.n	80056aa <HAL_TIM_PWM_Start+0xd2>
 80056b0:	40012c00 	.word	0x40012c00

080056b4 <HAL_TIM_PWM_Stop>:
{
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4604      	mov	r4, r0
 80056b8:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056ba:	2200      	movs	r2, #0
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f7ff ff79 	bl	80055b4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_TIM_PWM_Stop+0x80>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d014      	beq.n	80056f4 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	6a19      	ldr	r1, [r3, #32]
 80056ce:	f241 1211 	movw	r2, #4369	; 0x1111
 80056d2:	4211      	tst	r1, r2
 80056d4:	d108      	bne.n	80056e8 <HAL_TIM_PWM_Stop+0x34>
 80056d6:	6a19      	ldr	r1, [r3, #32]
 80056d8:	f240 4244 	movw	r2, #1092	; 0x444
 80056dc:	4211      	tst	r1, r2
 80056de:	d103      	bne.n	80056e8 <HAL_TIM_PWM_Stop+0x34>
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	b99d      	cbnz	r5, 8005712 <HAL_TIM_PWM_Stop+0x5e>
 80056ea:	2301      	movs	r3, #1
 80056ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80056f0:	2000      	movs	r0, #0
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80056f4:	6a19      	ldr	r1, [r3, #32]
 80056f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80056fa:	4211      	tst	r1, r2
 80056fc:	d1e5      	bne.n	80056ca <HAL_TIM_PWM_Stop+0x16>
 80056fe:	6a19      	ldr	r1, [r3, #32]
 8005700:	f240 4244 	movw	r2, #1092	; 0x444
 8005704:	4211      	tst	r1, r2
 8005706:	d1e0      	bne.n	80056ca <HAL_TIM_PWM_Stop+0x16>
 8005708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
 8005710:	e7db      	b.n	80056ca <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	2d04      	cmp	r5, #4
 8005714:	d005      	beq.n	8005722 <HAL_TIM_PWM_Stop+0x6e>
 8005716:	2d08      	cmp	r5, #8
 8005718:	d007      	beq.n	800572a <HAL_TIM_PWM_Stop+0x76>
 800571a:	2301      	movs	r3, #1
 800571c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005720:	e7e6      	b.n	80056f0 <HAL_TIM_PWM_Stop+0x3c>
 8005722:	2301      	movs	r3, #1
 8005724:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005728:	e7e2      	b.n	80056f0 <HAL_TIM_PWM_Stop+0x3c>
 800572a:	2301      	movs	r3, #1
 800572c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005730:	e7de      	b.n	80056f0 <HAL_TIM_PWM_Stop+0x3c>
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00

08005738 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005738:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800573a:	f001 011f 	and.w	r1, r1, #31
 800573e:	2304      	movs	r3, #4
 8005740:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005744:	6a03      	ldr	r3, [r0, #32]
 8005746:	ea23 0304 	bic.w	r3, r3, r4
 800574a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800574c:	6a03      	ldr	r3, [r0, #32]
 800574e:	fa02 f101 	lsl.w	r1, r2, r1
 8005752:	430b      	orrs	r3, r1
 8005754:	6203      	str	r3, [r0, #32]
}
 8005756:	bc10      	pop	{r4}
 8005758:	4770      	bx	lr
	...

0800575c <HAL_TIMEx_PWMN_Start>:
{
 800575c:	b510      	push	{r4, lr}
 800575e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005760:	4608      	mov	r0, r1
 8005762:	bb59      	cbnz	r1, 80057bc <HAL_TIMEx_PWMN_Start+0x60>
 8005764:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	bf18      	it	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d157      	bne.n	8005824 <HAL_TIMEx_PWMN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005774:	2800      	cmp	r0, #0
 8005776:	d13a      	bne.n	80057ee <HAL_TIMEx_PWMN_Start+0x92>
 8005778:	2302      	movs	r3, #2
 800577a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800577e:	2204      	movs	r2, #4
 8005780:	4601      	mov	r1, r0
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	f7ff ffd8 	bl	8005738 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	4a25      	ldr	r2, [pc, #148]	; (800582c <HAL_TIMEx_PWMN_Start+0xd0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d039      	beq.n	800580e <HAL_TIMEx_PWMN_Start+0xb2>
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d036      	beq.n	800580e <HAL_TIMEx_PWMN_Start+0xb2>
 80057a0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d032      	beq.n	800580e <HAL_TIMEx_PWMN_Start+0xb2>
 80057a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d02e      	beq.n	800580e <HAL_TIMEx_PWMN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80057b8:	2000      	movs	r0, #0
 80057ba:	e034      	b.n	8005826 <HAL_TIMEx_PWMN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057bc:	2904      	cmp	r1, #4
 80057be:	d008      	beq.n	80057d2 <HAL_TIMEx_PWMN_Start+0x76>
 80057c0:	2908      	cmp	r1, #8
 80057c2:	d00d      	beq.n	80057e0 <HAL_TIMEx_PWMN_Start+0x84>
 80057c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	bf18      	it	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	e7ce      	b.n	8005770 <HAL_TIMEx_PWMN_Start+0x14>
 80057d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	bf18      	it	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	e7c7      	b.n	8005770 <HAL_TIMEx_PWMN_Start+0x14>
 80057e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	bf18      	it	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	e7c0      	b.n	8005770 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ee:	2804      	cmp	r0, #4
 80057f0:	d005      	beq.n	80057fe <HAL_TIMEx_PWMN_Start+0xa2>
 80057f2:	2808      	cmp	r0, #8
 80057f4:	d007      	beq.n	8005806 <HAL_TIMEx_PWMN_Start+0xaa>
 80057f6:	2302      	movs	r3, #2
 80057f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057fc:	e7bf      	b.n	800577e <HAL_TIMEx_PWMN_Start+0x22>
 80057fe:	2302      	movs	r3, #2
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	e7bb      	b.n	800577e <HAL_TIMEx_PWMN_Start+0x22>
 8005806:	2302      	movs	r3, #2
 8005808:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800580c:	e7b7      	b.n	800577e <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	2a06      	cmp	r2, #6
 8005816:	d007      	beq.n	8005828 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005820:	2000      	movs	r0, #0
 8005822:	e000      	b.n	8005826 <HAL_TIMEx_PWMN_Start+0xca>
    return HAL_ERROR;
 8005824:	2001      	movs	r0, #1
}
 8005826:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005828:	2000      	movs	r0, #0
 800582a:	e7fc      	b.n	8005826 <HAL_TIMEx_PWMN_Start+0xca>
 800582c:	40012c00 	.word	0x40012c00

08005830 <HAL_TIMEx_PWMN_Stop>:
{
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4604      	mov	r4, r0
 8005834:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005836:	2200      	movs	r2, #0
 8005838:	6800      	ldr	r0, [r0, #0]
 800583a:	f7ff ff7d 	bl	8005738 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	6a19      	ldr	r1, [r3, #32]
 8005842:	f241 1211 	movw	r2, #4369	; 0x1111
 8005846:	4211      	tst	r1, r2
 8005848:	d108      	bne.n	800585c <HAL_TIMEx_PWMN_Stop+0x2c>
 800584a:	6a19      	ldr	r1, [r3, #32]
 800584c:	f240 4244 	movw	r2, #1092	; 0x444
 8005850:	4211      	tst	r1, r2
 8005852:	d103      	bne.n	800585c <HAL_TIMEx_PWMN_Stop+0x2c>
 8005854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	6a19      	ldr	r1, [r3, #32]
 8005860:	f241 1211 	movw	r2, #4369	; 0x1111
 8005864:	4211      	tst	r1, r2
 8005866:	d108      	bne.n	800587a <HAL_TIMEx_PWMN_Stop+0x4a>
 8005868:	6a19      	ldr	r1, [r3, #32]
 800586a:	f240 4244 	movw	r2, #1092	; 0x444
 800586e:	4211      	tst	r1, r2
 8005870:	d103      	bne.n	800587a <HAL_TIMEx_PWMN_Stop+0x4a>
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800587a:	b925      	cbnz	r5, 8005886 <HAL_TIMEx_PWMN_Stop+0x56>
 800587c:	2301      	movs	r3, #1
 800587e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8005882:	2000      	movs	r0, #0
 8005884:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	2d04      	cmp	r5, #4
 8005888:	d005      	beq.n	8005896 <HAL_TIMEx_PWMN_Stop+0x66>
 800588a:	2d08      	cmp	r5, #8
 800588c:	d007      	beq.n	800589e <HAL_TIMEx_PWMN_Stop+0x6e>
 800588e:	2301      	movs	r3, #1
 8005890:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005894:	e7f5      	b.n	8005882 <HAL_TIMEx_PWMN_Stop+0x52>
 8005896:	2301      	movs	r3, #1
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	e7f1      	b.n	8005882 <HAL_TIMEx_PWMN_Stop+0x52>
 800589e:	2301      	movs	r3, #1
 80058a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80058a4:	e7ed      	b.n	8005882 <HAL_TIMEx_PWMN_Stop+0x52>
	...

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80058a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d02b      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80058b0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80058b2:	2301      	movs	r3, #1
 80058b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80058be:	6803      	ldr	r3, [r0, #0]
 80058c0:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80058c2:	689d      	ldr	r5, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c8:	680a      	ldr	r2, [r1, #0]
 80058ca:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 80058cc:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	4a0e      	ldr	r2, [pc, #56]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00a      	beq.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d007      	beq.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80058dc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80058e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d104      	bne.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ec:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f0:	684a      	ldr	r2, [r1, #4]
 80058f2:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 80058f4:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80058fc:	2300      	movs	r3, #0
 80058fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005902:	4618      	mov	r0, r3
}
 8005904:	bc30      	pop	{r4, r5}
 8005906:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005908:	2002      	movs	r0, #2
}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00

08005910 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005910:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d022      	beq.n	800595e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005918:	2301      	movs	r3, #1
 800591a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800591e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592c:	684a      	ldr	r2, [r1, #4]
 800592e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005934:	680a      	ldr	r2, [r1, #0]
 8005936:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	690a      	ldr	r2, [r1, #16]
 800593e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005944:	694a      	ldr	r2, [r1, #20]
 8005946:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594c:	69ca      	ldr	r2, [r1, #28]
 800594e:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8005950:	6802      	ldr	r2, [r0, #0]
 8005952:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005954:	2300      	movs	r3, #0
 8005956:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800595a:	4618      	mov	r0, r3
 800595c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800595e:	2002      	movs	r0, #2
}
 8005960:	4770      	bx	lr
	...

08005964 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005964:	b500      	push	{lr}
 8005966:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005968:	2300      	movs	r3, #0
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005970:	481f      	ldr	r0, [pc, #124]	; (80059f0 <MX_ADC1_Init+0x8c>)
 8005972:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <MX_ADC1_Init+0x90>)
 8005974:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800597a:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800597c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800597e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8005980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005984:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005986:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 8005988:	2303      	movs	r3, #3
 800598a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800598c:	f7fc feb2 	bl	80026f4 <HAL_ADC_Init>
 8005990:	bb08      	cbnz	r0, 80059d6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005992:	2300      	movs	r3, #0
 8005994:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005996:	2301      	movs	r3, #1
 8005998:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800599a:	2302      	movs	r3, #2
 800599c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800599e:	a901      	add	r1, sp, #4
 80059a0:	4813      	ldr	r0, [pc, #76]	; (80059f0 <MX_ADC1_Init+0x8c>)
 80059a2:	f7fc fd03 	bl	80023ac <HAL_ADC_ConfigChannel>
 80059a6:	b9c8      	cbnz	r0, 80059dc <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80059a8:	2301      	movs	r3, #1
 80059aa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80059ac:	2302      	movs	r3, #2
 80059ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059b0:	a901      	add	r1, sp, #4
 80059b2:	480f      	ldr	r0, [pc, #60]	; (80059f0 <MX_ADC1_Init+0x8c>)
 80059b4:	f7fc fcfa 	bl	80023ac <HAL_ADC_ConfigChannel>
 80059b8:	b998      	cbnz	r0, 80059e2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80059ba:	2310      	movs	r3, #16
 80059bc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80059be:	2303      	movs	r3, #3
 80059c0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80059c2:	2307      	movs	r3, #7
 80059c4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059c6:	a901      	add	r1, sp, #4
 80059c8:	4809      	ldr	r0, [pc, #36]	; (80059f0 <MX_ADC1_Init+0x8c>)
 80059ca:	f7fc fcef 	bl	80023ac <HAL_ADC_ConfigChannel>
 80059ce:	b958      	cbnz	r0, 80059e8 <MX_ADC1_Init+0x84>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80059d0:	b005      	add	sp, #20
 80059d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80059d6:	f000 fcd3 	bl	8006380 <Error_Handler>
 80059da:	e7da      	b.n	8005992 <MX_ADC1_Init+0x2e>
    Error_Handler();
 80059dc:	f000 fcd0 	bl	8006380 <Error_Handler>
 80059e0:	e7e2      	b.n	80059a8 <MX_ADC1_Init+0x44>
    Error_Handler();
 80059e2:	f000 fccd 	bl	8006380 <Error_Handler>
 80059e6:	e7e8      	b.n	80059ba <MX_ADC1_Init+0x56>
    Error_Handler();
 80059e8:	f000 fcca 	bl	8006380 <Error_Handler>
}
 80059ec:	e7f0      	b.n	80059d0 <MX_ADC1_Init+0x6c>
 80059ee:	bf00      	nop
 80059f0:	20000390 	.word	0x20000390
 80059f4:	40012400 	.word	0x40012400

080059f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80059f8:	b510      	push	{r4, lr}
 80059fa:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059fc:	2300      	movs	r3, #0
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	9303      	str	r3, [sp, #12]
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8005a06:	6802      	ldr	r2, [r0, #0]
 8005a08:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_ADC_MspInit+0x9c>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d001      	beq.n	8005a12 <HAL_ADC_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a0e:	b006      	add	sp, #24
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a14:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005a26:	9200      	str	r2, [sp, #0]
 8005a28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	f042 0204 	orr.w	r2, r2, #4
 8005a30:	619a      	str	r2, [r3, #24]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VM_Pin|IM_Pin;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a40:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a42:	a902      	add	r1, sp, #8
 8005a44:	4814      	ldr	r0, [pc, #80]	; (8005a98 <HAL_ADC_MspInit+0xa0>)
 8005a46:	f7fd f93d 	bl	8002cc4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8005a4a:	4814      	ldr	r0, [pc, #80]	; (8005a9c <HAL_ADC_MspInit+0xa4>)
 8005a4c:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <HAL_ADC_MspInit+0xa8>)
 8005a4e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a50:	2300      	movs	r3, #0
 8005a52:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a54:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a5e:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a64:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005a66:	2320      	movs	r3, #32
 8005a68:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a6e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005a70:	f7fc ffc6 	bl	8002a00 <HAL_DMA_Init>
 8005a74:	b958      	cbnz	r0, 8005a8e <HAL_ADC_MspInit+0x96>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_ADC_MspInit+0xa4>)
 8005a78:	6223      	str	r3, [r4, #32]
 8005a7a:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2101      	movs	r1, #1
 8005a80:	2012      	movs	r0, #18
 8005a82:	f7fc ff4f 	bl	8002924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005a86:	2012      	movs	r0, #18
 8005a88:	f7fc ff80 	bl	800298c <HAL_NVIC_EnableIRQ>
}
 8005a8c:	e7bf      	b.n	8005a0e <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8005a8e:	f000 fc77 	bl	8006380 <Error_Handler>
 8005a92:	e7f0      	b.n	8005a76 <HAL_ADC_MspInit+0x7e>
 8005a94:	40012400 	.word	0x40012400
 8005a98:	40010800 	.word	0x40010800
 8005a9c:	200003c0 	.word	0x200003c0
 8005aa0:	40020008 	.word	0x40020008

08005aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005aa4:	b500      	push	{lr}
 8005aa6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <MX_DMA_Init+0x40>)
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005abc:	2200      	movs	r2, #0
 8005abe:	2101      	movs	r1, #1
 8005ac0:	200b      	movs	r0, #11
 8005ac2:	f7fc ff2f 	bl	8002924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005ac6:	200b      	movs	r0, #11
 8005ac8:	f7fc ff60 	bl	800298c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005acc:	2200      	movs	r2, #0
 8005ace:	4611      	mov	r1, r2
 8005ad0:	2010      	movs	r0, #16
 8005ad2:	f7fc ff27 	bl	8002924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f7fc ff58 	bl	800298c <HAL_NVIC_EnableIRQ>

}
 8005adc:	b003      	add	sp, #12
 8005ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000

08005ae8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aec:	2400      	movs	r4, #0
 8005aee:	9404      	str	r4, [sp, #16]
 8005af0:	9405      	str	r4, [sp, #20]
 8005af2:	9406      	str	r4, [sp, #24]
 8005af4:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005af6:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <MX_GPIO_Init+0xb8>)
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	f042 0210 	orr.w	r2, r2, #16
 8005afe:	619a      	str	r2, [r3, #24]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	f002 0210 	and.w	r2, r2, #16
 8005b06:	9200      	str	r2, [sp, #0]
 8005b08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	f042 0220 	orr.w	r2, r2, #32
 8005b10:	619a      	str	r2, [r3, #24]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	f002 0220 	and.w	r2, r2, #32
 8005b18:	9201      	str	r2, [sp, #4]
 8005b1a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	f042 0204 	orr.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	f002 0204 	and.w	r2, r2, #4
 8005b2a:	9202      	str	r2, [sp, #8]
 8005b2c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005b40:	4f18      	ldr	r7, [pc, #96]	; (8005ba4 <MX_GPIO_Init+0xbc>)
 8005b42:	4622      	mov	r2, r4
 8005b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f7fd f9cb 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYSCLK_Pin|TEST1_Pin|TEST_Pin, GPIO_PIN_RESET);
 8005b4e:	4d16      	ldr	r5, [pc, #88]	; (8005ba8 <MX_GPIO_Init+0xc0>)
 8005b50:	4622      	mov	r2, r4
 8005b52:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7fd f9c4 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b60:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b62:	2601      	movs	r6, #1
 8005b64:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f7fd f8a8 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BPUSH_Pin|BPULL_Pin|BCFG_Pin;
 8005b74:	231c      	movs	r3, #28
 8005b76:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b78:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b7a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7c:	a904      	add	r1, sp, #16
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7fd f8a0 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SYSCLK_Pin|TEST1_Pin|TEST_Pin;
 8005b84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005b88:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b8a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b92:	a904      	add	r1, sp, #16
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7fd f895 	bl	8002cc4 <HAL_GPIO_Init>

}
 8005b9a:	b009      	add	sp, #36	; 0x24
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40011000 	.word	0x40011000
 8005ba8:	40010800 	.word	0x40010800

08005bac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005bac:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bae:	480b      	ldr	r0, [pc, #44]	; (8005bdc <MX_I2C1_Init+0x30>)
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <MX_I2C1_Init+0x34>)
 8005bb2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <MX_I2C1_Init+0x38>)
 8005bb6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bbc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bc2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bc4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bc6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bc8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bca:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bcc:	f7fd fcca 	bl	8003564 <HAL_I2C_Init>
 8005bd0:	b900      	cbnz	r0, 8005bd4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bd2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005bd4:	f000 fbd4 	bl	8006380 <Error_Handler>
}
 8005bd8:	e7fb      	b.n	8005bd2 <MX_I2C1_Init+0x26>
 8005bda:	bf00      	nop
 8005bdc:	20000448 	.word	0x20000448
 8005be0:	40005400 	.word	0x40005400
 8005be4:	00061a80 	.word	0x00061a80

08005be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005be8:	b530      	push	{r4, r5, lr}
 8005bea:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bec:	2300      	movs	r3, #0
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	9303      	str	r3, [sp, #12]
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 8005bf6:	6802      	ldr	r2, [r0, #0]
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <HAL_I2C_MspInit+0x98>)
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005bfe:	b007      	add	sp, #28
 8005c00:	bd30      	pop	{r4, r5, pc}
 8005c02:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c04:	4d1f      	ldr	r5, [pc, #124]	; (8005c84 <HAL_I2C_MspInit+0x9c>)
 8005c06:	69ab      	ldr	r3, [r5, #24]
 8005c08:	f043 0308 	orr.w	r3, r3, #8
 8005c0c:	61ab      	str	r3, [r5, #24]
 8005c0e:	69ab      	ldr	r3, [r5, #24]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8005c18:	23c0      	movs	r3, #192	; 0xc0
 8005c1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c1c:	2312      	movs	r3, #18
 8005c1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c20:	2303      	movs	r3, #3
 8005c22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c24:	a902      	add	r1, sp, #8
 8005c26:	4818      	ldr	r0, [pc, #96]	; (8005c88 <HAL_I2C_MspInit+0xa0>)
 8005c28:	f7fd f84c 	bl	8002cc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c2c:	69eb      	ldr	r3, [r5, #28]
 8005c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c32:	61eb      	str	r3, [r5, #28]
 8005c34:	69eb      	ldr	r3, [r5, #28]
 8005c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005c3e:	4813      	ldr	r0, [pc, #76]	; (8005c8c <HAL_I2C_MspInit+0xa4>)
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <HAL_I2C_MspInit+0xa8>)
 8005c42:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c44:	2310      	movs	r3, #16
 8005c46:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	60c2      	str	r2, [r0, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c50:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c52:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005c54:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005c5c:	f7fc fed0 	bl	8002a00 <HAL_DMA_Init>
 8005c60:	b958      	cbnz	r0, 8005c7a <HAL_I2C_MspInit+0x92>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <HAL_I2C_MspInit+0xa4>)
 8005c64:	6363      	str	r3, [r4, #52]	; 0x34
 8005c66:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	201f      	movs	r0, #31
 8005c6e:	f7fc fe59 	bl	8002924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005c72:	201f      	movs	r0, #31
 8005c74:	f7fc fe8a 	bl	800298c <HAL_NVIC_EnableIRQ>
}
 8005c78:	e7c1      	b.n	8005bfe <HAL_I2C_MspInit+0x16>
      Error_Handler();
 8005c7a:	f000 fb81 	bl	8006380 <Error_Handler>
 8005c7e:	e7f0      	b.n	8005c62 <HAL_I2C_MspInit+0x7a>
 8005c80:	40005400 	.word	0x40005400
 8005c84:	40021000 	.word	0x40021000
 8005c88:	40010c00 	.word	0x40010c00
 8005c8c:	20000404 	.word	0x20000404
 8005c90:	4002006c 	.word	0x4002006c

08005c94 <StopWaitingDueToPushBtnRelease>:

int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}
uint8_t StopWaitingDueToPushBtnRelease(void){
 8005c94:	b500      	push	{lr}
 8005c96:	b083      	sub	sp, #12
	uint8_t PushBtnState;
	bbb_GetBtnStates(&PushBtnState, 0, 0);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	f10d 0007 	add.w	r0, sp, #7
 8005ca0:	f7fb fd5e 	bl	8001760 <bbb_GetBtnStates>

	return !PushBtnState;
 8005ca4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005ca8:	fab0 f080 	clz	r0, r0
 8005cac:	0940      	lsrs	r0, r0, #5
 8005cae:	b003      	add	sp, #12
 8005cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08005cb4 <StopWaitingDueToPullBtnRelease>:


uint8_t StopWaitingDueToPullBtnRelease(void){
 8005cb4:	b500      	push	{lr}
 8005cb6:	b083      	sub	sp, #12
	uint8_t PullBtnState;
	bbb_GetBtnStates(0, &PullBtnState, 0);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f10d 0107 	add.w	r1, sp, #7
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fb fd4e 	bl	8001760 <bbb_GetBtnStates>

	return !PullBtnState;
 8005cc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005cc8:	fab0 f080 	clz	r0, r0
 8005ccc:	0940      	lsrs	r0, r0, #5
 8005cce:	b003      	add	sp, #12
 8005cd0:	f85d fb04 	ldr.w	pc, [sp], #4

08005cd4 <StopWaitingDueToAnyBtnPressed>:


uint8_t StopWaitingDueToAnyBtnPressed(void){
 8005cd4:	b500      	push	{lr}
 8005cd6:	b083      	sub	sp, #12
	uint8_t PushBtnState, PullBtnState, CfgBtnState;
	bbb_GetBtnStates(&PushBtnState, &PullBtnState, &CfgBtnState);
 8005cd8:	f10d 0205 	add.w	r2, sp, #5
 8005cdc:	f10d 0106 	add.w	r1, sp, #6
 8005ce0:	f10d 0007 	add.w	r0, sp, #7
 8005ce4:	f7fb fd3c 	bl	8001760 <bbb_GetBtnStates>
	return ( PushBtnState || PullBtnState || CfgBtnState);
 8005ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cec:	b93b      	cbnz	r3, 8005cfe <StopWaitingDueToAnyBtnPressed+0x2a>
 8005cee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005cf2:	b943      	cbnz	r3, 8005d06 <StopWaitingDueToAnyBtnPressed+0x32>
 8005cf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005cf8:	b13b      	cbz	r3, 8005d0a <StopWaitingDueToAnyBtnPressed+0x36>
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	e000      	b.n	8005d00 <StopWaitingDueToAnyBtnPressed+0x2c>
 8005cfe:	2001      	movs	r0, #1
}
 8005d00:	b003      	add	sp, #12
 8005d02:	f85d fb04 	ldr.w	pc, [sp], #4
	return ( PushBtnState || PullBtnState || CfgBtnState);
 8005d06:	2001      	movs	r0, #1
 8005d08:	e7fa      	b.n	8005d00 <StopWaitingDueToAnyBtnPressed+0x2c>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e7f8      	b.n	8005d00 <StopWaitingDueToAnyBtnPressed+0x2c>

08005d0e <_write>:
{
 8005d0e:	4610      	mov	r0, r2
  for(uint16_t i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
 8005d10:	2300      	movs	r3, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d221      	bcs.n	8005d5a <_write+0x4c>
{
 8005d16:	b410      	push	{r4}
 8005d18:	e006      	b.n	8005d28 <_write+0x1a>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005d1a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8005d1e:	7022      	strb	r2, [r4, #0]
  for(uint16_t i=0 ; i<len ; i++) ITM_SendChar((*ptr++));
 8005d20:	3301      	adds	r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4283      	cmp	r3, r0
 8005d26:	d216      	bcs.n	8005d56 <_write+0x48>
 8005d28:	f811 2b01 	ldrb.w	r2, [r1], #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d2c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8005d30:	f8d4 4e80 	ldr.w	r4, [r4, #3712]	; 0xe80
 8005d34:	f014 0f01 	tst.w	r4, #1
 8005d38:	d0f2      	beq.n	8005d20 <_write+0x12>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005d3a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8005d3e:	f8d4 4e00 	ldr.w	r4, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d42:	f014 0f01 	tst.w	r4, #1
 8005d46:	d0eb      	beq.n	8005d20 <_write+0x12>
    while (ITM->PORT[0U].u32 == 0UL)
 8005d48:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8005d4c:	6824      	ldr	r4, [r4, #0]
 8005d4e:	2c00      	cmp	r4, #0
 8005d50:	d1e3      	bne.n	8005d1a <_write+0xc>
      __NOP();
 8005d52:	bf00      	nop
 8005d54:	e7f8      	b.n	8005d48 <_write+0x3a>
}
 8005d56:	bc10      	pop	{r4}
 8005d58:	4770      	bx	lr
 8005d5a:	4770      	bx	lr

08005d5c <ReadFromEprom>:
	Status1 = EE_Write(AdrSpeedMode, SpeedMode);
	Status1 = EE_Write(AdrRetractDuration, RetractDuration);
}

void ReadFromEprom()
{
 8005d5c:	b510      	push	{r4, lr}
	Status1 = EE_Read(AdrSpeedMode, &SpeedMode);
 8005d5e:	4907      	ldr	r1, [pc, #28]	; (8005d7c <ReadFromEprom+0x20>)
 8005d60:	f241 1011 	movw	r0, #4369	; 0x1111
 8005d64:	f7fb fbae 	bl	80014c4 <EE_Read>
 8005d68:	4c05      	ldr	r4, [pc, #20]	; (8005d80 <ReadFromEprom+0x24>)
 8005d6a:	8020      	strh	r0, [r4, #0]
	Status1 = EE_Read(AdrRetractDuration, &RetractDuration);
 8005d6c:	4905      	ldr	r1, [pc, #20]	; (8005d84 <ReadFromEprom+0x28>)
 8005d6e:	f242 2022 	movw	r0, #8738	; 0x2222
 8005d72:	f7fb fba7 	bl	80014c4 <EE_Read>
 8005d76:	8020      	strh	r0, [r4, #0]
}
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000074 	.word	0x20000074
 8005d80:	200004ae 	.word	0x200004ae
 8005d84:	20000072 	.word	0x20000072

08005d88 <RestoreFromEprom>:

//Restore variables from EPROM after start if exist, otherwise save default values to EPROM
void RestoreFromEprom()
{
 8005d88:	b508      	push	{r3, lr}
	  /* EEPROM Init */
	  EE_Init();
 8005d8a:	f7fb faeb 	bl	8001364 <EE_Init>
	  ReadFromEprom();
 8005d8e:	f7ff ffe5 	bl	8005d5c <ReadFromEprom>
	  if(SpeedMode == EEPROM_DEFAULT_DATA)
 8005d92:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <RestoreFromEprom+0x44>)
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d006      	beq.n	8005dac <RestoreFromEprom+0x24>
		  { SpeedMode=5; EE_Write(AdrSpeedMode, SpeedMode);}
	  if(RetractDuration == EEPROM_DEFAULT_DATA)
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <RestoreFromEprom+0x48>)
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d008      	beq.n	8005dbc <RestoreFromEprom+0x34>
		  {RetractDuration=5; EE_Write(AdrRetractDuration, RetractDuration);}
}
 8005daa:	bd08      	pop	{r3, pc}
		  { SpeedMode=5; EE_Write(AdrSpeedMode, SpeedMode);}
 8005dac:	2105      	movs	r1, #5
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <RestoreFromEprom+0x44>)
 8005db0:	8019      	strh	r1, [r3, #0]
 8005db2:	f241 1011 	movw	r0, #4369	; 0x1111
 8005db6:	f7fb fc35 	bl	8001624 <EE_Write>
 8005dba:	e7f0      	b.n	8005d9e <RestoreFromEprom+0x16>
		  {RetractDuration=5; EE_Write(AdrRetractDuration, RetractDuration);}
 8005dbc:	2105      	movs	r1, #5
 8005dbe:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <RestoreFromEprom+0x48>)
 8005dc0:	8019      	strh	r1, [r3, #0]
 8005dc2:	f242 2022 	movw	r0, #8738	; 0x2222
 8005dc6:	f7fb fc2d 	bl	8001624 <EE_Write>
}
 8005dca:	e7ee      	b.n	8005daa <RestoreFromEprom+0x22>
 8005dcc:	20000074 	.word	0x20000074
 8005dd0:	20000072 	.word	0x20000072

08005dd4 <InitTimers>:
/* The number of user timers is limited by the parent interrupt period.
   Optimally do not exceed 5% of the interruption period for operating
   the number of timers. */
void InitTimers()
{
	Timers[OneSec].Time = 1000; //Uses the named Timer in the timers field this is OneSec Timer
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <InitTimers+0x30>)
 8005dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dda:	801a      	strh	r2, [r3, #0]
	Timers[OneSec].Tick = 1000;
 8005ddc:	805a      	strh	r2, [r3, #2]
	Timers[OneSec].Flag.Reload = 1;
 8005dde:	791a      	ldrb	r2, [r3, #4]
 8005de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de4:	711a      	strb	r2, [r3, #4]
	Timers[Milis350].Time = 150; //Uses the named Timer in the timers field this is OneSec Timer
 8005de6:	2296      	movs	r2, #150	; 0x96
 8005de8:	80da      	strh	r2, [r3, #6]
	Timers[Milis350].Tick = 150;
 8005dea:	811a      	strh	r2, [r3, #8]
	Timers[Milis350].Flag.Reload = 1;
 8005dec:	7a9a      	ldrb	r2, [r3, #10]
 8005dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df2:	729a      	strb	r2, [r3, #10]
	Timers[Milis40].Time = 40;//Uses the named Timer in the timers field this is Milis40 Timer
 8005df4:	2228      	movs	r2, #40	; 0x28
 8005df6:	819a      	strh	r2, [r3, #12]
	Timers[Milis40].Tick = 40;
 8005df8:	81da      	strh	r2, [r3, #14]
	Timers[Milis40].Flag.Reload = 1;
 8005dfa:	7c1a      	ldrb	r2, [r3, #16]
 8005dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e00:	741a      	strb	r2, [r3, #16]
}
 8005e02:	4770      	bx	lr
 8005e04:	2000049c 	.word	0x2000049c

08005e08 <TimerAction>:
/* Is called ideally in SysTick_Handler interrupt set to 1ms,
   but it can also be called by another periodic routine with a different period.
   Then it is necessary to set the correct value "Time" and "Tick" in "InitTimers()" */
void TimerAction(void)
{
	for(uint8_t i=0;i<(CountTimers);i++) //number of Timers is correct for this code implementation C
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d849      	bhi.n	8005ea2 <TimerAction+0x9a>
{
 8005e0e:	b410      	push	{r4}
 8005e10:	e01e      	b.n	8005e50 <TimerAction+0x48>
	{
	   if(Timers[i].Time==0) continue;  //Time = 0 -> Timer is OFF
	   if(--Timers[i].Tick>0) continue;

	   if(Timers[i].Flag.Reload) Timers[i].Tick = Timers[i].Time; //reload timer count end refresh value
	   else Timers[i].Time=0; // Timer OFF
 8005e12:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005e16:	0042      	lsls	r2, r0, #1
 8005e18:	4822      	ldr	r0, [pc, #136]	; (8005ea4 <TimerAction+0x9c>)
 8005e1a:	2400      	movs	r4, #0
 8005e1c:	5284      	strh	r4, [r0, r2]

	   Timers[i].Flag.Over = 1; //Set Over
 8005e1e:	4821      	ldr	r0, [pc, #132]	; (8005ea4 <TimerAction+0x9c>)
 8005e20:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8005e24:	0062      	lsls	r2, r4, #1
 8005e26:	4402      	add	r2, r0
 8005e28:	7914      	ldrb	r4, [r2, #4]
 8005e2a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8005e2e:	7114      	strb	r4, [r2, #4]
	   Timers[i].Flag.OverCount++; //INC OverCount
 8005e30:	7914      	ldrb	r4, [r2, #4]
 8005e32:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8005e36:	3401      	adds	r4, #1
 8005e38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e3c:	004a      	lsls	r2, r1, #1
 8005e3e:	4402      	add	r2, r0
 8005e40:	7911      	ldrb	r1, [r2, #4]
 8005e42:	f364 0105 	bfi	r1, r4, #0, #6
 8005e46:	7111      	strb	r1, [r2, #4]
	for(uint8_t i=0;i<(CountTimers);i++) //number of Timers is correct for this code implementation C
 8005e48:	3301      	adds	r3, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d826      	bhi.n	8005e9e <TimerAction+0x96>
	   if(Timers[i].Time==0) continue;  //Time = 0 -> Timer is OFF
 8005e50:	4619      	mov	r1, r3
 8005e52:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005e56:	0042      	lsls	r2, r0, #1
 8005e58:	4812      	ldr	r0, [pc, #72]	; (8005ea4 <TimerAction+0x9c>)
 8005e5a:	5a82      	ldrh	r2, [r0, r2]
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d0f2      	beq.n	8005e48 <TimerAction+0x40>
	   if(--Timers[i].Tick>0) continue;
 8005e62:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005e66:	0042      	lsls	r2, r0, #1
 8005e68:	480e      	ldr	r0, [pc, #56]	; (8005ea4 <TimerAction+0x9c>)
 8005e6a:	4410      	add	r0, r2
 8005e6c:	8842      	ldrh	r2, [r0, #2]
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	3a01      	subs	r2, #1
 8005e72:	b292      	uxth	r2, r2
 8005e74:	8042      	strh	r2, [r0, #2]
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d1e6      	bne.n	8005e48 <TimerAction+0x40>
	   if(Timers[i].Flag.Reload) Timers[i].Tick = Timers[i].Time; //reload timer count end refresh value
 8005e7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005e7e:	0050      	lsls	r0, r2, #1
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <TimerAction+0x9c>)
 8005e82:	4402      	add	r2, r0
 8005e84:	7912      	ldrb	r2, [r2, #4]
 8005e86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e8a:	d0c2      	beq.n	8005e12 <TimerAction+0xa>
 8005e8c:	4805      	ldr	r0, [pc, #20]	; (8005ea4 <TimerAction+0x9c>)
 8005e8e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8005e92:	0062      	lsls	r2, r4, #1
 8005e94:	1884      	adds	r4, r0, r2
 8005e96:	5a82      	ldrh	r2, [r0, r2]
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	8062      	strh	r2, [r4, #2]
 8005e9c:	e7bf      	b.n	8005e1e <TimerAction+0x16>
	}
}
 8005e9e:	bc10      	pop	{r4}
 8005ea0:	4770      	bx	lr
 8005ea2:	4770      	bx	lr
 8005ea4:	2000049c 	.word	0x2000049c

08005ea8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  I2C_DMA_Completed = 1;
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <HAL_I2C_MemTxCpltCallback+0x8>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005eae:	4770      	bx	lr
 8005eb0:	20000070 	.word	0x20000070

08005eb4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	uint32_t Error = hi2c->ErrorCode;
 8005eb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005eb6:	4770      	bx	lr

08005eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005eb8:	b530      	push	{r4, r5, lr}
 8005eba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	940d      	str	r4, [sp, #52]	; 0x34
 8005ec0:	940f      	str	r4, [sp, #60]	; 0x3c
 8005ec2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ec4:	9405      	str	r4, [sp, #20]
 8005ec6:	9406      	str	r4, [sp, #24]
 8005ec8:	9407      	str	r4, [sp, #28]
 8005eca:	9408      	str	r4, [sp, #32]
 8005ecc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ece:	9401      	str	r4, [sp, #4]
 8005ed0:	9402      	str	r4, [sp, #8]
 8005ed2:	9403      	str	r4, [sp, #12]
 8005ed4:	9404      	str	r4, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ede:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8005ee0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8005ee4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ee6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ee8:	2502      	movs	r5, #2
 8005eea:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005eec:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ef2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ef4:	a80a      	add	r0, sp, #40	; 0x28
 8005ef6:	f7fe fc9f 	bl	8004838 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005efa:	230f      	movs	r3, #15
 8005efc:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005efe:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f00:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f06:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f08:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	a805      	add	r0, sp, #20
 8005f0e:	f7fe fed7 	bl	8004cc0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005f12:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f18:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f1a:	a801      	add	r0, sp, #4
 8005f1c:	f7fe ffac 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005f20:	b015      	add	sp, #84	; 0x54
 8005f22:	bd30      	pop	{r4, r5, pc}

08005f24 <main>:
{
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b083      	sub	sp, #12
  HAL_Init();
 8005f28:	f7fc f944 	bl	80021b4 <HAL_Init>
  SystemClock_Config();
 8005f2c:	f7ff ffc4 	bl	8005eb8 <SystemClock_Config>
  MX_GPIO_Init();
 8005f30:	f7ff fdda 	bl	8005ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005f34:	f7ff fdb6 	bl	8005aa4 <MX_DMA_Init>
  MX_ADC1_Init();
 8005f38:	f7ff fd14 	bl	8005964 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005f3c:	f7ff fe36 	bl	8005bac <MX_I2C1_Init>
  MX_TIM1_Init();
 8005f40:	f000 fbae 	bl	80066a0 <MX_TIM1_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8005f44:	2201      	movs	r2, #1
 8005f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f4a:	4890      	ldr	r0, [pc, #576]	; (800618c <main+0x268>)
 8005f4c:	f7fc ffca 	bl	8002ee4 <HAL_GPIO_WritePin>
  m_MX_TIM3_Init();
 8005f50:	f000 fad2 	bl	80064f8 <m_MX_TIM3_Init>
  InitTimers();
 8005f54:	f7ff ff3e 	bl	8005dd4 <InitTimers>
  meas_Init();
 8005f58:	f7fb fe98 	bl	8001c8c <meas_Init>
  bbb_Init();
 8005f5c:	f7fb fb7e 	bl	800165c <bbb_Init>
  SSD1306_Init();  // initialise
 8005f60:	f7fc f85e 	bl	8002020 <SSD1306_Init>
  RestoreFromEprom();
 8005f64:	f7ff ff10 	bl	8005d88 <RestoreFromEprom>
  disp_DrawInitScreen();
 8005f68:	f7fb fcd6 	bl	8001918 <disp_DrawInitScreen>
	  printf("Set Speed 29.6%%\n");
 8005f6c:	4888      	ldr	r0, [pc, #544]	; (8006190 <main+0x26c>)
 8005f6e:	f000 fc83 	bl	8006878 <iprintf>
  HAL_Delay(200);
 8005f72:	20c8      	movs	r0, #200	; 0xc8
 8005f74:	f7fc f942 	bl	80021fc <HAL_Delay>
  bbb_Melody4(bbb_ToneTd_Low, bbb_ToneTd_Med, bbb_ToneTd_High,bbb_ToneTd_VeryHigh, 2*BEEPDUR);
 8005f78:	2364      	movs	r3, #100	; 0x64
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	2203      	movs	r2, #3
 8005f80:	2102      	movs	r1, #2
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7fb fc68 	bl	8001858 <bbb_Melody4>
  bbb_WaitSync(900);
 8005f88:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005f8c:	f7fb fc1e 	bl	80017cc <bbb_WaitSync>
	  printf("Melody\n");
 8005f90:	4880      	ldr	r0, [pc, #512]	; (8006194 <main+0x270>)
 8005f92:	f000 fcf7 	bl	8006984 <puts>
	uint32_t ConfigWindowTimestamp = 0;
 8005f96:	2400      	movs	r4, #0
		HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
 8005f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f9c:	487e      	ldr	r0, [pc, #504]	; (8006198 <main+0x274>)
 8005f9e:	f7fc ffa7 	bl	8002ef0 <HAL_GPIO_TogglePin>
		if(Timers[Milis350].Flag.Over){
 8005fa2:	4b7e      	ldr	r3, [pc, #504]	; (800619c <main+0x278>)
 8005fa4:	7a9b      	ldrb	r3, [r3, #10]
 8005fa6:	09db      	lsrs	r3, r3, #7
 8005fa8:	d13d      	bne.n	8006026 <main+0x102>
		if(Timers[Milis40].Flag.Over) {
 8005faa:	4b7c      	ldr	r3, [pc, #496]	; (800619c <main+0x278>)
 8005fac:	7c1b      	ldrb	r3, [r3, #16]
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	d144      	bne.n	800603c <main+0x118>
		if(Speed==0)//Motor off, measure IM not need, but VBat+CPUTemp is need start manually
 8005fb2:	4b7b      	ldr	r3, [pc, #492]	; (80061a0 <main+0x27c>)
 8005fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d04a      	beq.n	8006052 <main+0x12e>
		if(CountMeasure>=AVGLOOPMAX) // calculate all thermo an print them
 8005fbc:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <main+0x280>)
 8005fbe:	7818      	ldrb	r0, [r3, #0]
 8005fc0:	2809      	cmp	r0, #9
 8005fc2:	d919      	bls.n	8005ff8 <main+0xd4>
			VBat = AvVBat/CountMeasure;
 8005fc4:	f7fa fdda 	bl	8000b7c <__aeabi_i2f>
 8005fc8:	4605      	mov	r5, r0
 8005fca:	4f77      	ldr	r7, [pc, #476]	; (80061a8 <main+0x284>)
 8005fcc:	4601      	mov	r1, r0
 8005fce:	6838      	ldr	r0, [r7, #0]
 8005fd0:	f7fa fedc 	bl	8000d8c <__aeabi_fdiv>
 8005fd4:	4b75      	ldr	r3, [pc, #468]	; (80061ac <main+0x288>)
 8005fd6:	6018      	str	r0, [r3, #0]
			Temp = AvTemp/CountMeasure;
 8005fd8:	4e75      	ldr	r6, [pc, #468]	; (80061b0 <main+0x28c>)
 8005fda:	4629      	mov	r1, r5
 8005fdc:	6830      	ldr	r0, [r6, #0]
 8005fde:	f7fa fed5 	bl	8000d8c <__aeabi_fdiv>
 8005fe2:	4b74      	ldr	r3, [pc, #464]	; (80061b4 <main+0x290>)
 8005fe4:	6018      	str	r0, [r3, #0]
			CountMeasure = 0;
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <main+0x280>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
			RedrawRequested=1; AvVBat=0;AvTemp=0;
 8005fec:	4b72      	ldr	r3, [pc, #456]	; (80061b8 <main+0x294>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	603b      	str	r3, [r7, #0]
 8005ff6:	6033      	str	r3, [r6, #0]
		if(RedrawRequested && I2C_DMA_Completed){
 8005ff8:	4b6f      	ldr	r3, [pc, #444]	; (80061b8 <main+0x294>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b113      	cbz	r3, 8006004 <main+0xe0>
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	; (80061bc <main+0x298>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	bb63      	cbnz	r3, 800605e <main+0x13a>
		  if(bbb_Update()){																	//Check whether any button has been pressed or released
 8006004:	f7fb fb2c 	bl	8001660 <bbb_Update>
 8006008:	2800      	cmp	r0, #0
 800600a:	d150      	bne.n	80060ae <main+0x18a>
		  if(ConfigWindowTimestamp && HAL_GetTick() > ConfigWindowTimestamp){
 800600c:	2c00      	cmp	r4, #0
 800600e:	d0c3      	beq.n	8005f98 <main+0x74>
 8006010:	f7fc f8ee 	bl	80021f0 <HAL_GetTick>
 8006014:	42a0      	cmp	r0, r4
 8006016:	d9bf      	bls.n	8005f98 <main+0x74>
			  CfgMode = disp_CfgModeTd_None;
 8006018:	2400      	movs	r4, #0
 800601a:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <main+0x29c>)
 800601c:	701c      	strb	r4, [r3, #0]
			  RedrawRequested = 1;
 800601e:	4b66      	ldr	r3, [pc, #408]	; (80061b8 <main+0x294>)
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e7b8      	b.n	8005f98 <main+0x74>
			Timers[Milis350].Flag.Over = 0; //ReSet Over
 8006026:	4a5d      	ldr	r2, [pc, #372]	; (800619c <main+0x278>)
 8006028:	7a93      	ldrb	r3, [r2, #10]
 800602a:	f36f 13c7 	bfc	r3, #7, #1
 800602e:	7293      	strb	r3, [r2, #10]
			HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8006030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006034:	4855      	ldr	r0, [pc, #340]	; (800618c <main+0x268>)
 8006036:	f7fc ff5b 	bl	8002ef0 <HAL_GPIO_TogglePin>
 800603a:	e7b6      	b.n	8005faa <main+0x86>
			Timers[Milis40].Flag.Over = 0; //ReSet Over
 800603c:	4a57      	ldr	r2, [pc, #348]	; (800619c <main+0x278>)
 800603e:	7c13      	ldrb	r3, [r2, #16]
 8006040:	f36f 13c7 	bfc	r3, #7, #1
 8006044:	7413      	strb	r3, [r2, #16]
			HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
 8006046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800604a:	4853      	ldr	r0, [pc, #332]	; (8006198 <main+0x274>)
 800604c:	f7fc ff50 	bl	8002ef0 <HAL_GPIO_TogglePin>
 8006050:	e7af      	b.n	8005fb2 <main+0x8e>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCBuffer[0], (uint32_t)ADCCHANNELS);
 8006052:	2203      	movs	r2, #3
 8006054:	495b      	ldr	r1, [pc, #364]	; (80061c4 <main+0x2a0>)
 8006056:	485c      	ldr	r0, [pc, #368]	; (80061c8 <main+0x2a4>)
 8006058:	f7fc fa88 	bl	800256c <HAL_ADC_Start_DMA>
 800605c:	e7ae      	b.n	8005fbc <main+0x98>
			I2C_DMA_Completed = 0;
 800605e:	2500      	movs	r5, #0
 8006060:	4b56      	ldr	r3, [pc, #344]	; (80061bc <main+0x298>)
 8006062:	701d      	strb	r5, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,TEST1_Pin,GPIO_PIN_SET);
 8006064:	4e4c      	ldr	r6, [pc, #304]	; (8006198 <main+0x274>)
 8006066:	2201      	movs	r2, #1
 8006068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800606c:	4630      	mov	r0, r6
 800606e:	f7fc ff39 	bl	8002ee4 <HAL_GPIO_WritePin>
		    disp_DrawScreen(CfgMode, SpeedModeDesc[SpeedMode], RetractDurationDesc[RetractDuration], VBat, 0, Temp);
 8006072:	4b56      	ldr	r3, [pc, #344]	; (80061cc <main+0x2a8>)
 8006074:	8819      	ldrh	r1, [r3, #0]
 8006076:	4b56      	ldr	r3, [pc, #344]	; (80061d0 <main+0x2ac>)
 8006078:	8818      	ldrh	r0, [r3, #0]
 800607a:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <main+0x290>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	2300      	movs	r3, #0
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4b49      	ldr	r3, [pc, #292]	; (80061ac <main+0x288>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a52      	ldr	r2, [pc, #328]	; (80061d4 <main+0x2b0>)
 800608a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800608e:	4952      	ldr	r1, [pc, #328]	; (80061d8 <main+0x2b4>)
 8006090:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006094:	484a      	ldr	r0, [pc, #296]	; (80061c0 <main+0x29c>)
 8006096:	7800      	ldrb	r0, [r0, #0]
 8006098:	f7fb fd60 	bl	8001b5c <disp_DrawScreen>
		    HAL_GPIO_WritePin(GPIOA,TEST1_Pin,GPIO_PIN_RESET);
 800609c:	462a      	mov	r2, r5
 800609e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7fc ff1e 	bl	8002ee4 <HAL_GPIO_WritePin>
		  RedrawRequested = 0;
 80060a8:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <main+0x294>)
 80060aa:	701d      	strb	r5, [r3, #0]
 80060ac:	e7aa      	b.n	8006004 <main+0xe0>
			  PushBtn = bbb_GetPushBtnState();
 80060ae:	f7fb fb81 	bl	80017b4 <bbb_GetPushBtnState>
 80060b2:	4b4a      	ldr	r3, [pc, #296]	; (80061dc <main+0x2b8>)
 80060b4:	6018      	str	r0, [r3, #0]
			  PullBtn = bbb_GetPullBtnState();
 80060b6:	f7fb fb81 	bl	80017bc <bbb_GetPullBtnState>
 80060ba:	4b49      	ldr	r3, [pc, #292]	; (80061e0 <main+0x2bc>)
 80060bc:	6018      	str	r0, [r3, #0]
			  CfgBtn = bbb_GetCfgBtnState();
 80060be:	f7fb fb81 	bl	80017c4 <bbb_GetCfgBtnState>
 80060c2:	4b48      	ldr	r3, [pc, #288]	; (80061e4 <main+0x2c0>)
 80060c4:	6018      	str	r0, [r3, #0]
			  if(CfgMode == disp_CfgModeTd_None){											//NORMAL PUSH/PULL OPERATION
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <main+0x29c>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 809a 	bne.w	8006204 <main+0x2e0>
				  if(PushBtn->PrevBtnEvt == bbb_EvtTd_Pressed){
 80060d0:	4b42      	ldr	r3, [pc, #264]	; (80061dc <main+0x2b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d014      	beq.n	8006106 <main+0x1e2>
				  else if(PushBtn->PrevBtnEvt == bbb_EvtTd_Released || PushBtn->PrevBtnEvt == bbb_EvtTd_LongReleased){
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d030      	beq.n	8006142 <main+0x21e>
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	d02e      	beq.n	8006142 <main+0x21e>
				  if(PullBtn->PrevBtnEvt == bbb_EvtTd_Pressed){								//When pull button is pressed start motor in reverse max speed
 80060e4:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <main+0x2bc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d041      	beq.n	8006174 <main+0x250>
				  else if(PullBtn->PrevBtnEvt == bbb_EvtTd_Released || PullBtn->PrevBtnEvt == bbb_EvtTd_LongReleased){						//When the button is released
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d002      	beq.n	80060fa <main+0x1d6>
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	f040 80a7 	bne.w	8006248 <main+0x324>
					  mo_SetSpeed(PWMPulse(0));
 80060fa:	2000      	movs	r0, #0
 80060fc:	f000 f9e2 	bl	80064c4 <PWMPulse>
 8006100:	f7fb fe3c 	bl	8001d7c <mo_SetSpeed>
 8006104:	e0a0      	b.n	8006248 <main+0x324>
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8006106:	2000      	movs	r0, #0
 8006108:	f000 f9dc 	bl	80064c4 <PWMPulse>
 800610c:	f7fb fe36 	bl	8001d7c <mo_SetSpeed>
					  mo_SetSpeed(PWMPulse(99.9));														//Start push with max speed to null the retraction effect
 8006110:	4835      	ldr	r0, [pc, #212]	; (80061e8 <main+0x2c4>)
 8006112:	f000 f9d7 	bl	80064c4 <PWMPulse>
 8006116:	f7fb fe31 	bl	8001d7c <mo_SetSpeed>
					  bbb_WaitSyncCond(RetractDurationList[RetractDuration], StopWaitingDueToPushBtnRelease);
 800611a:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <main+0x2a8>)
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	4933      	ldr	r1, [pc, #204]	; (80061ec <main+0x2c8>)
 8006120:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <main+0x2cc>)
 8006122:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006126:	f7fb fb5b 	bl	80017e0 <bbb_WaitSyncCond>
					  mo_SetSpeed(PWMPulse(SpeedModeList[SpeedMode]));								//Set speed according to settings
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <main+0x2ac>)
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <main+0x2d0>)
 8006130:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006134:	f7fa fd1e 	bl	8000b74 <__aeabi_ui2f>
 8006138:	f000 f9c4 	bl	80064c4 <PWMPulse>
 800613c:	f7fb fe1e 	bl	8001d7c <mo_SetSpeed>
 8006140:	e7d0      	b.n	80060e4 <main+0x1c0>
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8006142:	2500      	movs	r5, #0
 8006144:	4628      	mov	r0, r5
 8006146:	f000 f9bd 	bl	80064c4 <PWMPulse>
 800614a:	f7fb fe17 	bl	8001d7c <mo_SetSpeed>
					  mo_SetSpeed(PWMPulse(-99.9));													//Retract
 800614e:	482a      	ldr	r0, [pc, #168]	; (80061f8 <main+0x2d4>)
 8006150:	f000 f9b8 	bl	80064c4 <PWMPulse>
 8006154:	f7fb fe12 	bl	8001d7c <mo_SetSpeed>
					  bbb_WaitSyncCond(RetractDurationList[RetractDuration], StopWaitingDueToAnyBtnPressed);
 8006158:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <main+0x2a8>)
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	4927      	ldr	r1, [pc, #156]	; (80061fc <main+0x2d8>)
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <main+0x2cc>)
 8006160:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006164:	f7fb fb3c 	bl	80017e0 <bbb_WaitSyncCond>
					  mo_SetSpeed(PWMPulse(0));
 8006168:	4628      	mov	r0, r5
 800616a:	f000 f9ab 	bl	80064c4 <PWMPulse>
 800616e:	f7fb fe05 	bl	8001d7c <mo_SetSpeed>
 8006172:	e7b7      	b.n	80060e4 <main+0x1c0>
					  mo_SetSpeed(PWMPulse(-99.9));
 8006174:	4820      	ldr	r0, [pc, #128]	; (80061f8 <main+0x2d4>)
 8006176:	f000 f9a5 	bl	80064c4 <PWMPulse>
 800617a:	f7fb fdff 	bl	8001d7c <mo_SetSpeed>
					  bbb_WaitSyncCond(UINT16_MAX, StopWaitingDueToPullBtnRelease);
 800617e:	4920      	ldr	r1, [pc, #128]	; (8006200 <main+0x2dc>)
 8006180:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006184:	f7fb fb2c 	bl	80017e0 <bbb_WaitSyncCond>
 8006188:	e05e      	b.n	8006248 <main+0x324>
 800618a:	bf00      	nop
 800618c:	40011000 	.word	0x40011000
 8006190:	080080f4 	.word	0x080080f4
 8006194:	08008108 	.word	0x08008108
 8006198:	40010800 	.word	0x40010800
 800619c:	2000049c 	.word	0x2000049c
 80061a0:	20000388 	.word	0x20000388
 80061a4:	20000108 	.word	0x20000108
 80061a8:	20000104 	.word	0x20000104
 80061ac:	20000378 	.word	0x20000378
 80061b0:	20000100 	.word	0x20000100
 80061b4:	20000374 	.word	0x20000374
 80061b8:	20000071 	.word	0x20000071
 80061bc:	20000070 	.word	0x20000070
 80061c0:	20000314 	.word	0x20000314
 80061c4:	2000037c 	.word	0x2000037c
 80061c8:	20000390 	.word	0x20000390
 80061cc:	20000072 	.word	0x20000072
 80061d0:	20000074 	.word	0x20000074
 80061d4:	0800817c 	.word	0x0800817c
 80061d8:	080081b4 	.word	0x080081b4
 80061dc:	200004bc 	.word	0x200004bc
 80061e0:	200004b8 	.word	0x200004b8
 80061e4:	200004b0 	.word	0x200004b0
 80061e8:	42c7cccd 	.word	0x42c7cccd
 80061ec:	08005c95 	.word	0x08005c95
 80061f0:	080081a0 	.word	0x080081a0
 80061f4:	080081d8 	.word	0x080081d8
 80061f8:	c2c7cccd 	.word	0xc2c7cccd
 80061fc:	08005cd5 	.word	0x08005cd5
 8006200:	08005cb5 	.word	0x08005cb5
				  if(PushBtn->PrevBtnEvt == bbb_EvtTd_Released){
 8006204:	4b55      	ldr	r3, [pc, #340]	; (800635c <main+0x438>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d043      	beq.n	8006298 <main+0x374>
				  if(PullBtn->PrevBtnEvt == bbb_EvtTd_Released){//When the button is released
 8006210:	4b53      	ldr	r3, [pc, #332]	; (8006360 <main+0x43c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d064      	beq.n	80062e6 <main+0x3c2>
				  UT_SATURATE(RetractDuration, 0, (uint16_t)(UT_SIZEOFARRAY(RetractDurationList)-1));
 800621c:	4b51      	ldr	r3, [pc, #324]	; (8006364 <main+0x440>)
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d902      	bls.n	800622a <main+0x306>
 8006224:	4b4f      	ldr	r3, [pc, #316]	; (8006364 <main+0x440>)
 8006226:	2208      	movs	r2, #8
 8006228:	801a      	strh	r2, [r3, #0]
				  UT_SATURATE(SpeedMode, 0, (uint16_t)(UT_SIZEOFARRAY(SpeedModeList)-1));
 800622a:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <main+0x444>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	2b08      	cmp	r3, #8
 8006230:	d902      	bls.n	8006238 <main+0x314>
 8006232:	4b4d      	ldr	r3, [pc, #308]	; (8006368 <main+0x444>)
 8006234:	2208      	movs	r2, #8
 8006236:	801a      	strh	r2, [r3, #0]
				  if(SpeedModeChange) {
 8006238:	4b4c      	ldr	r3, [pc, #304]	; (800636c <main+0x448>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d179      	bne.n	8006334 <main+0x410>
				  if(RetractDurationChange) {
 8006240:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <main+0x44c>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d17f      	bne.n	8006348 <main+0x424>
			  if(CfgBtn->PrevBtnEvt == bbb_EvtTd_Released){									//Config button always stops all movements and changes cfg mode
 8006248:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <main+0x450>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8006250:	2b02      	cmp	r3, #2
 8006252:	f47f aedb 	bne.w	800600c <main+0xe8>
				  bbb_Beep(bbb_ToneTd_Low, 2*BEEPDUR);
 8006256:	2164      	movs	r1, #100	; 0x64
 8006258:	2001      	movs	r0, #1
 800625a:	f7fb fad1 	bl	8001800 <bbb_Beep>
				  CfgMode += 1;
 800625e:	4a46      	ldr	r2, [pc, #280]	; (8006378 <main+0x454>)
 8006260:	7813      	ldrb	r3, [r2, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	7013      	strb	r3, [r2, #0]
				  if(CfgMode > disp_CfgModeTd_Ret) CfgMode = disp_CfgModeTd_None;
 8006268:	2b02      	cmp	r3, #2
 800626a:	d902      	bls.n	8006272 <main+0x34e>
 800626c:	4613      	mov	r3, r2
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
				  mo_SetSpeed(PWMPulse(0));													//Stop
 8006272:	2500      	movs	r5, #0
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f925 	bl	80064c4 <PWMPulse>
 800627a:	f7fb fd7f 	bl	8001d7c <mo_SetSpeed>
				  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 800627e:	f7fb ffb7 	bl	80021f0 <HAL_GetTick>
 8006282:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
				  RedrawRequested = 1;
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <main+0x458>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
				  mo_SetSpeed(PWMPulse(0));														//Stop
 800628c:	4628      	mov	r0, r5
 800628e:	f000 f919 	bl	80064c4 <PWMPulse>
 8006292:	f7fb fd73 	bl	8001d7c <mo_SetSpeed>
 8006296:	e6b9      	b.n	800600c <main+0xe8>
					  bbb_Beep(bbb_ToneTd_Low, 2*BEEPDUR);
 8006298:	2164      	movs	r1, #100	; 0x64
 800629a:	2001      	movs	r0, #1
 800629c:	f7fb fab0 	bl	8001800 <bbb_Beep>
					  if(CfgMode == disp_CfgModeTd_Ret){
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <main+0x454>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d00e      	beq.n	80062c6 <main+0x3a2>
					  else if(CfgMode == disp_CfgModeTd_Speed){
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d014      	beq.n	80062d6 <main+0x3b2>
					  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 80062ac:	f7fb ffa0 	bl	80021f0 <HAL_GetTick>
 80062b0:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
					  RedrawRequested = 1;
 80062b4:	4b31      	ldr	r3, [pc, #196]	; (800637c <main+0x458>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
					  mo_SetSpeed(PWMPulse(0));														//Stop
 80062ba:	2000      	movs	r0, #0
 80062bc:	f000 f902 	bl	80064c4 <PWMPulse>
 80062c0:	f7fb fd5c 	bl	8001d7c <mo_SetSpeed>
 80062c4:	e7a4      	b.n	8006210 <main+0x2ec>
						  RetractDuration++; RetractDurationChange = true;
 80062c6:	4a27      	ldr	r2, [pc, #156]	; (8006364 <main+0x440>)
 80062c8:	8813      	ldrh	r3, [r2, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	8013      	strh	r3, [r2, #0]
 80062ce:	4b28      	ldr	r3, [pc, #160]	; (8006370 <main+0x44c>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e7ea      	b.n	80062ac <main+0x388>
						  SpeedMode++; SpeedModeChange = true;
 80062d6:	4a24      	ldr	r2, [pc, #144]	; (8006368 <main+0x444>)
 80062d8:	8813      	ldrh	r3, [r2, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	8013      	strh	r3, [r2, #0]
 80062de:	4b23      	ldr	r3, [pc, #140]	; (800636c <main+0x448>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e7e2      	b.n	80062ac <main+0x388>
					  bbb_Beep(bbb_ToneTd_Low, 2*BEEPDUR);
 80062e6:	2164      	movs	r1, #100	; 0x64
 80062e8:	2001      	movs	r0, #1
 80062ea:	f7fb fa89 	bl	8001800 <bbb_Beep>
					  if(CfgMode == disp_CfgModeTd_Ret){
 80062ee:	4b22      	ldr	r3, [pc, #136]	; (8006378 <main+0x454>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d00e      	beq.n	8006314 <main+0x3f0>
					  else if(CfgMode == disp_CfgModeTd_Speed){
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d014      	beq.n	8006324 <main+0x400>
					  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 80062fa:	f7fb ff79 	bl	80021f0 <HAL_GetTick>
 80062fe:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
					  RedrawRequested = 1;
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <main+0x458>)
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8006308:	2000      	movs	r0, #0
 800630a:	f000 f8db 	bl	80064c4 <PWMPulse>
 800630e:	f7fb fd35 	bl	8001d7c <mo_SetSpeed>
 8006312:	e783      	b.n	800621c <main+0x2f8>
						  RetractDuration--; RetractDurationChange = true;
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <main+0x440>)
 8006316:	8813      	ldrh	r3, [r2, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	8013      	strh	r3, [r2, #0]
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <main+0x44c>)
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e7ea      	b.n	80062fa <main+0x3d6>
						  SpeedMode--; SpeedModeChange = true;
 8006324:	4a10      	ldr	r2, [pc, #64]	; (8006368 <main+0x444>)
 8006326:	8813      	ldrh	r3, [r2, #0]
 8006328:	3b01      	subs	r3, #1
 800632a:	8013      	strh	r3, [r2, #0]
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <main+0x448>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e7e2      	b.n	80062fa <main+0x3d6>
					  SpeedModeChange = false; EE_Write(AdrSpeedMode, SpeedMode);}
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <main+0x448>)
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <main+0x444>)
 800633c:	8819      	ldrh	r1, [r3, #0]
 800633e:	f241 1011 	movw	r0, #4369	; 0x1111
 8006342:	f7fb f96f 	bl	8001624 <EE_Write>
 8006346:	e77b      	b.n	8006240 <main+0x31c>
					  RetractDurationChange = false; EE_Write(AdrRetractDuration, RetractDuration);}
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <main+0x44c>)
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <main+0x440>)
 8006350:	8819      	ldrh	r1, [r3, #0]
 8006352:	f242 2022 	movw	r0, #8738	; 0x2222
 8006356:	f7fb f965 	bl	8001624 <EE_Write>
 800635a:	e775      	b.n	8006248 <main+0x324>
 800635c:	200004bc 	.word	0x200004bc
 8006360:	200004b8 	.word	0x200004b8
 8006364:	20000072 	.word	0x20000072
 8006368:	20000074 	.word	0x20000074
 800636c:	20000316 	.word	0x20000316
 8006370:	20000315 	.word	0x20000315
 8006374:	200004b0 	.word	0x200004b0
 8006378:	20000314 	.word	0x20000314
 800637c:	20000071 	.word	0x20000071

08006380 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006380:	4770      	bx	lr
	...

08006384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006384:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006386:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <HAL_MspInit+0x3c>)
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	619a      	str	r2, [r3, #24]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	f002 0201 	and.w	r2, r2, #1
 8006396:	9200      	str	r2, [sp, #0]
 8006398:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063a0:	61da      	str	r2, [r3, #28]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063ac:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <HAL_MspInit+0x40>)
 80063ae:	6853      	ldr	r3, [r2, #4]
 80063b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80063b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063ba:	b002      	add	sp, #8
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40010000 	.word	0x40010000

080063c8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063c8:	4770      	bx	lr

080063ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ca:	e7fe      	b.n	80063ca <HardFault_Handler>

080063cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063cc:	e7fe      	b.n	80063cc <MemManage_Handler>

080063ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063ce:	e7fe      	b.n	80063ce <BusFault_Handler>

080063d0 <UsageFault_Handler>:
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063d0:	e7fe      	b.n	80063d0 <UsageFault_Handler>

080063d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063d2:	4770      	bx	lr

080063d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063d4:	4770      	bx	lr

080063d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063d6:	4770      	bx	lr

080063d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	TimerAction();
 80063da:	f7ff fd15 	bl	8005e08 <TimerAction>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063de:	f7fb fefb 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063e2:	bd08      	pop	{r3, pc}

080063e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80063e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80063e6:	4802      	ldr	r0, [pc, #8]	; (80063f0 <DMA1_Channel1_IRQHandler+0xc>)
 80063e8:	f7fc fbc6 	bl	8002b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80063ec:	bd08      	pop	{r3, pc}
 80063ee:	bf00      	nop
 80063f0:	200003c0 	.word	0x200003c0

080063f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80063f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80063f6:	4802      	ldr	r0, [pc, #8]	; (8006400 <DMA1_Channel6_IRQHandler+0xc>)
 80063f8:	f7fc fbbe 	bl	8002b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80063fc:	bd08      	pop	{r3, pc}
 80063fe:	bf00      	nop
 8006400:	20000404 	.word	0x20000404

08006404 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006406:	4802      	ldr	r0, [pc, #8]	; (8006410 <ADC1_2_IRQHandler+0xc>)
 8006408:	f7fb ff3c 	bl	8002284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800640c:	bd08      	pop	{r3, pc}
 800640e:	bf00      	nop
 8006410:	20000390 	.word	0x20000390

08006414 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006416:	4802      	ldr	r0, [pc, #8]	; (8006420 <I2C1_EV_IRQHandler+0xc>)
 8006418:	f7fe f924 	bl	8004664 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800641c:	bd08      	pop	{r3, pc}
 800641e:	bf00      	nop
 8006420:	20000448 	.word	0x20000448

08006424 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	460c      	mov	r4, r1
 8006428:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800642a:	2500      	movs	r5, #0
 800642c:	42b5      	cmp	r5, r6
 800642e:	da07      	bge.n	8006440 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8006430:	f3af 8000 	nop.w
 8006434:	4621      	mov	r1, r4
 8006436:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800643c:	460c      	mov	r4, r1
 800643e:	e7f5      	b.n	800642c <_read+0x8>
	}

return len;
}
 8006440:	4630      	mov	r0, r6
 8006442:	bd70      	pop	{r4, r5, r6, pc}

08006444 <_close>:
}

int _close(int file)
{
	return -1;
}
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	4770      	bx	lr

0800644a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800644a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800644e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006450:	2000      	movs	r0, #0
 8006452:	4770      	bx	lr

08006454 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006454:	2001      	movs	r0, #1
 8006456:	4770      	bx	lr

08006458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr

0800645c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800645c:	b510      	push	{r4, lr}
 800645e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006460:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <_sbrk+0x38>)
 8006462:	490d      	ldr	r1, [pc, #52]	; (8006498 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006464:	480d      	ldr	r0, [pc, #52]	; (800649c <_sbrk+0x40>)
 8006466:	6800      	ldr	r0, [r0, #0]
 8006468:	b140      	cbz	r0, 800647c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800646a:	480c      	ldr	r0, [pc, #48]	; (800649c <_sbrk+0x40>)
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	4403      	add	r3, r0
 8006470:	1a52      	subs	r2, r2, r1
 8006472:	4293      	cmp	r3, r2
 8006474:	d806      	bhi.n	8006484 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <_sbrk+0x40>)
 8006478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800647a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800647c:	4807      	ldr	r0, [pc, #28]	; (800649c <_sbrk+0x40>)
 800647e:	4c08      	ldr	r4, [pc, #32]	; (80064a0 <_sbrk+0x44>)
 8006480:	6004      	str	r4, [r0, #0]
 8006482:	e7f2      	b.n	800646a <_sbrk+0xe>
    errno = ENOMEM;
 8006484:	f000 f9ac 	bl	80067e0 <__errno>
 8006488:	230c      	movs	r3, #12
 800648a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e7f3      	b.n	800647a <_sbrk+0x1e>
 8006492:	bf00      	nop
 8006494:	20005000 	.word	0x20005000
 8006498:	00000400 	.word	0x00000400
 800649c:	20000318 	.word	0x20000318
 80064a0:	20000568 	.word	0x20000568

080064a4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064a4:	4770      	bx	lr
	...

080064a8 <APB2TIM>:

  if(((uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1)) == 0) return (pclk1); // PCLK1 prescaler equal to 1 => TIMCLK = PCLK1
  else return (2 * pclk1); // PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1
}
uint32_t APB2TIM(void)
{
 80064a8:	b508      	push	{r3, lr}
  /* Get PCLK2 frequency */
  uint32_t pclk2 =  HAL_RCC_GetPCLK2Freq();
 80064aa:	f7fe fcd5 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>

  if(((uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3)) == 0) return (pclk2); // PCLK2 prescaler equal to 1 => TIMCLK = PCLK2
 80064ae:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <APB2TIM+0x18>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 80064b8:	d000      	beq.n	80064bc <APB2TIM+0x14>
  else return (2 * pclk2); // PCLK2 prescaler different from 1 => TIMCLK = 2 * PCLK2
 80064ba:	0040      	lsls	r0, r0, #1
}
 80064bc:	bd08      	pop	{r3, pc}
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000

080064c4 <PWMPulse>:

#define PWMRESOLUTION 800U  // Pulse resolution 1-800 = 800 = STEPS 0.125%, 0.250%, 0.375%....99.75%, 99.875%, 100%
#define PWMFREQUENCE 200U //hz

int16_t PWMPulse (float percent)
{
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4604      	mov	r4, r0
	if(percent>100) percent=100;
 80064c8:	4909      	ldr	r1, [pc, #36]	; (80064f0 <PWMPulse+0x2c>)
 80064ca:	f7fa fd67 	bl	8000f9c <__aeabi_fcmpgt>
 80064ce:	b100      	cbz	r0, 80064d2 <PWMPulse+0xe>
 80064d0:	4c07      	ldr	r4, [pc, #28]	; (80064f0 <PWMPulse+0x2c>)
	if(percent<-100) percent=-100;
 80064d2:	4908      	ldr	r1, [pc, #32]	; (80064f4 <PWMPulse+0x30>)
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7fa fd43 	bl	8000f60 <__aeabi_fcmplt>
 80064da:	b100      	cbz	r0, 80064de <PWMPulse+0x1a>
 80064dc:	4c05      	ldr	r4, [pc, #20]	; (80064f4 <PWMPulse+0x30>)
	return PWMRESOLUTION/100 * percent;
 80064de:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7fa fb9e 	bl	8000c24 <__aeabi_fmul>
 80064e8:	f7fa fd62 	bl	8000fb0 <__aeabi_f2iz>
}
 80064ec:	b200      	sxth	r0, r0
 80064ee:	bd10      	pop	{r4, pc}
 80064f0:	42c80000 	.word	0x42c80000
 80064f4:	c2c80000 	.word	0xc2c80000

080064f8 <m_MX_TIM3_Init>:

TIM_HandleTypeDef htim3;
/* TIM3 init function */
void m_MX_TIM3_Init(void)
{
 80064f8:	b500      	push	{lr}
 80064fa:	b08f      	sub	sp, #60	; 0x3c
	uint32_t Prescaler = (APB2TIM()/PWMRESOLUTION/PWMFREQUENCE)-1;
 80064fc:	f7ff ffd4 	bl	80064a8 <APB2TIM>
 8006500:	4b34      	ldr	r3, [pc, #208]	; (80065d4 <m_MX_TIM3_Init+0xdc>)
 8006502:	fba3 2300 	umull	r2, r3, r3, r0
 8006506:	0c5b      	lsrs	r3, r3, #17
	if(Prescaler==0) Prescaler = 1;
 8006508:	3b01      	subs	r3, #1
 800650a:	d003      	beq.n	8006514 <m_MX_TIM3_Init+0x1c>
	if(Prescaler>128) Prescaler = 128;
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d902      	bls.n	8006516 <m_MX_TIM3_Init+0x1e>
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	e000      	b.n	8006516 <m_MX_TIM3_Init+0x1e>
	if(Prescaler==0) Prescaler = 1;
 8006514:	2301      	movs	r3, #1

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006516:	2200      	movs	r2, #0
 8006518:	920c      	str	r2, [sp, #48]	; 0x30
 800651a:	920d      	str	r2, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 800651c:	9205      	str	r2, [sp, #20]
 800651e:	9206      	str	r2, [sp, #24]
 8006520:	9207      	str	r2, [sp, #28]
 8006522:	9208      	str	r2, [sp, #32]
 8006524:	9209      	str	r2, [sp, #36]	; 0x24
 8006526:	920a      	str	r2, [sp, #40]	; 0x28
 8006528:	920b      	str	r2, [sp, #44]	; 0x2c

  htim3.Instance = TIM3;
 800652a:	482b      	ldr	r0, [pc, #172]	; (80065d8 <m_MX_TIM3_Init+0xe0>)
 800652c:	492b      	ldr	r1, [pc, #172]	; (80065dc <m_MX_TIM3_Init+0xe4>)
 800652e:	6001      	str	r1, [r0, #0]
  htim3.Init.Prescaler = Prescaler;//7;
 8006530:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006532:	6082      	str	r2, [r0, #8]
  htim3.Init.Period = PWMRESOLUTION; //800;
 8006534:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006538:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800653a:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006540:	f7fe fefa 	bl	8005338 <HAL_TIM_PWM_Init>
 8006544:	2800      	cmp	r0, #0
 8006546:	d139      	bne.n	80065bc <m_MX_TIM3_Init+0xc4>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;//TIM_TRGO_RESET;
 8006548:	2330      	movs	r3, #48	; 0x30
 800654a:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006550:	a90c      	add	r1, sp, #48	; 0x30
 8006552:	4821      	ldr	r0, [pc, #132]	; (80065d8 <m_MX_TIM3_Init+0xe0>)
 8006554:	f7ff f9a8 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8006558:	2800      	cmp	r0, #0
 800655a:	d132      	bne.n	80065c2 <m_MX_TIM3_Init+0xca>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800655c:	2360      	movs	r3, #96	; 0x60
 800655e:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 500;
 8006560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006564:	9306      	str	r3, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006566:	2200      	movs	r2, #0
 8006568:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800656a:	2304      	movs	r3, #4
 800656c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800656e:	a905      	add	r1, sp, #20
 8006570:	4819      	ldr	r0, [pc, #100]	; (80065d8 <m_MX_TIM3_Init+0xe0>)
 8006572:	f7fe ff3f 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8006576:	bb38      	cbnz	r0, 80065c8 <m_MX_TIM3_Init+0xd0>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006578:	2204      	movs	r2, #4
 800657a:	a905      	add	r1, sp, #20
 800657c:	4816      	ldr	r0, [pc, #88]	; (80065d8 <m_MX_TIM3_Init+0xe0>)
 800657e:	f7fe ff39 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8006582:	bb20      	cbnz	r0, 80065ce <m_MX_TIM3_Init+0xd6>
  {
    Error_Handler();
  }
  //HAL_TIM_MspPostInit(&htim3);
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006584:	2300      	movs	r3, #0
 8006586:	9303      	str	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800658c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	f042 0204 	orr.w	r2, r2, #4
 8006596:	619a      	str	r2, [r3, #24]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	9b00      	ldr	r3, [sp, #0]
  /**TIM3 GPIO Configuration
  PA6     ------> TIM3_CH1
  PA7     ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = PB_Pin|PA_Pin;
 80065a2:	23c0      	movs	r3, #192	; 0xc0
 80065a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a6:	2302      	movs	r3, #2
 80065a8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065aa:	2303      	movs	r3, #3
 80065ac:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ae:	a901      	add	r1, sp, #4
 80065b0:	480b      	ldr	r0, [pc, #44]	; (80065e0 <m_MX_TIM3_Init+0xe8>)
 80065b2:	f7fc fb87 	bl	8002cc4 <HAL_GPIO_Init>
}
 80065b6:	b00f      	add	sp, #60	; 0x3c
 80065b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80065bc:	f7ff fee0 	bl	8006380 <Error_Handler>
 80065c0:	e7c2      	b.n	8006548 <m_MX_TIM3_Init+0x50>
    Error_Handler();
 80065c2:	f7ff fedd 	bl	8006380 <Error_Handler>
 80065c6:	e7c9      	b.n	800655c <m_MX_TIM3_Init+0x64>
    Error_Handler();
 80065c8:	f7ff feda 	bl	8006380 <Error_Handler>
 80065cc:	e7d4      	b.n	8006578 <m_MX_TIM3_Init+0x80>
    Error_Handler();
 80065ce:	f7ff fed7 	bl	8006380 <Error_Handler>
 80065d2:	e7d7      	b.n	8006584 <m_MX_TIM3_Init+0x8c>
 80065d4:	d1b71759 	.word	0xd1b71759
 80065d8:	200004c4 	.word	0x200004c4
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40010800 	.word	0x40010800

080065e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 80065e4:	6802      	ldr	r2, [r0, #0]
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_TIM_PWM_MspInit+0x28>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d000      	beq.n	80065ee <HAL_TIM_PWM_MspInit+0xa>
 80065ec:	4770      	bx	lr
{
 80065ee:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80065f0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	f042 0202 	orr.w	r2, r2, #2
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006606:	b002      	add	sp, #8
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40000400 	.word	0x40000400

08006610 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8006610:	6802      	ldr	r2, [r0, #0]
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <HAL_TIM_Base_MspInit+0x28>)
 8006614:	429a      	cmp	r2, r3
 8006616:	d000      	beq.n	800661a <HAL_TIM_Base_MspInit+0xa>
 8006618:	4770      	bx	lr
{
 800661a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800661c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006626:	619a      	str	r2, [r3, #24]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006632:	b002      	add	sp, #8
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40012c00 	.word	0x40012c00

0800663c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800663c:	b500      	push	{lr}
 800663e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006640:	2300      	movs	r3, #0
 8006642:	9302      	str	r3, [sp, #8]
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 800664a:	6802      	ldr	r2, [r0, #0]
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_TIM_MspPostInit+0x58>)
 800664e:	429a      	cmp	r2, r3
 8006650:	d002      	beq.n	8006658 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006652:	b007      	add	sp, #28
 8006654:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006658:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	f042 0208 	orr.w	r2, r2, #8
 8006662:	619a      	str	r2, [r3, #24]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BEEP_Pin;
 800666e:	2302      	movs	r3, #2
 8006670:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006672:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006674:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8006676:	a902      	add	r1, sp, #8
 8006678:	4807      	ldr	r0, [pc, #28]	; (8006698 <HAL_TIM_MspPostInit+0x5c>)
 800667a:	f7fc fb23 	bl	8002cc4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_TIM_MspPostInit+0x60>)
 8006680:	6853      	ldr	r3, [r2, #4]
 8006682:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006686:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800668a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668e:	6053      	str	r3, [r2, #4]
}
 8006690:	e7df      	b.n	8006652 <HAL_TIM_MspPostInit+0x16>
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40010c00 	.word	0x40010c00
 800669c:	40010000 	.word	0x40010000

080066a0 <MX_TIM1_Init>:
{
 80066a0:	b510      	push	{r4, lr}
 80066a2:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066a4:	2400      	movs	r4, #0
 80066a6:	9412      	str	r4, [sp, #72]	; 0x48
 80066a8:	9413      	str	r4, [sp, #76]	; 0x4c
 80066aa:	9414      	str	r4, [sp, #80]	; 0x50
 80066ac:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ae:	9410      	str	r4, [sp, #64]	; 0x40
 80066b0:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066b2:	9409      	str	r4, [sp, #36]	; 0x24
 80066b4:	940a      	str	r4, [sp, #40]	; 0x28
 80066b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80066b8:	940c      	str	r4, [sp, #48]	; 0x30
 80066ba:	940d      	str	r4, [sp, #52]	; 0x34
 80066bc:	940e      	str	r4, [sp, #56]	; 0x38
 80066be:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80066c0:	2220      	movs	r2, #32
 80066c2:	4621      	mov	r1, r4
 80066c4:	a801      	add	r0, sp, #4
 80066c6:	f000 f8cf 	bl	8006868 <memset>
  htim1.Instance = TIM1;
 80066ca:	4830      	ldr	r0, [pc, #192]	; (800678c <MX_TIM1_Init+0xec>)
 80066cc:	4b30      	ldr	r3, [pc, #192]	; (8006790 <MX_TIM1_Init+0xf0>)
 80066ce:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 71;
 80066d0:	2347      	movs	r3, #71	; 0x47
 80066d2:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d4:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 80066d6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80066da:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066dc:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80066de:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066e0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80066e2:	f7fe fdfd 	bl	80052e0 <HAL_TIM_Base_Init>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d13d      	bne.n	8006766 <MX_TIM1_Init+0xc6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ee:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80066f0:	a912      	add	r1, sp, #72	; 0x48
 80066f2:	4826      	ldr	r0, [pc, #152]	; (800678c <MX_TIM1_Init+0xec>)
 80066f4:	f7fe fef1 	bl	80054da <HAL_TIM_ConfigClockSource>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d137      	bne.n	800676c <MX_TIM1_Init+0xcc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066fc:	4823      	ldr	r0, [pc, #140]	; (800678c <MX_TIM1_Init+0xec>)
 80066fe:	f7fe fe1b 	bl	8005338 <HAL_TIM_PWM_Init>
 8006702:	2800      	cmp	r0, #0
 8006704:	d135      	bne.n	8006772 <MX_TIM1_Init+0xd2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8006706:	2330      	movs	r3, #48	; 0x30
 8006708:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800670a:	2300      	movs	r3, #0
 800670c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800670e:	a910      	add	r1, sp, #64	; 0x40
 8006710:	481e      	ldr	r0, [pc, #120]	; (800678c <MX_TIM1_Init+0xec>)
 8006712:	f7ff f8c9 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8006716:	2800      	cmp	r0, #0
 8006718:	d12e      	bne.n	8006778 <MX_TIM1_Init+0xd8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800671a:	2360      	movs	r3, #96	; 0x60
 800671c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 499;
 800671e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006722:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006724:	2300      	movs	r3, #0
 8006726:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006728:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800672a:	2204      	movs	r2, #4
 800672c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800672e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006730:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006732:	2208      	movs	r2, #8
 8006734:	a909      	add	r1, sp, #36	; 0x24
 8006736:	4815      	ldr	r0, [pc, #84]	; (800678c <MX_TIM1_Init+0xec>)
 8006738:	f7fe fe5c 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 800673c:	b9f8      	cbnz	r0, 800677e <MX_TIM1_Init+0xde>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800673e:	2300      	movs	r3, #0
 8006740:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006742:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006744:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006746:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006748:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800674a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800674e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006750:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006752:	a901      	add	r1, sp, #4
 8006754:	480d      	ldr	r0, [pc, #52]	; (800678c <MX_TIM1_Init+0xec>)
 8006756:	f7ff f8db 	bl	8005910 <HAL_TIMEx_ConfigBreakDeadTime>
 800675a:	b998      	cbnz	r0, 8006784 <MX_TIM1_Init+0xe4>
  HAL_TIM_MspPostInit(&htim1);
 800675c:	480b      	ldr	r0, [pc, #44]	; (800678c <MX_TIM1_Init+0xec>)
 800675e:	f7ff ff6d 	bl	800663c <HAL_TIM_MspPostInit>
}
 8006762:	b016      	add	sp, #88	; 0x58
 8006764:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006766:	f7ff fe0b 	bl	8006380 <Error_Handler>
 800676a:	e7be      	b.n	80066ea <MX_TIM1_Init+0x4a>
    Error_Handler();
 800676c:	f7ff fe08 	bl	8006380 <Error_Handler>
 8006770:	e7c4      	b.n	80066fc <MX_TIM1_Init+0x5c>
    Error_Handler();
 8006772:	f7ff fe05 	bl	8006380 <Error_Handler>
 8006776:	e7c6      	b.n	8006706 <MX_TIM1_Init+0x66>
    Error_Handler();
 8006778:	f7ff fe02 	bl	8006380 <Error_Handler>
 800677c:	e7cd      	b.n	800671a <MX_TIM1_Init+0x7a>
    Error_Handler();
 800677e:	f7ff fdff 	bl	8006380 <Error_Handler>
 8006782:	e7dc      	b.n	800673e <MX_TIM1_Init+0x9e>
    Error_Handler();
 8006784:	f7ff fdfc 	bl	8006380 <Error_Handler>
 8006788:	e7e8      	b.n	800675c <MX_TIM1_Init+0xbc>
 800678a:	bf00      	nop
 800678c:	2000050c 	.word	0x2000050c
 8006790:	40012c00 	.word	0x40012c00

08006794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006794:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006796:	e003      	b.n	80067a0 <LoopCopyDataInit>

08006798 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800679a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800679c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800679e:	3104      	adds	r1, #4

080067a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80067a0:	480a      	ldr	r0, [pc, #40]	; (80067cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80067a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80067a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80067a8:	d3f6      	bcc.n	8006798 <CopyDataInit>
  ldr r2, =_sbss
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80067ac:	e002      	b.n	80067b4 <LoopFillZerobss>

080067ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80067ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80067b0:	f842 3b04 	str.w	r3, [r2], #4

080067b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80067b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80067b8:	d3f9      	bcc.n	80067ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80067ba:	f7ff fe73 	bl	80064a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067be:	f000 f815 	bl	80067ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80067c2:	f7ff fbaf 	bl	8005f24 <main>
  bx lr
 80067c6:	4770      	bx	lr
  ldr r3, =_sidata
 80067c8:	080082cc 	.word	0x080082cc
  ldr r0, =_sdata
 80067cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80067d0:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 80067d4:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 80067d8:	20000564 	.word	0x20000564

080067dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80067dc:	e7fe      	b.n	80067dc <CAN1_RX1_IRQHandler>
	...

080067e0 <__errno>:
 80067e0:	4b01      	ldr	r3, [pc, #4]	; (80067e8 <__errno+0x8>)
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	2000007c 	.word	0x2000007c

080067ec <__libc_init_array>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	2600      	movs	r6, #0
 80067f0:	4d0c      	ldr	r5, [pc, #48]	; (8006824 <__libc_init_array+0x38>)
 80067f2:	4c0d      	ldr	r4, [pc, #52]	; (8006828 <__libc_init_array+0x3c>)
 80067f4:	1b64      	subs	r4, r4, r5
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	42a6      	cmp	r6, r4
 80067fa:	d109      	bne.n	8006810 <__libc_init_array+0x24>
 80067fc:	f001 f864 	bl	80078c8 <_init>
 8006800:	2600      	movs	r6, #0
 8006802:	4d0a      	ldr	r5, [pc, #40]	; (800682c <__libc_init_array+0x40>)
 8006804:	4c0a      	ldr	r4, [pc, #40]	; (8006830 <__libc_init_array+0x44>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	42a6      	cmp	r6, r4
 800680c:	d105      	bne.n	800681a <__libc_init_array+0x2e>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	f855 3b04 	ldr.w	r3, [r5], #4
 8006814:	4798      	blx	r3
 8006816:	3601      	adds	r6, #1
 8006818:	e7ee      	b.n	80067f8 <__libc_init_array+0xc>
 800681a:	f855 3b04 	ldr.w	r3, [r5], #4
 800681e:	4798      	blx	r3
 8006820:	3601      	adds	r6, #1
 8006822:	e7f2      	b.n	800680a <__libc_init_array+0x1e>
 8006824:	080082c4 	.word	0x080082c4
 8006828:	080082c4 	.word	0x080082c4
 800682c:	080082c4 	.word	0x080082c4
 8006830:	080082c8 	.word	0x080082c8

08006834 <__itoa>:
 8006834:	1e93      	subs	r3, r2, #2
 8006836:	2b22      	cmp	r3, #34	; 0x22
 8006838:	b510      	push	{r4, lr}
 800683a:	460c      	mov	r4, r1
 800683c:	d904      	bls.n	8006848 <__itoa+0x14>
 800683e:	2300      	movs	r3, #0
 8006840:	461c      	mov	r4, r3
 8006842:	700b      	strb	r3, [r1, #0]
 8006844:	4620      	mov	r0, r4
 8006846:	bd10      	pop	{r4, pc}
 8006848:	2a0a      	cmp	r2, #10
 800684a:	d109      	bne.n	8006860 <__itoa+0x2c>
 800684c:	2800      	cmp	r0, #0
 800684e:	da07      	bge.n	8006860 <__itoa+0x2c>
 8006850:	232d      	movs	r3, #45	; 0x2d
 8006852:	700b      	strb	r3, [r1, #0]
 8006854:	2101      	movs	r1, #1
 8006856:	4240      	negs	r0, r0
 8006858:	4421      	add	r1, r4
 800685a:	f000 f8ab 	bl	80069b4 <__utoa>
 800685e:	e7f1      	b.n	8006844 <__itoa+0x10>
 8006860:	2100      	movs	r1, #0
 8006862:	e7f9      	b.n	8006858 <__itoa+0x24>

08006864 <itoa>:
 8006864:	f7ff bfe6 	b.w	8006834 <__itoa>

08006868 <memset>:
 8006868:	4603      	mov	r3, r0
 800686a:	4402      	add	r2, r0
 800686c:	4293      	cmp	r3, r2
 800686e:	d100      	bne.n	8006872 <memset+0xa>
 8006870:	4770      	bx	lr
 8006872:	f803 1b01 	strb.w	r1, [r3], #1
 8006876:	e7f9      	b.n	800686c <memset+0x4>

08006878 <iprintf>:
 8006878:	b40f      	push	{r0, r1, r2, r3}
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <iprintf+0x2c>)
 800687c:	b513      	push	{r0, r1, r4, lr}
 800687e:	681c      	ldr	r4, [r3, #0]
 8006880:	b124      	cbz	r4, 800688c <iprintf+0x14>
 8006882:	69a3      	ldr	r3, [r4, #24]
 8006884:	b913      	cbnz	r3, 800688c <iprintf+0x14>
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fab0 	bl	8006dec <__sinit>
 800688c:	ab05      	add	r3, sp, #20
 800688e:	4620      	mov	r0, r4
 8006890:	9a04      	ldr	r2, [sp, #16]
 8006892:	68a1      	ldr	r1, [r4, #8]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	f000 fc7b 	bl	8007190 <_vfiprintf_r>
 800689a:	b002      	add	sp, #8
 800689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a0:	b004      	add	sp, #16
 80068a2:	4770      	bx	lr
 80068a4:	2000007c 	.word	0x2000007c

080068a8 <_puts_r>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	460e      	mov	r6, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	b118      	cbz	r0, 80068b8 <_puts_r+0x10>
 80068b0:	6983      	ldr	r3, [r0, #24]
 80068b2:	b90b      	cbnz	r3, 80068b8 <_puts_r+0x10>
 80068b4:	f000 fa9a 	bl	8006dec <__sinit>
 80068b8:	69ab      	ldr	r3, [r5, #24]
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	b913      	cbnz	r3, 80068c4 <_puts_r+0x1c>
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 fa94 	bl	8006dec <__sinit>
 80068c4:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <_puts_r+0xd0>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d120      	bne.n	800690c <_puts_r+0x64>
 80068ca:	686c      	ldr	r4, [r5, #4]
 80068cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ce:	07db      	lsls	r3, r3, #31
 80068d0:	d405      	bmi.n	80068de <_puts_r+0x36>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	0598      	lsls	r0, r3, #22
 80068d6:	d402      	bmi.n	80068de <_puts_r+0x36>
 80068d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068da:	f000 fb25 	bl	8006f28 <__retarget_lock_acquire_recursive>
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d51d      	bpl.n	8006920 <_puts_r+0x78>
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	b1db      	cbz	r3, 8006920 <_puts_r+0x78>
 80068e8:	3e01      	subs	r6, #1
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60a3      	str	r3, [r4, #8]
 80068f4:	bb39      	cbnz	r1, 8006946 <_puts_r+0x9e>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da38      	bge.n	800696c <_puts_r+0xc4>
 80068fa:	4622      	mov	r2, r4
 80068fc:	210a      	movs	r1, #10
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f89a 	bl	8006a38 <__swbuf_r>
 8006904:	3001      	adds	r0, #1
 8006906:	d011      	beq.n	800692c <_puts_r+0x84>
 8006908:	250a      	movs	r5, #10
 800690a:	e011      	b.n	8006930 <_puts_r+0x88>
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <_puts_r+0xd4>)
 800690e:	429c      	cmp	r4, r3
 8006910:	d101      	bne.n	8006916 <_puts_r+0x6e>
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	e7da      	b.n	80068cc <_puts_r+0x24>
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <_puts_r+0xd8>)
 8006918:	429c      	cmp	r4, r3
 800691a:	bf08      	it	eq
 800691c:	68ec      	ldreq	r4, [r5, #12]
 800691e:	e7d5      	b.n	80068cc <_puts_r+0x24>
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f000 f8da 	bl	8006adc <__swsetup_r>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0dd      	beq.n	80068e8 <_puts_r+0x40>
 800692c:	f04f 35ff 	mov.w	r5, #4294967295
 8006930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006932:	07da      	lsls	r2, r3, #31
 8006934:	d405      	bmi.n	8006942 <_puts_r+0x9a>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	059b      	lsls	r3, r3, #22
 800693a:	d402      	bmi.n	8006942 <_puts_r+0x9a>
 800693c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693e:	f000 faf4 	bl	8006f2a <__retarget_lock_release_recursive>
 8006942:	4628      	mov	r0, r5
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	2b00      	cmp	r3, #0
 8006948:	da04      	bge.n	8006954 <_puts_r+0xac>
 800694a:	69a2      	ldr	r2, [r4, #24]
 800694c:	429a      	cmp	r2, r3
 800694e:	dc06      	bgt.n	800695e <_puts_r+0xb6>
 8006950:	290a      	cmp	r1, #10
 8006952:	d004      	beq.n	800695e <_puts_r+0xb6>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	7019      	strb	r1, [r3, #0]
 800695c:	e7c5      	b.n	80068ea <_puts_r+0x42>
 800695e:	4622      	mov	r2, r4
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f869 	bl	8006a38 <__swbuf_r>
 8006966:	3001      	adds	r0, #1
 8006968:	d1bf      	bne.n	80068ea <_puts_r+0x42>
 800696a:	e7df      	b.n	800692c <_puts_r+0x84>
 800696c:	250a      	movs	r5, #10
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	701d      	strb	r5, [r3, #0]
 8006976:	e7db      	b.n	8006930 <_puts_r+0x88>
 8006978:	08008250 	.word	0x08008250
 800697c:	08008270 	.word	0x08008270
 8006980:	08008230 	.word	0x08008230

08006984 <puts>:
 8006984:	4b02      	ldr	r3, [pc, #8]	; (8006990 <puts+0xc>)
 8006986:	4601      	mov	r1, r0
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f7ff bf8d 	b.w	80068a8 <_puts_r>
 800698e:	bf00      	nop
 8006990:	2000007c 	.word	0x2000007c

08006994 <strcat>:
 8006994:	4602      	mov	r2, r0
 8006996:	b510      	push	{r4, lr}
 8006998:	7814      	ldrb	r4, [r2, #0]
 800699a:	4613      	mov	r3, r2
 800699c:	3201      	adds	r2, #1
 800699e:	2c00      	cmp	r4, #0
 80069a0:	d1fa      	bne.n	8006998 <strcat+0x4>
 80069a2:	3b01      	subs	r3, #1
 80069a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d1f9      	bne.n	80069a4 <strcat+0x10>
 80069b0:	bd10      	pop	{r4, pc}
	...

080069b4 <__utoa>:
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b6:	b08b      	sub	sp, #44	; 0x2c
 80069b8:	4605      	mov	r5, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	466e      	mov	r6, sp
 80069be:	4c1d      	ldr	r4, [pc, #116]	; (8006a34 <__utoa+0x80>)
 80069c0:	f104 0c20 	add.w	ip, r4, #32
 80069c4:	4637      	mov	r7, r6
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	6861      	ldr	r1, [r4, #4]
 80069ca:	3408      	adds	r4, #8
 80069cc:	c703      	stmia	r7!, {r0, r1}
 80069ce:	4564      	cmp	r4, ip
 80069d0:	463e      	mov	r6, r7
 80069d2:	d1f7      	bne.n	80069c4 <__utoa+0x10>
 80069d4:	7921      	ldrb	r1, [r4, #4]
 80069d6:	6820      	ldr	r0, [r4, #0]
 80069d8:	7139      	strb	r1, [r7, #4]
 80069da:	1e91      	subs	r1, r2, #2
 80069dc:	2922      	cmp	r1, #34	; 0x22
 80069de:	6038      	str	r0, [r7, #0]
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	d904      	bls.n	80069f0 <__utoa+0x3c>
 80069e6:	7019      	strb	r1, [r3, #0]
 80069e8:	460b      	mov	r3, r1
 80069ea:	4618      	mov	r0, r3
 80069ec:	b00b      	add	sp, #44	; 0x2c
 80069ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f0:	1e58      	subs	r0, r3, #1
 80069f2:	4684      	mov	ip, r0
 80069f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80069f8:	fb02 5617 	mls	r6, r2, r7, r5
 80069fc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006a00:	4476      	add	r6, lr
 8006a02:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006a06:	460c      	mov	r4, r1
 8006a08:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006a0c:	462e      	mov	r6, r5
 8006a0e:	42b2      	cmp	r2, r6
 8006a10:	463d      	mov	r5, r7
 8006a12:	f101 0101 	add.w	r1, r1, #1
 8006a16:	d9ed      	bls.n	80069f4 <__utoa+0x40>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	545a      	strb	r2, [r3, r1]
 8006a1c:	1919      	adds	r1, r3, r4
 8006a1e:	1aa5      	subs	r5, r4, r2
 8006a20:	42aa      	cmp	r2, r5
 8006a22:	dae2      	bge.n	80069ea <__utoa+0x36>
 8006a24:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006a28:	780e      	ldrb	r6, [r1, #0]
 8006a2a:	3201      	adds	r2, #1
 8006a2c:	7006      	strb	r6, [r0, #0]
 8006a2e:	f801 5901 	strb.w	r5, [r1], #-1
 8006a32:	e7f4      	b.n	8006a1e <__utoa+0x6a>
 8006a34:	08008208 	.word	0x08008208

08006a38 <__swbuf_r>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	460e      	mov	r6, r1
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	4605      	mov	r5, r0
 8006a40:	b118      	cbz	r0, 8006a4a <__swbuf_r+0x12>
 8006a42:	6983      	ldr	r3, [r0, #24]
 8006a44:	b90b      	cbnz	r3, 8006a4a <__swbuf_r+0x12>
 8006a46:	f000 f9d1 	bl	8006dec <__sinit>
 8006a4a:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <__swbuf_r+0x98>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	d12b      	bne.n	8006aa8 <__swbuf_r+0x70>
 8006a50:	686c      	ldr	r4, [r5, #4]
 8006a52:	69a3      	ldr	r3, [r4, #24]
 8006a54:	60a3      	str	r3, [r4, #8]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	071a      	lsls	r2, r3, #28
 8006a5a:	d52f      	bpl.n	8006abc <__swbuf_r+0x84>
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	b36b      	cbz	r3, 8006abc <__swbuf_r+0x84>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	b2f6      	uxtb	r6, r6
 8006a66:	1ac0      	subs	r0, r0, r3
 8006a68:	6963      	ldr	r3, [r4, #20]
 8006a6a:	4637      	mov	r7, r6
 8006a6c:	4283      	cmp	r3, r0
 8006a6e:	dc04      	bgt.n	8006a7a <__swbuf_r+0x42>
 8006a70:	4621      	mov	r1, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 f926 	bl	8006cc4 <_fflush_r>
 8006a78:	bb30      	cbnz	r0, 8006ac8 <__swbuf_r+0x90>
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	701e      	strb	r6, [r3, #0]
 8006a8a:	6963      	ldr	r3, [r4, #20]
 8006a8c:	4283      	cmp	r3, r0
 8006a8e:	d004      	beq.n	8006a9a <__swbuf_r+0x62>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d506      	bpl.n	8006aa4 <__swbuf_r+0x6c>
 8006a96:	2e0a      	cmp	r6, #10
 8006a98:	d104      	bne.n	8006aa4 <__swbuf_r+0x6c>
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 f911 	bl	8006cc4 <_fflush_r>
 8006aa2:	b988      	cbnz	r0, 8006ac8 <__swbuf_r+0x90>
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <__swbuf_r+0x9c>)
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d101      	bne.n	8006ab2 <__swbuf_r+0x7a>
 8006aae:	68ac      	ldr	r4, [r5, #8]
 8006ab0:	e7cf      	b.n	8006a52 <__swbuf_r+0x1a>
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <__swbuf_r+0xa0>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	bf08      	it	eq
 8006ab8:	68ec      	ldreq	r4, [r5, #12]
 8006aba:	e7ca      	b.n	8006a52 <__swbuf_r+0x1a>
 8006abc:	4621      	mov	r1, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 f80c 	bl	8006adc <__swsetup_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d0cb      	beq.n	8006a60 <__swbuf_r+0x28>
 8006ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8006acc:	e7ea      	b.n	8006aa4 <__swbuf_r+0x6c>
 8006ace:	bf00      	nop
 8006ad0:	08008250 	.word	0x08008250
 8006ad4:	08008270 	.word	0x08008270
 8006ad8:	08008230 	.word	0x08008230

08006adc <__swsetup_r>:
 8006adc:	4b32      	ldr	r3, [pc, #200]	; (8006ba8 <__swsetup_r+0xcc>)
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	b125      	cbz	r5, 8006af2 <__swsetup_r+0x16>
 8006ae8:	69ab      	ldr	r3, [r5, #24]
 8006aea:	b913      	cbnz	r3, 8006af2 <__swsetup_r+0x16>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 f97d 	bl	8006dec <__sinit>
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <__swsetup_r+0xd0>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	d10f      	bne.n	8006b18 <__swsetup_r+0x3c>
 8006af8:	686c      	ldr	r4, [r5, #4]
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b00:	0719      	lsls	r1, r3, #28
 8006b02:	d42c      	bmi.n	8006b5e <__swsetup_r+0x82>
 8006b04:	06dd      	lsls	r5, r3, #27
 8006b06:	d411      	bmi.n	8006b2c <__swsetup_r+0x50>
 8006b08:	2309      	movs	r3, #9
 8006b0a:	6033      	str	r3, [r6, #0]
 8006b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	e03e      	b.n	8006b96 <__swsetup_r+0xba>
 8006b18:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <__swsetup_r+0xd4>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d101      	bne.n	8006b22 <__swsetup_r+0x46>
 8006b1e:	68ac      	ldr	r4, [r5, #8]
 8006b20:	e7eb      	b.n	8006afa <__swsetup_r+0x1e>
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <__swsetup_r+0xd8>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	bf08      	it	eq
 8006b28:	68ec      	ldreq	r4, [r5, #12]
 8006b2a:	e7e6      	b.n	8006afa <__swsetup_r+0x1e>
 8006b2c:	0758      	lsls	r0, r3, #29
 8006b2e:	d512      	bpl.n	8006b56 <__swsetup_r+0x7a>
 8006b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b32:	b141      	cbz	r1, 8006b46 <__swsetup_r+0x6a>
 8006b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b38:	4299      	cmp	r1, r3
 8006b3a:	d002      	beq.n	8006b42 <__swsetup_r+0x66>
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f000 fa59 	bl	8006ff4 <_free_r>
 8006b42:	2300      	movs	r3, #0
 8006b44:	6363      	str	r3, [r4, #52]	; 0x34
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6063      	str	r3, [r4, #4]
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	81a3      	strh	r3, [r4, #12]
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	b94b      	cbnz	r3, 8006b76 <__swsetup_r+0x9a>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6c:	d003      	beq.n	8006b76 <__swsetup_r+0x9a>
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4630      	mov	r0, r6
 8006b72:	f000 f9ff 	bl	8006f74 <__smakebuf_r>
 8006b76:	89a0      	ldrh	r0, [r4, #12]
 8006b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b7c:	f010 0301 	ands.w	r3, r0, #1
 8006b80:	d00a      	beq.n	8006b98 <__swsetup_r+0xbc>
 8006b82:	2300      	movs	r3, #0
 8006b84:	60a3      	str	r3, [r4, #8]
 8006b86:	6963      	ldr	r3, [r4, #20]
 8006b88:	425b      	negs	r3, r3
 8006b8a:	61a3      	str	r3, [r4, #24]
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	b943      	cbnz	r3, 8006ba2 <__swsetup_r+0xc6>
 8006b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b94:	d1ba      	bne.n	8006b0c <__swsetup_r+0x30>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	0781      	lsls	r1, r0, #30
 8006b9a:	bf58      	it	pl
 8006b9c:	6963      	ldrpl	r3, [r4, #20]
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	e7f4      	b.n	8006b8c <__swsetup_r+0xb0>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	e7f7      	b.n	8006b96 <__swsetup_r+0xba>
 8006ba6:	bf00      	nop
 8006ba8:	2000007c 	.word	0x2000007c
 8006bac:	08008250 	.word	0x08008250
 8006bb0:	08008270 	.word	0x08008270
 8006bb4:	08008230 	.word	0x08008230

08006bb8 <__sflush_r>:
 8006bb8:	898a      	ldrh	r2, [r1, #12]
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	0710      	lsls	r0, r2, #28
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	d458      	bmi.n	8006c78 <__sflush_r+0xc0>
 8006bc6:	684b      	ldr	r3, [r1, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc05      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dc02      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d0f9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be4:	682f      	ldr	r7, [r5, #0]
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	d032      	beq.n	8006c50 <__sflush_r+0x98>
 8006bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	075a      	lsls	r2, r3, #29
 8006bf0:	d505      	bpl.n	8006bfe <__sflush_r+0x46>
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	1ac0      	subs	r0, r0, r3
 8006bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bf8:	b10b      	cbz	r3, 8006bfe <__sflush_r+0x46>
 8006bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4602      	mov	r2, r0
 8006c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c04:	4628      	mov	r0, r5
 8006c06:	6a21      	ldr	r1, [r4, #32]
 8006c08:	47b0      	blx	r6
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	d106      	bne.n	8006c1e <__sflush_r+0x66>
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	291d      	cmp	r1, #29
 8006c14:	d82c      	bhi.n	8006c70 <__sflush_r+0xb8>
 8006c16:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <__sflush_r+0x108>)
 8006c18:	40ca      	lsrs	r2, r1
 8006c1a:	07d6      	lsls	r6, r2, #31
 8006c1c:	d528      	bpl.n	8006c70 <__sflush_r+0xb8>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6062      	str	r2, [r4, #4]
 8006c22:	6922      	ldr	r2, [r4, #16]
 8006c24:	04d9      	lsls	r1, r3, #19
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	d504      	bpl.n	8006c34 <__sflush_r+0x7c>
 8006c2a:	1c42      	adds	r2, r0, #1
 8006c2c:	d101      	bne.n	8006c32 <__sflush_r+0x7a>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b903      	cbnz	r3, 8006c34 <__sflush_r+0x7c>
 8006c32:	6560      	str	r0, [r4, #84]	; 0x54
 8006c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c36:	602f      	str	r7, [r5, #0]
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d0ca      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d002      	beq.n	8006c4a <__sflush_r+0x92>
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 f9d5 	bl	8006ff4 <_free_r>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c4e:	e7c1      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c50:	6a21      	ldr	r1, [r4, #32]
 8006c52:	2301      	movs	r3, #1
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	1c41      	adds	r1, r0, #1
 8006c5a:	d1c7      	bne.n	8006bec <__sflush_r+0x34>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0c4      	beq.n	8006bec <__sflush_r+0x34>
 8006c62:	2b1d      	cmp	r3, #29
 8006c64:	d001      	beq.n	8006c6a <__sflush_r+0xb2>
 8006c66:	2b16      	cmp	r3, #22
 8006c68:	d101      	bne.n	8006c6e <__sflush_r+0xb6>
 8006c6a:	602f      	str	r7, [r5, #0]
 8006c6c:	e7b1      	b.n	8006bd2 <__sflush_r+0x1a>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	e7ad      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c78:	690f      	ldr	r7, [r1, #16]
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	d0a9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c7e:	0793      	lsls	r3, r2, #30
 8006c80:	bf18      	it	ne
 8006c82:	2300      	movne	r3, #0
 8006c84:	680e      	ldr	r6, [r1, #0]
 8006c86:	bf08      	it	eq
 8006c88:	694b      	ldreq	r3, [r1, #20]
 8006c8a:	eba6 0807 	sub.w	r8, r6, r7
 8006c8e:	600f      	str	r7, [r1, #0]
 8006c90:	608b      	str	r3, [r1, #8]
 8006c92:	f1b8 0f00 	cmp.w	r8, #0
 8006c96:	dd9c      	ble.n	8006bd2 <__sflush_r+0x1a>
 8006c98:	4643      	mov	r3, r8
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	6a21      	ldr	r1, [r4, #32]
 8006ca0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca2:	47b0      	blx	r6
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dc06      	bgt.n	8006cb6 <__sflush_r+0xfe>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	e78e      	b.n	8006bd4 <__sflush_r+0x1c>
 8006cb6:	4407      	add	r7, r0
 8006cb8:	eba8 0800 	sub.w	r8, r8, r0
 8006cbc:	e7e9      	b.n	8006c92 <__sflush_r+0xda>
 8006cbe:	bf00      	nop
 8006cc0:	20400001 	.word	0x20400001

08006cc4 <_fflush_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_fflush_r+0x10>
 8006cce:	2500      	movs	r5, #0
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	b118      	cbz	r0, 8006cde <_fflush_r+0x1a>
 8006cd6:	6983      	ldr	r3, [r0, #24]
 8006cd8:	b90b      	cbnz	r3, 8006cde <_fflush_r+0x1a>
 8006cda:	f000 f887 	bl	8006dec <__sinit>
 8006cde:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <_fflush_r+0x6c>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	d11b      	bne.n	8006d1c <_fflush_r+0x58>
 8006ce4:	686c      	ldr	r4, [r5, #4]
 8006ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ef      	beq.n	8006cce <_fflush_r+0xa>
 8006cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cf0:	07d0      	lsls	r0, r2, #31
 8006cf2:	d404      	bmi.n	8006cfe <_fflush_r+0x3a>
 8006cf4:	0599      	lsls	r1, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_fflush_r+0x3a>
 8006cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cfa:	f000 f915 	bl	8006f28 <__retarget_lock_acquire_recursive>
 8006cfe:	4628      	mov	r0, r5
 8006d00:	4621      	mov	r1, r4
 8006d02:	f7ff ff59 	bl	8006bb8 <__sflush_r>
 8006d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d08:	4605      	mov	r5, r0
 8006d0a:	07da      	lsls	r2, r3, #31
 8006d0c:	d4e0      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	059b      	lsls	r3, r3, #22
 8006d12:	d4dd      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d16:	f000 f908 	bl	8006f2a <__retarget_lock_release_recursive>
 8006d1a:	e7d9      	b.n	8006cd0 <_fflush_r+0xc>
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <_fflush_r+0x70>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <_fflush_r+0x62>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7df      	b.n	8006ce6 <_fflush_r+0x22>
 8006d26:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <_fflush_r+0x74>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7da      	b.n	8006ce6 <_fflush_r+0x22>
 8006d30:	08008250 	.word	0x08008250
 8006d34:	08008270 	.word	0x08008270
 8006d38:	08008230 	.word	0x08008230

08006d3c <std>:
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	4604      	mov	r4, r0
 8006d42:	e9c0 3300 	strd	r3, r3, [r0]
 8006d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d4a:	6083      	str	r3, [r0, #8]
 8006d4c:	8181      	strh	r1, [r0, #12]
 8006d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d50:	81c2      	strh	r2, [r0, #14]
 8006d52:	6183      	str	r3, [r0, #24]
 8006d54:	4619      	mov	r1, r3
 8006d56:	2208      	movs	r2, #8
 8006d58:	305c      	adds	r0, #92	; 0x5c
 8006d5a:	f7ff fd85 	bl	8006868 <memset>
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <std+0x38>)
 8006d60:	6224      	str	r4, [r4, #32]
 8006d62:	6263      	str	r3, [r4, #36]	; 0x24
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <std+0x3c>)
 8006d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <std+0x40>)
 8006d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d6c:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <std+0x44>)
 8006d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	0800773d 	.word	0x0800773d
 8006d78:	0800775f 	.word	0x0800775f
 8006d7c:	08007797 	.word	0x08007797
 8006d80:	080077bb 	.word	0x080077bb

08006d84 <_cleanup_r>:
 8006d84:	4901      	ldr	r1, [pc, #4]	; (8006d8c <_cleanup_r+0x8>)
 8006d86:	f000 b8af 	b.w	8006ee8 <_fwalk_reent>
 8006d8a:	bf00      	nop
 8006d8c:	08006cc5 	.word	0x08006cc5

08006d90 <__sfmoreglue>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	2568      	movs	r5, #104	; 0x68
 8006d94:	1e4a      	subs	r2, r1, #1
 8006d96:	4355      	muls	r5, r2
 8006d98:	460e      	mov	r6, r1
 8006d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d9e:	f000 f975 	bl	800708c <_malloc_r>
 8006da2:	4604      	mov	r4, r0
 8006da4:	b140      	cbz	r0, 8006db8 <__sfmoreglue+0x28>
 8006da6:	2100      	movs	r1, #0
 8006da8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dac:	300c      	adds	r0, #12
 8006dae:	60a0      	str	r0, [r4, #8]
 8006db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006db4:	f7ff fd58 	bl	8006868 <memset>
 8006db8:	4620      	mov	r0, r4
 8006dba:	bd70      	pop	{r4, r5, r6, pc}

08006dbc <__sfp_lock_acquire>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__sfp_lock_acquire+0x8>)
 8006dbe:	f000 b8b3 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	2000055c 	.word	0x2000055c

08006dc8 <__sfp_lock_release>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__sfp_lock_release+0x8>)
 8006dca:	f000 b8ae 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	2000055c 	.word	0x2000055c

08006dd4 <__sinit_lock_acquire>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__sinit_lock_acquire+0x8>)
 8006dd6:	f000 b8a7 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8006dda:	bf00      	nop
 8006ddc:	20000557 	.word	0x20000557

08006de0 <__sinit_lock_release>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__sinit_lock_release+0x8>)
 8006de2:	f000 b8a2 	b.w	8006f2a <__retarget_lock_release_recursive>
 8006de6:	bf00      	nop
 8006de8:	20000557 	.word	0x20000557

08006dec <__sinit>:
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4604      	mov	r4, r0
 8006df0:	f7ff fff0 	bl	8006dd4 <__sinit_lock_acquire>
 8006df4:	69a3      	ldr	r3, [r4, #24]
 8006df6:	b11b      	cbz	r3, 8006e00 <__sinit+0x14>
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	f7ff bff0 	b.w	8006de0 <__sinit_lock_release>
 8006e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e04:	6523      	str	r3, [r4, #80]	; 0x50
 8006e06:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <__sinit+0x68>)
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <__sinit+0x6c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	bf08      	it	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	4620      	mov	r0, r4
 8006e16:	bf08      	it	eq
 8006e18:	61a3      	streq	r3, [r4, #24]
 8006e1a:	f000 f81f 	bl	8006e5c <__sfp>
 8006e1e:	6060      	str	r0, [r4, #4]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 f81b 	bl	8006e5c <__sfp>
 8006e26:	60a0      	str	r0, [r4, #8]
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 f817 	bl	8006e5c <__sfp>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2104      	movs	r1, #4
 8006e32:	60e0      	str	r0, [r4, #12]
 8006e34:	6860      	ldr	r0, [r4, #4]
 8006e36:	f7ff ff81 	bl	8006d3c <std>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2109      	movs	r1, #9
 8006e3e:	68a0      	ldr	r0, [r4, #8]
 8006e40:	f7ff ff7c 	bl	8006d3c <std>
 8006e44:	2202      	movs	r2, #2
 8006e46:	2112      	movs	r1, #18
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	f7ff ff77 	bl	8006d3c <std>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61a3      	str	r3, [r4, #24]
 8006e52:	e7d1      	b.n	8006df8 <__sinit+0xc>
 8006e54:	08008204 	.word	0x08008204
 8006e58:	08006d85 	.word	0x08006d85

08006e5c <__sfp>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	4607      	mov	r7, r0
 8006e60:	f7ff ffac 	bl	8006dbc <__sfp_lock_acquire>
 8006e64:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <__sfp+0x84>)
 8006e66:	681e      	ldr	r6, [r3, #0]
 8006e68:	69b3      	ldr	r3, [r6, #24]
 8006e6a:	b913      	cbnz	r3, 8006e72 <__sfp+0x16>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff ffbd 	bl	8006dec <__sinit>
 8006e72:	3648      	adds	r6, #72	; 0x48
 8006e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	d503      	bpl.n	8006e84 <__sfp+0x28>
 8006e7c:	6833      	ldr	r3, [r6, #0]
 8006e7e:	b30b      	cbz	r3, 8006ec4 <__sfp+0x68>
 8006e80:	6836      	ldr	r6, [r6, #0]
 8006e82:	e7f7      	b.n	8006e74 <__sfp+0x18>
 8006e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e88:	b9d5      	cbnz	r5, 8006ec0 <__sfp+0x64>
 8006e8a:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <__sfp+0x88>)
 8006e8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e90:	60e3      	str	r3, [r4, #12]
 8006e92:	6665      	str	r5, [r4, #100]	; 0x64
 8006e94:	f000 f847 	bl	8006f26 <__retarget_lock_init_recursive>
 8006e98:	f7ff ff96 	bl	8006dc8 <__sfp_lock_release>
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ea8:	6025      	str	r5, [r4, #0]
 8006eaa:	61a5      	str	r5, [r4, #24]
 8006eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eb0:	f7ff fcda 	bl	8006868 <memset>
 8006eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec0:	3468      	adds	r4, #104	; 0x68
 8006ec2:	e7d9      	b.n	8006e78 <__sfp+0x1c>
 8006ec4:	2104      	movs	r1, #4
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f7ff ff62 	bl	8006d90 <__sfmoreglue>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	6030      	str	r0, [r6, #0]
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d1d5      	bne.n	8006e80 <__sfp+0x24>
 8006ed4:	f7ff ff78 	bl	8006dc8 <__sfp_lock_release>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	e7ee      	b.n	8006ebc <__sfp+0x60>
 8006ede:	bf00      	nop
 8006ee0:	08008204 	.word	0x08008204
 8006ee4:	ffff0001 	.word	0xffff0001

08006ee8 <_fwalk_reent>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4606      	mov	r6, r0
 8006eee:	4688      	mov	r8, r1
 8006ef0:	2700      	movs	r7, #0
 8006ef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006efa:	f1b9 0901 	subs.w	r9, r9, #1
 8006efe:	d505      	bpl.n	8006f0c <_fwalk_reent+0x24>
 8006f00:	6824      	ldr	r4, [r4, #0]
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	d1f7      	bne.n	8006ef6 <_fwalk_reent+0xe>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0c:	89ab      	ldrh	r3, [r5, #12]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d907      	bls.n	8006f22 <_fwalk_reent+0x3a>
 8006f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f16:	3301      	adds	r3, #1
 8006f18:	d003      	beq.n	8006f22 <_fwalk_reent+0x3a>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	47c0      	blx	r8
 8006f20:	4307      	orrs	r7, r0
 8006f22:	3568      	adds	r5, #104	; 0x68
 8006f24:	e7e9      	b.n	8006efa <_fwalk_reent+0x12>

08006f26 <__retarget_lock_init_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <__retarget_lock_acquire_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_release_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <__swhatbuf_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460e      	mov	r6, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	4614      	mov	r4, r2
 8006f36:	2900      	cmp	r1, #0
 8006f38:	461d      	mov	r5, r3
 8006f3a:	b096      	sub	sp, #88	; 0x58
 8006f3c:	da07      	bge.n	8006f4e <__swhatbuf_r+0x22>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	89b3      	ldrh	r3, [r6, #12]
 8006f44:	061a      	lsls	r2, r3, #24
 8006f46:	d410      	bmi.n	8006f6a <__swhatbuf_r+0x3e>
 8006f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4c:	e00e      	b.n	8006f6c <__swhatbuf_r+0x40>
 8006f4e:	466a      	mov	r2, sp
 8006f50:	f000 fc5a 	bl	8007808 <_fstat_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dbf2      	blt.n	8006f3e <__swhatbuf_r+0x12>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f62:	425a      	negs	r2, r3
 8006f64:	415a      	adcs	r2, r3
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	e7ee      	b.n	8006f48 <__swhatbuf_r+0x1c>
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	b016      	add	sp, #88	; 0x58
 8006f72:	bd70      	pop	{r4, r5, r6, pc}

08006f74 <__smakebuf_r>:
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f78:	079d      	lsls	r5, r3, #30
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d507      	bpl.n	8006f90 <__smakebuf_r+0x1c>
 8006f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	466a      	mov	r2, sp
 8006f92:	ab01      	add	r3, sp, #4
 8006f94:	f7ff ffca 	bl	8006f2c <__swhatbuf_r>
 8006f98:	9900      	ldr	r1, [sp, #0]
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f875 	bl	800708c <_malloc_r>
 8006fa2:	b948      	cbnz	r0, 8006fb8 <__smakebuf_r+0x44>
 8006fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa8:	059a      	lsls	r2, r3, #22
 8006faa:	d4ef      	bmi.n	8006f8c <__smakebuf_r+0x18>
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	e7e3      	b.n	8006f80 <__smakebuf_r+0xc>
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <__smakebuf_r+0x7c>)
 8006fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	6020      	str	r0, [r4, #0]
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	6120      	str	r0, [r4, #16]
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	b15b      	cbz	r3, 8006fe8 <__smakebuf_r+0x74>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd6:	f000 fc29 	bl	800782c <_isatty_r>
 8006fda:	b128      	cbz	r0, 8006fe8 <__smakebuf_r+0x74>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	89a0      	ldrh	r0, [r4, #12]
 8006fea:	4305      	orrs	r5, r0
 8006fec:	81a5      	strh	r5, [r4, #12]
 8006fee:	e7cd      	b.n	8006f8c <__smakebuf_r+0x18>
 8006ff0:	08006d85 	.word	0x08006d85

08006ff4 <_free_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d043      	beq.n	8007084 <_free_r+0x90>
 8006ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007000:	1f0c      	subs	r4, r1, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfb8      	it	lt
 8007006:	18e4      	addlt	r4, r4, r3
 8007008:	f000 fc40 	bl	800788c <__malloc_lock>
 800700c:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <_free_r+0x94>)
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	4610      	mov	r0, r2
 8007012:	b933      	cbnz	r3, 8007022 <_free_r+0x2e>
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	6014      	str	r4, [r2, #0]
 8007018:	4628      	mov	r0, r5
 800701a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701e:	f000 bc3b 	b.w	8007898 <__malloc_unlock>
 8007022:	42a3      	cmp	r3, r4
 8007024:	d90a      	bls.n	800703c <_free_r+0x48>
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	1862      	adds	r2, r4, r1
 800702a:	4293      	cmp	r3, r2
 800702c:	bf01      	itttt	eq
 800702e:	681a      	ldreq	r2, [r3, #0]
 8007030:	685b      	ldreq	r3, [r3, #4]
 8007032:	1852      	addeq	r2, r2, r1
 8007034:	6022      	streq	r2, [r4, #0]
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6004      	str	r4, [r0, #0]
 800703a:	e7ed      	b.n	8007018 <_free_r+0x24>
 800703c:	461a      	mov	r2, r3
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	b10b      	cbz	r3, 8007046 <_free_r+0x52>
 8007042:	42a3      	cmp	r3, r4
 8007044:	d9fa      	bls.n	800703c <_free_r+0x48>
 8007046:	6811      	ldr	r1, [r2, #0]
 8007048:	1850      	adds	r0, r2, r1
 800704a:	42a0      	cmp	r0, r4
 800704c:	d10b      	bne.n	8007066 <_free_r+0x72>
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	4401      	add	r1, r0
 8007052:	1850      	adds	r0, r2, r1
 8007054:	4283      	cmp	r3, r0
 8007056:	6011      	str	r1, [r2, #0]
 8007058:	d1de      	bne.n	8007018 <_free_r+0x24>
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4401      	add	r1, r0
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	6053      	str	r3, [r2, #4]
 8007064:	e7d8      	b.n	8007018 <_free_r+0x24>
 8007066:	d902      	bls.n	800706e <_free_r+0x7a>
 8007068:	230c      	movs	r3, #12
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	e7d4      	b.n	8007018 <_free_r+0x24>
 800706e:	6820      	ldr	r0, [r4, #0]
 8007070:	1821      	adds	r1, r4, r0
 8007072:	428b      	cmp	r3, r1
 8007074:	bf01      	itttt	eq
 8007076:	6819      	ldreq	r1, [r3, #0]
 8007078:	685b      	ldreq	r3, [r3, #4]
 800707a:	1809      	addeq	r1, r1, r0
 800707c:	6021      	streq	r1, [r4, #0]
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	6054      	str	r4, [r2, #4]
 8007082:	e7c9      	b.n	8007018 <_free_r+0x24>
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	bf00      	nop
 8007088:	2000031c 	.word	0x2000031c

0800708c <_malloc_r>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	1ccd      	adds	r5, r1, #3
 8007090:	f025 0503 	bic.w	r5, r5, #3
 8007094:	3508      	adds	r5, #8
 8007096:	2d0c      	cmp	r5, #12
 8007098:	bf38      	it	cc
 800709a:	250c      	movcc	r5, #12
 800709c:	2d00      	cmp	r5, #0
 800709e:	4606      	mov	r6, r0
 80070a0:	db01      	blt.n	80070a6 <_malloc_r+0x1a>
 80070a2:	42a9      	cmp	r1, r5
 80070a4:	d903      	bls.n	80070ae <_malloc_r+0x22>
 80070a6:	230c      	movs	r3, #12
 80070a8:	6033      	str	r3, [r6, #0]
 80070aa:	2000      	movs	r0, #0
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ae:	f000 fbed 	bl	800788c <__malloc_lock>
 80070b2:	4921      	ldr	r1, [pc, #132]	; (8007138 <_malloc_r+0xac>)
 80070b4:	680a      	ldr	r2, [r1, #0]
 80070b6:	4614      	mov	r4, r2
 80070b8:	b99c      	cbnz	r4, 80070e2 <_malloc_r+0x56>
 80070ba:	4f20      	ldr	r7, [pc, #128]	; (800713c <_malloc_r+0xb0>)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	b923      	cbnz	r3, 80070ca <_malloc_r+0x3e>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4630      	mov	r0, r6
 80070c4:	f000 fb2a 	bl	800771c <_sbrk_r>
 80070c8:	6038      	str	r0, [r7, #0]
 80070ca:	4629      	mov	r1, r5
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 fb25 	bl	800771c <_sbrk_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d123      	bne.n	800711e <_malloc_r+0x92>
 80070d6:	230c      	movs	r3, #12
 80070d8:	4630      	mov	r0, r6
 80070da:	6033      	str	r3, [r6, #0]
 80070dc:	f000 fbdc 	bl	8007898 <__malloc_unlock>
 80070e0:	e7e3      	b.n	80070aa <_malloc_r+0x1e>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	1b5b      	subs	r3, r3, r5
 80070e6:	d417      	bmi.n	8007118 <_malloc_r+0x8c>
 80070e8:	2b0b      	cmp	r3, #11
 80070ea:	d903      	bls.n	80070f4 <_malloc_r+0x68>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	441c      	add	r4, r3
 80070f0:	6025      	str	r5, [r4, #0]
 80070f2:	e004      	b.n	80070fe <_malloc_r+0x72>
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	42a2      	cmp	r2, r4
 80070f8:	bf0c      	ite	eq
 80070fa:	600b      	streq	r3, [r1, #0]
 80070fc:	6053      	strne	r3, [r2, #4]
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 fbca 	bl	8007898 <__malloc_unlock>
 8007104:	f104 000b 	add.w	r0, r4, #11
 8007108:	1d23      	adds	r3, r4, #4
 800710a:	f020 0007 	bic.w	r0, r0, #7
 800710e:	1ac2      	subs	r2, r0, r3
 8007110:	d0cc      	beq.n	80070ac <_malloc_r+0x20>
 8007112:	1a1b      	subs	r3, r3, r0
 8007114:	50a3      	str	r3, [r4, r2]
 8007116:	e7c9      	b.n	80070ac <_malloc_r+0x20>
 8007118:	4622      	mov	r2, r4
 800711a:	6864      	ldr	r4, [r4, #4]
 800711c:	e7cc      	b.n	80070b8 <_malloc_r+0x2c>
 800711e:	1cc4      	adds	r4, r0, #3
 8007120:	f024 0403 	bic.w	r4, r4, #3
 8007124:	42a0      	cmp	r0, r4
 8007126:	d0e3      	beq.n	80070f0 <_malloc_r+0x64>
 8007128:	1a21      	subs	r1, r4, r0
 800712a:	4630      	mov	r0, r6
 800712c:	f000 faf6 	bl	800771c <_sbrk_r>
 8007130:	3001      	adds	r0, #1
 8007132:	d1dd      	bne.n	80070f0 <_malloc_r+0x64>
 8007134:	e7cf      	b.n	80070d6 <_malloc_r+0x4a>
 8007136:	bf00      	nop
 8007138:	2000031c 	.word	0x2000031c
 800713c:	20000320 	.word	0x20000320

08007140 <__sfputc_r>:
 8007140:	6893      	ldr	r3, [r2, #8]
 8007142:	b410      	push	{r4}
 8007144:	3b01      	subs	r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	6093      	str	r3, [r2, #8]
 800714a:	da07      	bge.n	800715c <__sfputc_r+0x1c>
 800714c:	6994      	ldr	r4, [r2, #24]
 800714e:	42a3      	cmp	r3, r4
 8007150:	db01      	blt.n	8007156 <__sfputc_r+0x16>
 8007152:	290a      	cmp	r1, #10
 8007154:	d102      	bne.n	800715c <__sfputc_r+0x1c>
 8007156:	bc10      	pop	{r4}
 8007158:	f7ff bc6e 	b.w	8006a38 <__swbuf_r>
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	1c58      	adds	r0, r3, #1
 8007160:	6010      	str	r0, [r2, #0]
 8007162:	7019      	strb	r1, [r3, #0]
 8007164:	4608      	mov	r0, r1
 8007166:	bc10      	pop	{r4}
 8007168:	4770      	bx	lr

0800716a <__sfputs_r>:
 800716a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	4614      	mov	r4, r2
 8007172:	18d5      	adds	r5, r2, r3
 8007174:	42ac      	cmp	r4, r5
 8007176:	d101      	bne.n	800717c <__sfputs_r+0x12>
 8007178:	2000      	movs	r0, #0
 800717a:	e007      	b.n	800718c <__sfputs_r+0x22>
 800717c:	463a      	mov	r2, r7
 800717e:	4630      	mov	r0, r6
 8007180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007184:	f7ff ffdc 	bl	8007140 <__sfputc_r>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d1f3      	bne.n	8007174 <__sfputs_r+0xa>
 800718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007190 <_vfiprintf_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	460d      	mov	r5, r1
 8007196:	4614      	mov	r4, r2
 8007198:	4698      	mov	r8, r3
 800719a:	4606      	mov	r6, r0
 800719c:	b09d      	sub	sp, #116	; 0x74
 800719e:	b118      	cbz	r0, 80071a8 <_vfiprintf_r+0x18>
 80071a0:	6983      	ldr	r3, [r0, #24]
 80071a2:	b90b      	cbnz	r3, 80071a8 <_vfiprintf_r+0x18>
 80071a4:	f7ff fe22 	bl	8006dec <__sinit>
 80071a8:	4b89      	ldr	r3, [pc, #548]	; (80073d0 <_vfiprintf_r+0x240>)
 80071aa:	429d      	cmp	r5, r3
 80071ac:	d11b      	bne.n	80071e6 <_vfiprintf_r+0x56>
 80071ae:	6875      	ldr	r5, [r6, #4]
 80071b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b2:	07d9      	lsls	r1, r3, #31
 80071b4:	d405      	bmi.n	80071c2 <_vfiprintf_r+0x32>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	059a      	lsls	r2, r3, #22
 80071ba:	d402      	bmi.n	80071c2 <_vfiprintf_r+0x32>
 80071bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071be:	f7ff feb3 	bl	8006f28 <__retarget_lock_acquire_recursive>
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	071b      	lsls	r3, r3, #28
 80071c6:	d501      	bpl.n	80071cc <_vfiprintf_r+0x3c>
 80071c8:	692b      	ldr	r3, [r5, #16]
 80071ca:	b9eb      	cbnz	r3, 8007208 <_vfiprintf_r+0x78>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7ff fc84 	bl	8006adc <__swsetup_r>
 80071d4:	b1c0      	cbz	r0, 8007208 <_vfiprintf_r+0x78>
 80071d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d8:	07dc      	lsls	r4, r3, #31
 80071da:	d50e      	bpl.n	80071fa <_vfiprintf_r+0x6a>
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	b01d      	add	sp, #116	; 0x74
 80071e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e6:	4b7b      	ldr	r3, [pc, #492]	; (80073d4 <_vfiprintf_r+0x244>)
 80071e8:	429d      	cmp	r5, r3
 80071ea:	d101      	bne.n	80071f0 <_vfiprintf_r+0x60>
 80071ec:	68b5      	ldr	r5, [r6, #8]
 80071ee:	e7df      	b.n	80071b0 <_vfiprintf_r+0x20>
 80071f0:	4b79      	ldr	r3, [pc, #484]	; (80073d8 <_vfiprintf_r+0x248>)
 80071f2:	429d      	cmp	r5, r3
 80071f4:	bf08      	it	eq
 80071f6:	68f5      	ldreq	r5, [r6, #12]
 80071f8:	e7da      	b.n	80071b0 <_vfiprintf_r+0x20>
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d4ed      	bmi.n	80071dc <_vfiprintf_r+0x4c>
 8007200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007202:	f7ff fe92 	bl	8006f2a <__retarget_lock_release_recursive>
 8007206:	e7e9      	b.n	80071dc <_vfiprintf_r+0x4c>
 8007208:	2300      	movs	r3, #0
 800720a:	9309      	str	r3, [sp, #36]	; 0x24
 800720c:	2320      	movs	r3, #32
 800720e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f04f 0901 	mov.w	r9, #1
 8007218:	f8cd 800c 	str.w	r8, [sp, #12]
 800721c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80073dc <_vfiprintf_r+0x24c>
 8007220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007224:	4623      	mov	r3, r4
 8007226:	469a      	mov	sl, r3
 8007228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722c:	b10a      	cbz	r2, 8007232 <_vfiprintf_r+0xa2>
 800722e:	2a25      	cmp	r2, #37	; 0x25
 8007230:	d1f9      	bne.n	8007226 <_vfiprintf_r+0x96>
 8007232:	ebba 0b04 	subs.w	fp, sl, r4
 8007236:	d00b      	beq.n	8007250 <_vfiprintf_r+0xc0>
 8007238:	465b      	mov	r3, fp
 800723a:	4622      	mov	r2, r4
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff ff93 	bl	800716a <__sfputs_r>
 8007244:	3001      	adds	r0, #1
 8007246:	f000 80aa 	beq.w	800739e <_vfiprintf_r+0x20e>
 800724a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724c:	445a      	add	r2, fp
 800724e:	9209      	str	r2, [sp, #36]	; 0x24
 8007250:	f89a 3000 	ldrb.w	r3, [sl]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a2 	beq.w	800739e <_vfiprintf_r+0x20e>
 800725a:	2300      	movs	r3, #0
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007264:	f10a 0a01 	add.w	sl, sl, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	9307      	str	r3, [sp, #28]
 800726c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007270:	931a      	str	r3, [sp, #104]	; 0x68
 8007272:	4654      	mov	r4, sl
 8007274:	2205      	movs	r2, #5
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4858      	ldr	r0, [pc, #352]	; (80073dc <_vfiprintf_r+0x24c>)
 800727c:	f000 faf8 	bl	8007870 <memchr>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	b9d8      	cbnz	r0, 80072bc <_vfiprintf_r+0x12c>
 8007284:	06d1      	lsls	r1, r2, #27
 8007286:	bf44      	itt	mi
 8007288:	2320      	movmi	r3, #32
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728e:	0713      	lsls	r3, r2, #28
 8007290:	bf44      	itt	mi
 8007292:	232b      	movmi	r3, #43	; 0x2b
 8007294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007298:	f89a 3000 	ldrb.w	r3, [sl]
 800729c:	2b2a      	cmp	r3, #42	; 0x2a
 800729e:	d015      	beq.n	80072cc <_vfiprintf_r+0x13c>
 80072a0:	4654      	mov	r4, sl
 80072a2:	2000      	movs	r0, #0
 80072a4:	f04f 0c0a 	mov.w	ip, #10
 80072a8:	9a07      	ldr	r2, [sp, #28]
 80072aa:	4621      	mov	r1, r4
 80072ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b0:	3b30      	subs	r3, #48	; 0x30
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	d94e      	bls.n	8007354 <_vfiprintf_r+0x1c4>
 80072b6:	b1b0      	cbz	r0, 80072e6 <_vfiprintf_r+0x156>
 80072b8:	9207      	str	r2, [sp, #28]
 80072ba:	e014      	b.n	80072e6 <_vfiprintf_r+0x156>
 80072bc:	eba0 0308 	sub.w	r3, r0, r8
 80072c0:	fa09 f303 	lsl.w	r3, r9, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	46a2      	mov	sl, r4
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	e7d2      	b.n	8007272 <_vfiprintf_r+0xe2>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1d19      	adds	r1, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfbb      	ittet	lt
 80072d8:	425b      	neglt	r3, r3
 80072da:	f042 0202 	orrlt.w	r2, r2, #2
 80072de:	9307      	strge	r3, [sp, #28]
 80072e0:	9307      	strlt	r3, [sp, #28]
 80072e2:	bfb8      	it	lt
 80072e4:	9204      	strlt	r2, [sp, #16]
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	2b2e      	cmp	r3, #46	; 0x2e
 80072ea:	d10c      	bne.n	8007306 <_vfiprintf_r+0x176>
 80072ec:	7863      	ldrb	r3, [r4, #1]
 80072ee:	2b2a      	cmp	r3, #42	; 0x2a
 80072f0:	d135      	bne.n	800735e <_vfiprintf_r+0x1ce>
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	3402      	adds	r4, #2
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	f04f 33ff 	movlt.w	r3, #4294967295
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073ec <_vfiprintf_r+0x25c>
 800730a:	2203      	movs	r2, #3
 800730c:	4650      	mov	r0, sl
 800730e:	7821      	ldrb	r1, [r4, #0]
 8007310:	f000 faae 	bl	8007870 <memchr>
 8007314:	b140      	cbz	r0, 8007328 <_vfiprintf_r+0x198>
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	eba0 000a 	sub.w	r0, r0, sl
 800731c:	fa03 f000 	lsl.w	r0, r3, r0
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	3401      	adds	r4, #1
 8007324:	4303      	orrs	r3, r0
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732c:	2206      	movs	r2, #6
 800732e:	482c      	ldr	r0, [pc, #176]	; (80073e0 <_vfiprintf_r+0x250>)
 8007330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007334:	f000 fa9c 	bl	8007870 <memchr>
 8007338:	2800      	cmp	r0, #0
 800733a:	d03f      	beq.n	80073bc <_vfiprintf_r+0x22c>
 800733c:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <_vfiprintf_r+0x254>)
 800733e:	bb1b      	cbnz	r3, 8007388 <_vfiprintf_r+0x1f8>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	3307      	adds	r3, #7
 8007344:	f023 0307 	bic.w	r3, r3, #7
 8007348:	3308      	adds	r3, #8
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	443b      	add	r3, r7
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	e767      	b.n	8007224 <_vfiprintf_r+0x94>
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	fb0c 3202 	mla	r2, ip, r2, r3
 800735c:	e7a5      	b.n	80072aa <_vfiprintf_r+0x11a>
 800735e:	2300      	movs	r3, #0
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4619      	mov	r1, r3
 8007366:	3401      	adds	r4, #1
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	4620      	mov	r0, r4
 800736c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007370:	3a30      	subs	r2, #48	; 0x30
 8007372:	2a09      	cmp	r2, #9
 8007374:	d903      	bls.n	800737e <_vfiprintf_r+0x1ee>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c5      	beq.n	8007306 <_vfiprintf_r+0x176>
 800737a:	9105      	str	r1, [sp, #20]
 800737c:	e7c3      	b.n	8007306 <_vfiprintf_r+0x176>
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	fb0c 2101 	mla	r1, ip, r1, r2
 8007386:	e7f0      	b.n	800736a <_vfiprintf_r+0x1da>
 8007388:	ab03      	add	r3, sp, #12
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	462a      	mov	r2, r5
 800738e:	4630      	mov	r0, r6
 8007390:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <_vfiprintf_r+0x258>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	f3af 8000 	nop.w
 8007398:	4607      	mov	r7, r0
 800739a:	1c78      	adds	r0, r7, #1
 800739c:	d1d6      	bne.n	800734c <_vfiprintf_r+0x1bc>
 800739e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a0:	07d9      	lsls	r1, r3, #31
 80073a2:	d405      	bmi.n	80073b0 <_vfiprintf_r+0x220>
 80073a4:	89ab      	ldrh	r3, [r5, #12]
 80073a6:	059a      	lsls	r2, r3, #22
 80073a8:	d402      	bmi.n	80073b0 <_vfiprintf_r+0x220>
 80073aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ac:	f7ff fdbd 	bl	8006f2a <__retarget_lock_release_recursive>
 80073b0:	89ab      	ldrh	r3, [r5, #12]
 80073b2:	065b      	lsls	r3, r3, #25
 80073b4:	f53f af12 	bmi.w	80071dc <_vfiprintf_r+0x4c>
 80073b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ba:	e711      	b.n	80071e0 <_vfiprintf_r+0x50>
 80073bc:	ab03      	add	r3, sp, #12
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	462a      	mov	r2, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <_vfiprintf_r+0x258>)
 80073c6:	a904      	add	r1, sp, #16
 80073c8:	f000 f882 	bl	80074d0 <_printf_i>
 80073cc:	e7e4      	b.n	8007398 <_vfiprintf_r+0x208>
 80073ce:	bf00      	nop
 80073d0:	08008250 	.word	0x08008250
 80073d4:	08008270 	.word	0x08008270
 80073d8:	08008230 	.word	0x08008230
 80073dc:	08008290 	.word	0x08008290
 80073e0:	0800829a 	.word	0x0800829a
 80073e4:	00000000 	.word	0x00000000
 80073e8:	0800716b 	.word	0x0800716b
 80073ec:	08008296 	.word	0x08008296

080073f0 <_printf_common>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	4616      	mov	r6, r2
 80073f6:	4699      	mov	r9, r3
 80073f8:	688a      	ldr	r2, [r1, #8]
 80073fa:	690b      	ldr	r3, [r1, #16]
 80073fc:	4607      	mov	r7, r0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfb8      	it	lt
 8007402:	4613      	movlt	r3, r2
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800740a:	460c      	mov	r4, r1
 800740c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007410:	b10a      	cbz	r2, 8007416 <_printf_common+0x26>
 8007412:	3301      	adds	r3, #1
 8007414:	6033      	str	r3, [r6, #0]
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	0699      	lsls	r1, r3, #26
 800741a:	bf42      	ittt	mi
 800741c:	6833      	ldrmi	r3, [r6, #0]
 800741e:	3302      	addmi	r3, #2
 8007420:	6033      	strmi	r3, [r6, #0]
 8007422:	6825      	ldr	r5, [r4, #0]
 8007424:	f015 0506 	ands.w	r5, r5, #6
 8007428:	d106      	bne.n	8007438 <_printf_common+0x48>
 800742a:	f104 0a19 	add.w	sl, r4, #25
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	6832      	ldr	r2, [r6, #0]
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	42ab      	cmp	r3, r5
 8007436:	dc28      	bgt.n	800748a <_printf_common+0x9a>
 8007438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800743c:	1e13      	subs	r3, r2, #0
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	bf18      	it	ne
 8007442:	2301      	movne	r3, #1
 8007444:	0692      	lsls	r2, r2, #26
 8007446:	d42d      	bmi.n	80074a4 <_printf_common+0xb4>
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007450:	47c0      	blx	r8
 8007452:	3001      	adds	r0, #1
 8007454:	d020      	beq.n	8007498 <_printf_common+0xa8>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	68e5      	ldr	r5, [r4, #12]
 800745a:	f003 0306 	and.w	r3, r3, #6
 800745e:	2b04      	cmp	r3, #4
 8007460:	bf18      	it	ne
 8007462:	2500      	movne	r5, #0
 8007464:	6832      	ldr	r2, [r6, #0]
 8007466:	f04f 0600 	mov.w	r6, #0
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	bf08      	it	eq
 800746e:	1aad      	subeq	r5, r5, r2
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	bf08      	it	eq
 8007474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007478:	4293      	cmp	r3, r2
 800747a:	bfc4      	itt	gt
 800747c:	1a9b      	subgt	r3, r3, r2
 800747e:	18ed      	addgt	r5, r5, r3
 8007480:	341a      	adds	r4, #26
 8007482:	42b5      	cmp	r5, r6
 8007484:	d11a      	bne.n	80074bc <_printf_common+0xcc>
 8007486:	2000      	movs	r0, #0
 8007488:	e008      	b.n	800749c <_printf_common+0xac>
 800748a:	2301      	movs	r3, #1
 800748c:	4652      	mov	r2, sl
 800748e:	4649      	mov	r1, r9
 8007490:	4638      	mov	r0, r7
 8007492:	47c0      	blx	r8
 8007494:	3001      	adds	r0, #1
 8007496:	d103      	bne.n	80074a0 <_printf_common+0xb0>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	3501      	adds	r5, #1
 80074a2:	e7c4      	b.n	800742e <_printf_common+0x3e>
 80074a4:	2030      	movs	r0, #48	; 0x30
 80074a6:	18e1      	adds	r1, r4, r3
 80074a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074b2:	4422      	add	r2, r4
 80074b4:	3302      	adds	r3, #2
 80074b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ba:	e7c5      	b.n	8007448 <_printf_common+0x58>
 80074bc:	2301      	movs	r3, #1
 80074be:	4622      	mov	r2, r4
 80074c0:	4649      	mov	r1, r9
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c0      	blx	r8
 80074c6:	3001      	adds	r0, #1
 80074c8:	d0e6      	beq.n	8007498 <_printf_common+0xa8>
 80074ca:	3601      	adds	r6, #1
 80074cc:	e7d9      	b.n	8007482 <_printf_common+0x92>
	...

080074d0 <_printf_i>:
 80074d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	7e27      	ldrb	r7, [r4, #24]
 80074d8:	4691      	mov	r9, r2
 80074da:	2f78      	cmp	r7, #120	; 0x78
 80074dc:	4680      	mov	r8, r0
 80074de:	469a      	mov	sl, r3
 80074e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e6:	d807      	bhi.n	80074f8 <_printf_i+0x28>
 80074e8:	2f62      	cmp	r7, #98	; 0x62
 80074ea:	d80a      	bhi.n	8007502 <_printf_i+0x32>
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	f000 80d9 	beq.w	80076a4 <_printf_i+0x1d4>
 80074f2:	2f58      	cmp	r7, #88	; 0x58
 80074f4:	f000 80a4 	beq.w	8007640 <_printf_i+0x170>
 80074f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007500:	e03a      	b.n	8007578 <_printf_i+0xa8>
 8007502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007506:	2b15      	cmp	r3, #21
 8007508:	d8f6      	bhi.n	80074f8 <_printf_i+0x28>
 800750a:	a001      	add	r0, pc, #4	; (adr r0, 8007510 <_printf_i+0x40>)
 800750c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007510:	08007569 	.word	0x08007569
 8007514:	0800757d 	.word	0x0800757d
 8007518:	080074f9 	.word	0x080074f9
 800751c:	080074f9 	.word	0x080074f9
 8007520:	080074f9 	.word	0x080074f9
 8007524:	080074f9 	.word	0x080074f9
 8007528:	0800757d 	.word	0x0800757d
 800752c:	080074f9 	.word	0x080074f9
 8007530:	080074f9 	.word	0x080074f9
 8007534:	080074f9 	.word	0x080074f9
 8007538:	080074f9 	.word	0x080074f9
 800753c:	0800768b 	.word	0x0800768b
 8007540:	080075ad 	.word	0x080075ad
 8007544:	0800766d 	.word	0x0800766d
 8007548:	080074f9 	.word	0x080074f9
 800754c:	080074f9 	.word	0x080074f9
 8007550:	080076ad 	.word	0x080076ad
 8007554:	080074f9 	.word	0x080074f9
 8007558:	080075ad 	.word	0x080075ad
 800755c:	080074f9 	.word	0x080074f9
 8007560:	080074f9 	.word	0x080074f9
 8007564:	08007675 	.word	0x08007675
 8007568:	680b      	ldr	r3, [r1, #0]
 800756a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	600a      	str	r2, [r1, #0]
 8007574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007578:	2301      	movs	r3, #1
 800757a:	e0a4      	b.n	80076c6 <_printf_i+0x1f6>
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	6808      	ldr	r0, [r1, #0]
 8007580:	062e      	lsls	r6, r5, #24
 8007582:	f100 0304 	add.w	r3, r0, #4
 8007586:	d50a      	bpl.n	800759e <_printf_i+0xce>
 8007588:	6805      	ldr	r5, [r0, #0]
 800758a:	600b      	str	r3, [r1, #0]
 800758c:	2d00      	cmp	r5, #0
 800758e:	da03      	bge.n	8007598 <_printf_i+0xc8>
 8007590:	232d      	movs	r3, #45	; 0x2d
 8007592:	426d      	negs	r5, r5
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007598:	230a      	movs	r3, #10
 800759a:	485e      	ldr	r0, [pc, #376]	; (8007714 <_printf_i+0x244>)
 800759c:	e019      	b.n	80075d2 <_printf_i+0x102>
 800759e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075a2:	6805      	ldr	r5, [r0, #0]
 80075a4:	600b      	str	r3, [r1, #0]
 80075a6:	bf18      	it	ne
 80075a8:	b22d      	sxthne	r5, r5
 80075aa:	e7ef      	b.n	800758c <_printf_i+0xbc>
 80075ac:	680b      	ldr	r3, [r1, #0]
 80075ae:	6825      	ldr	r5, [r4, #0]
 80075b0:	1d18      	adds	r0, r3, #4
 80075b2:	6008      	str	r0, [r1, #0]
 80075b4:	0628      	lsls	r0, r5, #24
 80075b6:	d501      	bpl.n	80075bc <_printf_i+0xec>
 80075b8:	681d      	ldr	r5, [r3, #0]
 80075ba:	e002      	b.n	80075c2 <_printf_i+0xf2>
 80075bc:	0669      	lsls	r1, r5, #25
 80075be:	d5fb      	bpl.n	80075b8 <_printf_i+0xe8>
 80075c0:	881d      	ldrh	r5, [r3, #0]
 80075c2:	2f6f      	cmp	r7, #111	; 0x6f
 80075c4:	bf0c      	ite	eq
 80075c6:	2308      	moveq	r3, #8
 80075c8:	230a      	movne	r3, #10
 80075ca:	4852      	ldr	r0, [pc, #328]	; (8007714 <_printf_i+0x244>)
 80075cc:	2100      	movs	r1, #0
 80075ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075d2:	6866      	ldr	r6, [r4, #4]
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	bfa8      	it	ge
 80075d8:	6821      	ldrge	r1, [r4, #0]
 80075da:	60a6      	str	r6, [r4, #8]
 80075dc:	bfa4      	itt	ge
 80075de:	f021 0104 	bicge.w	r1, r1, #4
 80075e2:	6021      	strge	r1, [r4, #0]
 80075e4:	b90d      	cbnz	r5, 80075ea <_printf_i+0x11a>
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d04d      	beq.n	8007686 <_printf_i+0x1b6>
 80075ea:	4616      	mov	r6, r2
 80075ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f0:	fb03 5711 	mls	r7, r3, r1, r5
 80075f4:	5dc7      	ldrb	r7, [r0, r7]
 80075f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075fa:	462f      	mov	r7, r5
 80075fc:	42bb      	cmp	r3, r7
 80075fe:	460d      	mov	r5, r1
 8007600:	d9f4      	bls.n	80075ec <_printf_i+0x11c>
 8007602:	2b08      	cmp	r3, #8
 8007604:	d10b      	bne.n	800761e <_printf_i+0x14e>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	07df      	lsls	r7, r3, #31
 800760a:	d508      	bpl.n	800761e <_printf_i+0x14e>
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	6861      	ldr	r1, [r4, #4]
 8007610:	4299      	cmp	r1, r3
 8007612:	bfde      	ittt	le
 8007614:	2330      	movle	r3, #48	; 0x30
 8007616:	f806 3c01 	strble.w	r3, [r6, #-1]
 800761a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800761e:	1b92      	subs	r2, r2, r6
 8007620:	6122      	str	r2, [r4, #16]
 8007622:	464b      	mov	r3, r9
 8007624:	4621      	mov	r1, r4
 8007626:	4640      	mov	r0, r8
 8007628:	f8cd a000 	str.w	sl, [sp]
 800762c:	aa03      	add	r2, sp, #12
 800762e:	f7ff fedf 	bl	80073f0 <_printf_common>
 8007632:	3001      	adds	r0, #1
 8007634:	d14c      	bne.n	80076d0 <_printf_i+0x200>
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	b004      	add	sp, #16
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	4834      	ldr	r0, [pc, #208]	; (8007714 <_printf_i+0x244>)
 8007642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007646:	680e      	ldr	r6, [r1, #0]
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	f856 5b04 	ldr.w	r5, [r6], #4
 800764e:	061f      	lsls	r7, r3, #24
 8007650:	600e      	str	r6, [r1, #0]
 8007652:	d514      	bpl.n	800767e <_printf_i+0x1ae>
 8007654:	07d9      	lsls	r1, r3, #31
 8007656:	bf44      	itt	mi
 8007658:	f043 0320 	orrmi.w	r3, r3, #32
 800765c:	6023      	strmi	r3, [r4, #0]
 800765e:	b91d      	cbnz	r5, 8007668 <_printf_i+0x198>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	2310      	movs	r3, #16
 800766a:	e7af      	b.n	80075cc <_printf_i+0xfc>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	f043 0320 	orr.w	r3, r3, #32
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	2378      	movs	r3, #120	; 0x78
 8007676:	4828      	ldr	r0, [pc, #160]	; (8007718 <_printf_i+0x248>)
 8007678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767c:	e7e3      	b.n	8007646 <_printf_i+0x176>
 800767e:	065e      	lsls	r6, r3, #25
 8007680:	bf48      	it	mi
 8007682:	b2ad      	uxthmi	r5, r5
 8007684:	e7e6      	b.n	8007654 <_printf_i+0x184>
 8007686:	4616      	mov	r6, r2
 8007688:	e7bb      	b.n	8007602 <_printf_i+0x132>
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	6826      	ldr	r6, [r4, #0]
 800768e:	1d1d      	adds	r5, r3, #4
 8007690:	6960      	ldr	r0, [r4, #20]
 8007692:	600d      	str	r5, [r1, #0]
 8007694:	0635      	lsls	r5, r6, #24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	d501      	bpl.n	800769e <_printf_i+0x1ce>
 800769a:	6018      	str	r0, [r3, #0]
 800769c:	e002      	b.n	80076a4 <_printf_i+0x1d4>
 800769e:	0671      	lsls	r1, r6, #25
 80076a0:	d5fb      	bpl.n	800769a <_printf_i+0x1ca>
 80076a2:	8018      	strh	r0, [r3, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	4616      	mov	r6, r2
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	e7ba      	b.n	8007622 <_printf_i+0x152>
 80076ac:	680b      	ldr	r3, [r1, #0]
 80076ae:	1d1a      	adds	r2, r3, #4
 80076b0:	600a      	str	r2, [r1, #0]
 80076b2:	681e      	ldr	r6, [r3, #0]
 80076b4:	2100      	movs	r1, #0
 80076b6:	4630      	mov	r0, r6
 80076b8:	6862      	ldr	r2, [r4, #4]
 80076ba:	f000 f8d9 	bl	8007870 <memchr>
 80076be:	b108      	cbz	r0, 80076c4 <_printf_i+0x1f4>
 80076c0:	1b80      	subs	r0, r0, r6
 80076c2:	6060      	str	r0, [r4, #4]
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	2300      	movs	r3, #0
 80076ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ce:	e7a8      	b.n	8007622 <_printf_i+0x152>
 80076d0:	4632      	mov	r2, r6
 80076d2:	4649      	mov	r1, r9
 80076d4:	4640      	mov	r0, r8
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	47d0      	blx	sl
 80076da:	3001      	adds	r0, #1
 80076dc:	d0ab      	beq.n	8007636 <_printf_i+0x166>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	079b      	lsls	r3, r3, #30
 80076e2:	d413      	bmi.n	800770c <_printf_i+0x23c>
 80076e4:	68e0      	ldr	r0, [r4, #12]
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	4298      	cmp	r0, r3
 80076ea:	bfb8      	it	lt
 80076ec:	4618      	movlt	r0, r3
 80076ee:	e7a4      	b.n	800763a <_printf_i+0x16a>
 80076f0:	2301      	movs	r3, #1
 80076f2:	4632      	mov	r2, r6
 80076f4:	4649      	mov	r1, r9
 80076f6:	4640      	mov	r0, r8
 80076f8:	47d0      	blx	sl
 80076fa:	3001      	adds	r0, #1
 80076fc:	d09b      	beq.n	8007636 <_printf_i+0x166>
 80076fe:	3501      	adds	r5, #1
 8007700:	68e3      	ldr	r3, [r4, #12]
 8007702:	9903      	ldr	r1, [sp, #12]
 8007704:	1a5b      	subs	r3, r3, r1
 8007706:	42ab      	cmp	r3, r5
 8007708:	dcf2      	bgt.n	80076f0 <_printf_i+0x220>
 800770a:	e7eb      	b.n	80076e4 <_printf_i+0x214>
 800770c:	2500      	movs	r5, #0
 800770e:	f104 0619 	add.w	r6, r4, #25
 8007712:	e7f5      	b.n	8007700 <_printf_i+0x230>
 8007714:	080082a1 	.word	0x080082a1
 8007718:	080082b2 	.word	0x080082b2

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	2300      	movs	r3, #0
 8007720:	4d05      	ldr	r5, [pc, #20]	; (8007738 <_sbrk_r+0x1c>)
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7fe fe98 	bl	800645c <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000560 	.word	0x20000560

0800773c <__sread>:
 800773c:	b510      	push	{r4, lr}
 800773e:	460c      	mov	r4, r1
 8007740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007744:	f000 f8ae 	bl	80078a4 <_read_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	bfab      	itete	ge
 800774c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800774e:	89a3      	ldrhlt	r3, [r4, #12]
 8007750:	181b      	addge	r3, r3, r0
 8007752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007756:	bfac      	ite	ge
 8007758:	6563      	strge	r3, [r4, #84]	; 0x54
 800775a:	81a3      	strhlt	r3, [r4, #12]
 800775c:	bd10      	pop	{r4, pc}

0800775e <__swrite>:
 800775e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007762:	461f      	mov	r7, r3
 8007764:	898b      	ldrh	r3, [r1, #12]
 8007766:	4605      	mov	r5, r0
 8007768:	05db      	lsls	r3, r3, #23
 800776a:	460c      	mov	r4, r1
 800776c:	4616      	mov	r6, r2
 800776e:	d505      	bpl.n	800777c <__swrite+0x1e>
 8007770:	2302      	movs	r3, #2
 8007772:	2200      	movs	r2, #0
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	f000 f868 	bl	800784c <_lseek_r>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	4632      	mov	r2, r6
 8007780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	4628      	mov	r0, r5
 8007788:	463b      	mov	r3, r7
 800778a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007792:	f000 b817 	b.w	80077c4 <_write_r>

08007796 <__sseek>:
 8007796:	b510      	push	{r4, lr}
 8007798:	460c      	mov	r4, r1
 800779a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779e:	f000 f855 	bl	800784c <_lseek_r>
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	bf15      	itete	ne
 80077a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077b2:	81a3      	strheq	r3, [r4, #12]
 80077b4:	bf18      	it	ne
 80077b6:	81a3      	strhne	r3, [r4, #12]
 80077b8:	bd10      	pop	{r4, pc}

080077ba <__sclose>:
 80077ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077be:	f000 b813 	b.w	80077e8 <_close_r>
	...

080077c4 <_write_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	2200      	movs	r2, #0
 80077ce:	4d05      	ldr	r5, [pc, #20]	; (80077e4 <_write_r+0x20>)
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7fe fa9b 	bl	8005d0e <_write>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_write_r+0x1e>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_write_r+0x1e>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	20000560 	.word	0x20000560

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d05      	ldr	r5, [pc, #20]	; (8007804 <_close_r+0x1c>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fe fe26 	bl	8006444 <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20000560 	.word	0x20000560

08007808 <_fstat_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	2300      	movs	r3, #0
 800780c:	4d06      	ldr	r5, [pc, #24]	; (8007828 <_fstat_r+0x20>)
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	f7fe fe18 	bl	800644a <_fstat>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d102      	bne.n	8007824 <_fstat_r+0x1c>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	b103      	cbz	r3, 8007824 <_fstat_r+0x1c>
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	bd38      	pop	{r3, r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	20000560 	.word	0x20000560

0800782c <_isatty_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	2300      	movs	r3, #0
 8007830:	4d05      	ldr	r5, [pc, #20]	; (8007848 <_isatty_r+0x1c>)
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7fe fe0c 	bl	8006454 <_isatty>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_isatty_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_isatty_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	20000560 	.word	0x20000560

0800784c <_lseek_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	2200      	movs	r2, #0
 8007856:	4d05      	ldr	r5, [pc, #20]	; (800786c <_lseek_r+0x20>)
 8007858:	602a      	str	r2, [r5, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	f7fe fdfc 	bl	8006458 <_lseek>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_lseek_r+0x1e>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_lseek_r+0x1e>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	20000560 	.word	0x20000560

08007870 <memchr>:
 8007870:	4603      	mov	r3, r0
 8007872:	b510      	push	{r4, lr}
 8007874:	b2c9      	uxtb	r1, r1
 8007876:	4402      	add	r2, r0
 8007878:	4293      	cmp	r3, r2
 800787a:	4618      	mov	r0, r3
 800787c:	d101      	bne.n	8007882 <memchr+0x12>
 800787e:	2000      	movs	r0, #0
 8007880:	e003      	b.n	800788a <memchr+0x1a>
 8007882:	7804      	ldrb	r4, [r0, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	428c      	cmp	r4, r1
 8007888:	d1f6      	bne.n	8007878 <memchr+0x8>
 800788a:	bd10      	pop	{r4, pc}

0800788c <__malloc_lock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_lock+0x8>)
 800788e:	f7ff bb4b 	b.w	8006f28 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	20000558 	.word	0x20000558

08007898 <__malloc_unlock>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__malloc_unlock+0x8>)
 800789a:	f7ff bb46 	b.w	8006f2a <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	20000558 	.word	0x20000558

080078a4 <_read_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	2200      	movs	r2, #0
 80078ae:	4d05      	ldr	r5, [pc, #20]	; (80078c4 <_read_r+0x20>)
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fe fdb6 	bl	8006424 <_read>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_read_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_read_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000560 	.word	0x20000560

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
