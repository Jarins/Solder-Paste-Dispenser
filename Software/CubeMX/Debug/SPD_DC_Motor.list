
SPD_DC_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008744  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  08008858  08008858  00018858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c8  080093c8  00020248  2**0
                  CONTENTS
  4 .ARM          00000000  080093c8  080093c8  00020248  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093c8  080093c8  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  080093d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000248  08009618  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08009618  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d411  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004116  00000000  00000000  0003d682  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fb81  00000000  00000000  00041798  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013a0  00000000  00000000  00051320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012c8  00000000  00000000  000526c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001becd  00000000  00000000  00053988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00016699  00000000  00000000  0006f855  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000941b6  00000000  00000000  00085eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011a0a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f8  00000000  00000000  0011a120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000248 	.word	0x20000248
 800012c:	00000000 	.word	0x00000000
 8000130:	0800883c 	.word	0x0800883c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000024c 	.word	0x2000024c
 800014c:	0800883c 	.word	0x0800883c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <bbb_Init>:
/*
 * Initialize button, buzzer, battery module
 */
void bbb_Init(void){
	//HAL_TIMEx_PWMN_Start (& htim1, TIM_CHANNEL_3);
}
 800107c:	4770      	bx	lr
	...

08001080 <bbb_Update>:

/*
 * Updates all bbb readings. Handles debouncing.
 * Returns 1 when button update is evaluated, returns 0 when it has been evaluated too recently (earlier than BBB_UPDATEINTERVAL_MS)
 */
uint8_t bbb_Update(void){
 8001080:	b570      	push	{r4, r5, r6, lr}
	bbb_BtnTd* pBtn;


	if( HAL_GetTick() < LastBtnEvtUpdateTimestamp + BBB_UPDATEINTERVAL_MS ){						//If the buttons have been updated recently and no action is done
 8001082:	f000 fdab 	bl	8001bdc <HAL_GetTick>
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <bbb_Update+0xf8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3319      	adds	r3, #25
 800108c:	4298      	cmp	r0, r3
 800108e:	d20f      	bcs.n	80010b0 <bbb_Update+0x30>
		for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){										//Set none event to each of buttons
 8001090:	2300      	movs	r3, #0
 8001092:	e001      	b.n	8001098 <bbb_Update+0x18>
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d807      	bhi.n	80010ac <bbb_Update+0x2c>
			pBtn = BtnList[i];
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <bbb_Update+0xfc>)
 800109e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
			if(pBtn == 0) continue;
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d0f6      	beq.n	8001094 <bbb_Update+0x14>
			pBtn->PrevBtnEvt = bbb_EvtTd_None;
 80010a6:	2100      	movs	r1, #0
 80010a8:	7711      	strb	r1, [r2, #28]
 80010aa:	e7f3      	b.n	8001094 <bbb_Update+0x14>
		}
		return 0;																				//And just return with zero indicating no update happened
 80010ac:	2000      	movs	r0, #0
				pBtn->PrevBtnEvt = bbb_EvtTd_High;
			}
		}
	}
	return 1;
}
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
	LastBtnEvtUpdateTimestamp = HAL_GetTick();														//Store last update timestamp
 80010b0:	f000 fd94 	bl	8001bdc <HAL_GetTick>
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <bbb_Update+0xf8>)
 80010b6:	6018      	str	r0, [r3, #0]
	for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){											//Update status of all the buttons in the list
 80010b8:	2500      	movs	r5, #0
 80010ba:	e02d      	b.n	8001118 <bbb_Update+0x98>
				pBtn->PrevBtnState = 0;															//Save current state - already normalized logic
 80010bc:	2300      	movs	r3, #0
 80010be:	7763      	strb	r3, [r4, #29]
				uint32_t ReleasedToReleased = HAL_GetTick() - pBtn->ReleasedTimestamp;				//Delay between this and previous release (falling edge to falling edge)
 80010c0:	f000 fd8c 	bl	8001bdc <HAL_GetTick>
 80010c4:	68e3      	ldr	r3, [r4, #12]
 80010c6:	1ac6      	subs	r6, r0, r3
				pBtn->ReleasedTimestamp = HAL_GetTick();
 80010c8:	f000 fd88 	bl	8001bdc <HAL_GetTick>
 80010cc:	60e0      	str	r0, [r4, #12]
				pBtn->StateChangeInterval = HAL_GetTick() - pBtn->PrevBtnStateTimestamp;			//Calculate press duration
 80010ce:	f000 fd85 	bl	8001bdc <HAL_GetTick>
 80010d2:	69a3      	ldr	r3, [r4, #24]
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	6120      	str	r0, [r4, #16]
				pBtn->PrevBtnStateTimestamp = HAL_GetTick();										//Update state change timestamp
 80010d8:	f000 fd80 	bl	8001bdc <HAL_GetTick>
 80010dc:	61a0      	str	r0, [r4, #24]
				if(pBtn->StateChangeInterval > BBB_DOUBLEPRESS_MS){
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010e4:	d904      	bls.n	80010f0 <bbb_Update+0x70>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt = bbb_EvtTd_LongReleased;
 80010ea:	2305      	movs	r3, #5
 80010ec:	7723      	strb	r3, [r4, #28]
 80010ee:	e011      	b.n	8001114 <bbb_Update+0x94>
				else if(ReleasedToReleased < BBB_DOUBLEPRESS_MS){
 80010f0:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 80010f4:	d204      	bcs.n	8001100 <bbb_Update+0x80>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_DoubleReleased;
 80010fa:	2304      	movs	r3, #4
 80010fc:	7723      	strb	r3, [r4, #28]
 80010fe:	e009      	b.n	8001114 <bbb_Update+0x94>
					pBtn->SingleReleasedEnsuredTimestamp = HAL_GetTick()+BBB_DOUBLEPRESS_MS;
 8001100:	f000 fd6c 	bl	8001bdc <HAL_GetTick>
 8001104:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8001108:	6160      	str	r0, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_Released;
 800110a:	2302      	movs	r3, #2
 800110c:	7723      	strb	r3, [r4, #28]
 800110e:	e001      	b.n	8001114 <bbb_Update+0x94>
					pBtn->PrevBtnEvt = bbb_EvtTd_Low;
 8001110:	23fe      	movs	r3, #254	; 0xfe
 8001112:	7723      	strb	r3, [r4, #28]
	for(uint8_t i=0; i< UT_SIZEOFARRAY(BtnList); i++){											//Update status of all the buttons in the list
 8001114:	3501      	adds	r5, #1
 8001116:	b2ed      	uxtb	r5, r5
 8001118:	2d02      	cmp	r5, #2
 800111a:	d82b      	bhi.n	8001174 <bbb_Update+0xf4>
		pBtn = BtnList[i];																		//Just a shortcut for nicer and shorter code - pointer to currently analyzed button
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <bbb_Update+0xfc>)
 800111e:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
		if(pBtn == 0) continue;																	//Make sure the handle exists
 8001122:	2c00      	cmp	r4, #0
 8001124:	d0f6      	beq.n	8001114 <bbb_Update+0x94>
		if(BtnList[i]->Port->IDR & BtnList[i]->Pin) {							//Input with pullup, switch to gnd (0 when pressed, 1 when released). !!!BUT!!! below in the code 0 means not pressed, 1 means pressed - called "normalized logic"
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	421a      	tst	r2, r3
 800112e:	d00f      	beq.n	8001150 <bbb_Update+0xd0>
			if(pBtn->PrevBtnState != 0){														//If button state is different from last reading (released)
 8001130:	7f63      	ldrb	r3, [r4, #29]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1c2      	bne.n	80010bc <bbb_Update+0x3c>
				if(pBtn->SingleReleasedEnsuredTimestamp && HAL_GetTick() > pBtn->SingleReleasedEnsuredTimestamp){
 8001136:	6963      	ldr	r3, [r4, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0e9      	beq.n	8001110 <bbb_Update+0x90>
 800113c:	f000 fd4e 	bl	8001bdc <HAL_GetTick>
 8001140:	6963      	ldr	r3, [r4, #20]
 8001142:	4298      	cmp	r0, r3
 8001144:	d9e4      	bls.n	8001110 <bbb_Update+0x90>
					pBtn->SingleReleasedEnsuredTimestamp = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	6163      	str	r3, [r4, #20]
					pBtn->PrevBtnEvt =  bbb_EvtTd_SingleReleased;
 800114a:	2303      	movs	r3, #3
 800114c:	7723      	strb	r3, [r4, #28]
 800114e:	e7e1      	b.n	8001114 <bbb_Update+0x94>
			if(pBtn->PrevBtnState != 1){														//If button state is different from last reading (now is pressed, before was not pressed)
 8001150:	7f63      	ldrb	r3, [r4, #29]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <bbb_Update+0xdc>
				pBtn->PrevBtnEvt = bbb_EvtTd_High;
 8001156:	23ff      	movs	r3, #255	; 0xff
 8001158:	7723      	strb	r3, [r4, #28]
 800115a:	e7db      	b.n	8001114 <bbb_Update+0x94>
				pBtn->PrevBtnState = 1;															//Save current state
 800115c:	2601      	movs	r6, #1
 800115e:	7766      	strb	r6, [r4, #29]
				pBtn->StateChangeInterval = HAL_GetTick() - pBtn->PrevBtnStateTimestamp;
 8001160:	f000 fd3c 	bl	8001bdc <HAL_GetTick>
 8001164:	69a3      	ldr	r3, [r4, #24]
 8001166:	1ac0      	subs	r0, r0, r3
 8001168:	6120      	str	r0, [r4, #16]
				pBtn->PrevBtnStateTimestamp = HAL_GetTick();
 800116a:	f000 fd37 	bl	8001bdc <HAL_GetTick>
 800116e:	61a0      	str	r0, [r4, #24]
				pBtn->PrevBtnEvt = bbb_EvtTd_Pressed;
 8001170:	7726      	strb	r6, [r4, #28]
 8001172:	e7cf      	b.n	8001114 <bbb_Update+0x94>
	return 1;
 8001174:	2001      	movs	r0, #1
 8001176:	e79a      	b.n	80010ae <bbb_Update+0x2e>
 8001178:	20000264 	.word	0x20000264
 800117c:	08008880 	.word	0x08008880

08001180 <bbb_GetBtnStates>:


void bbb_GetBtnStates(uint8_t* pushBtn, uint8_t* pullBtn, uint8_t *cfgBtn){
 8001180:	b410      	push	{r4}
	UT_SAFEASSIGN(pushBtn, !(PushBtn.Port->IDR & PushBtn.Pin));
 8001182:	b148      	cbz	r0, 8001198 <bbb_GetBtnStates+0x18>
 8001184:	4604      	mov	r4, r0
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <bbb_GetBtnStates+0x48>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	6880      	ldr	r0, [r0, #8]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4218      	tst	r0, r3
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	7023      	strb	r3, [r4, #0]
	UT_SAFEASSIGN(pullBtn, !(PullBtn.Port->IDR & PushBtn.Pin));
 8001198:	b149      	cbz	r1, 80011ae <bbb_GetBtnStates+0x2e>
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <bbb_GetBtnStates+0x4c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <bbb_GetBtnStates+0x48>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4218      	tst	r0, r3
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	700b      	strb	r3, [r1, #0]
	UT_SAFEASSIGN(cfgBtn, !(CfgBtn.Port->IDR & PushBtn.Pin));
 80011ae:	b14a      	cbz	r2, 80011c4 <bbb_GetBtnStates+0x44>
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <bbb_GetBtnStates+0x50>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6899      	ldr	r1, [r3, #8]
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <bbb_GetBtnStates+0x48>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4219      	tst	r1, r3
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	7013      	strb	r3, [r2, #0]
}
 80011c4:	bc10      	pop	{r4}
 80011c6:	4770      	bx	lr
 80011c8:	20000040 	.word	0x20000040
 80011cc:	20000020 	.word	0x20000020
 80011d0:	20000000 	.word	0x20000000

080011d4 <bbb_GetPushBtnState>:


bbb_BtnTd* bbb_GetPushBtnState(void){
	return &PushBtn;
}
 80011d4:	4800      	ldr	r0, [pc, #0]	; (80011d8 <bbb_GetPushBtnState+0x4>)
 80011d6:	4770      	bx	lr
 80011d8:	20000040 	.word	0x20000040

080011dc <bbb_GetPullBtnState>:


bbb_BtnTd* bbb_GetPullBtnState(void){
	return &PullBtn;
}
 80011dc:	4800      	ldr	r0, [pc, #0]	; (80011e0 <bbb_GetPullBtnState+0x4>)
 80011de:	4770      	bx	lr
 80011e0:	20000020 	.word	0x20000020

080011e4 <bbb_GetCfgBtnState>:


bbb_BtnTd* bbb_GetCfgBtnState(void){
	return &CfgBtn;
}
 80011e4:	4800      	ldr	r0, [pc, #0]	; (80011e8 <bbb_GetCfgBtnState+0x4>)
 80011e6:	4770      	bx	lr
 80011e8:	20000000 	.word	0x20000000

080011ec <bbb_WaitSync>:


void bbb_WaitSync(uint16_t waitMs){
 80011ec:	b510      	push	{r4, lr}
 80011ee:	4604      	mov	r4, r0
	uint32_t End = HAL_GetTick() + waitMs;
 80011f0:	f000 fcf4 	bl	8001bdc <HAL_GetTick>
 80011f4:	4404      	add	r4, r0

	while( HAL_GetTick() < End );
 80011f6:	f000 fcf1 	bl	8001bdc <HAL_GetTick>
 80011fa:	42a0      	cmp	r0, r4
 80011fc:	d3fb      	bcc.n	80011f6 <bbb_WaitSync+0xa>
}
 80011fe:	bd10      	pop	{r4, pc}

08001200 <bbb_WaitSyncCond>:


void bbb_WaitSyncCond(uint16_t waitMs, uint8_t (*stopRequestFn)(void)){
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
	uint32_t End = HAL_GetTick() + waitMs;
 8001206:	f000 fce9 	bl	8001bdc <HAL_GetTick>
 800120a:	4404      	add	r4, r0

	while(HAL_GetTick() < End){
 800120c:	f000 fce6 	bl	8001bdc <HAL_GetTick>
 8001210:	42a0      	cmp	r0, r4
 8001212:	d204      	bcs.n	800121e <bbb_WaitSyncCond+0x1e>
		if(stopRequestFn && stopRequestFn()) return;
 8001214:	2d00      	cmp	r5, #0
 8001216:	d0f9      	beq.n	800120c <bbb_WaitSyncCond+0xc>
 8001218:	47a8      	blx	r5
 800121a:	2800      	cmp	r0, #0
 800121c:	d0f6      	beq.n	800120c <bbb_WaitSyncCond+0xc>
	}
}
 800121e:	bd38      	pop	{r3, r4, r5, pc}

08001220 <bbb_Beep>:

/*
 * Beeps the buzzer with specified tone (0 = off, 1=low, 2=medium, 3=high) for specified time in ms
 * tone 0 with time is just delay
 */
void bbb_Beep(uint8_t tone, uint8_t time){
 8001220:	b530      	push	{r4, r5, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	4604      	mov	r4, r0
 8001226:	460d      	mov	r5, r1
	volatile uint32_t Stop = HAL_GetTick() + time;
 8001228:	f000 fcd8 	bl	8001bdc <HAL_GetTick>
 800122c:	4428      	add	r0, r5
 800122e:	9001      	str	r0, [sp, #4]

	BuzzerActive = 1;
	if(tone > 3) tone = 3;
 8001230:	2c03      	cmp	r4, #3
 8001232:	d817      	bhi.n	8001264 <bbb_Beep+0x44>

	if(tone > 0){
 8001234:	b174      	cbz	r4, 8001254 <bbb_Beep+0x34>
		//Start timer
		//LL_TIM_SetAutoReload(TIM14, 1200 - tone * 200);
		__HAL_TIM_SET_AUTORELOAD(&htim1, 1200 - tone * 200);
 8001236:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800123a:	fb03 f304 	mul.w	r3, r3, r4
 800123e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <bbb_Beep+0x54>)
 8001244:	6802      	ldr	r2, [r0, #0]
 8001246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001248:	60c3      	str	r3, [r0, #12]
		//LL_TIM_OC_SetCompareCH4(TIM14, (1200 - tone * 200)>>1);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(1200 - tone * 200)>>1);
 800124a:	105b      	asrs	r3, r3, #1
 800124c:	63d3      	str	r3, [r2, #60]	; 0x3c
		//LL_TIM_CC_EnableChannel(TIM14, LL_TIM_CHANNEL_CH4);
		HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_3);
 800124e:	2108      	movs	r1, #8
 8001250:	f004 f92e 	bl	80054b0 <HAL_TIMEx_PWMN_Start>
		//HAL_TIM_Base_Start(&htim1);
	}

	while(1) if(HAL_GetTick() > Stop) break;
 8001254:	f000 fcc2 	bl	8001bdc <HAL_GetTick>
 8001258:	9b01      	ldr	r3, [sp, #4]
 800125a:	4298      	cmp	r0, r3
 800125c:	d9fa      	bls.n	8001254 <bbb_Beep+0x34>

	if(tone > 0){
 800125e:	b91c      	cbnz	r4, 8001268 <bbb_Beep+0x48>
		HAL_TIMEx_PWMN_Stop (&htim1, TIM_CHANNEL_3);
	}


	BuzzerActive = 0;
}
 8001260:	b003      	add	sp, #12
 8001262:	bd30      	pop	{r4, r5, pc}
	if(tone > 3) tone = 3;
 8001264:	2403      	movs	r4, #3
 8001266:	e7e6      	b.n	8001236 <bbb_Beep+0x16>
		HAL_TIMEx_PWMN_Stop (&htim1, TIM_CHANNEL_3);
 8001268:	2108      	movs	r1, #8
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <bbb_Beep+0x54>)
 800126c:	f004 f98e 	bl	800558c <HAL_TIMEx_PWMN_Stop>
}
 8001270:	e7f6      	b.n	8001260 <bbb_Beep+0x40>
 8001272:	bf00      	nop
 8001274:	20000668 	.word	0x20000668

08001278 <bbb_Melody3>:
	  bbb_Beep(tone2, time);
	  bbb_Beep(0, time);
}


void bbb_Melody3(uint8_t tone1, uint8_t tone2, uint8_t tone3, uint16_t time){
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	460e      	mov	r6, r1
 800127c:	4615      	mov	r5, r2
	  bbb_Beep(tone1, time);
 800127e:	b2dc      	uxtb	r4, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff ffcd 	bl	8001220 <bbb_Beep>
	  bbb_Beep(0, time);
 8001286:	4621      	mov	r1, r4
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ffc9 	bl	8001220 <bbb_Beep>
	  bbb_Beep(tone2, time);
 800128e:	4621      	mov	r1, r4
 8001290:	4630      	mov	r0, r6
 8001292:	f7ff ffc5 	bl	8001220 <bbb_Beep>
	  bbb_Beep(0, time);
 8001296:	4621      	mov	r1, r4
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff ffc1 	bl	8001220 <bbb_Beep>
	  bbb_Beep(tone3, time);
 800129e:	4621      	mov	r1, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f7ff ffbd 	bl	8001220 <bbb_Beep>
	  bbb_Beep(0, time);
 80012a6:	4621      	mov	r1, r4
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ffb9 	bl	8001220 <bbb_Beep>
}
 80012ae:	bd70      	pop	{r4, r5, r6, pc}

080012b0 <disp_DrawFrame>:
char floatBuf[10]; //temp buffer for float conversion

/*
 * Draws frame around specified area (optionally filled with black color)
 */
void disp_DrawFrame(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t isFilled){
 80012b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012b4:	4606      	mov	r6, r0
 80012b6:	4689      	mov	r9, r1
 80012b8:	4617      	mov	r7, r2
 80012ba:	4698      	mov	r8, r3
 80012bc:	f89d a020 	ldrb.w	sl, [sp, #32]

	for(uint8_t i=y1; i<=y2; i++){
 80012c0:	460d      	mov	r5, r1
 80012c2:	e015      	b.n	80012f0 <disp_DrawFrame+0x40>
		if(isFilled) for(uint8_t j=x1; j<=x2; j++) SSD1306_DrawPixel(j, i, SSD1306_COLOR_BLACK);
 80012c4:	2200      	movs	r2, #0
 80012c6:	4629      	mov	r1, r5
 80012c8:	b2a0      	uxth	r0, r4
 80012ca:	f000 fac3 	bl	8001854 <SSD1306_DrawPixel>
 80012ce:	3401      	adds	r4, #1
 80012d0:	b2e4      	uxtb	r4, r4
 80012d2:	42bc      	cmp	r4, r7
 80012d4:	d9f6      	bls.n	80012c4 <disp_DrawFrame+0x14>
		SSD1306_DrawPixel(x1, i, SSD1306_COLOR_WHITE);
 80012d6:	b2ac      	uxth	r4, r5
 80012d8:	2201      	movs	r2, #1
 80012da:	4621      	mov	r1, r4
 80012dc:	4630      	mov	r0, r6
 80012de:	f000 fab9 	bl	8001854 <SSD1306_DrawPixel>
		SSD1306_DrawPixel(x2, i, SSD1306_COLOR_WHITE);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4621      	mov	r1, r4
 80012e6:	4638      	mov	r0, r7
 80012e8:	f000 fab4 	bl	8001854 <SSD1306_DrawPixel>
	for(uint8_t i=y1; i<=y2; i++){
 80012ec:	3501      	adds	r5, #1
 80012ee:	b2ed      	uxtb	r5, r5
 80012f0:	4545      	cmp	r5, r8
 80012f2:	d811      	bhi.n	8001318 <disp_DrawFrame+0x68>
		if(isFilled) for(uint8_t j=x1; j<=x2; j++) SSD1306_DrawPixel(j, i, SSD1306_COLOR_BLACK);
 80012f4:	f1ba 0f00 	cmp.w	sl, #0
 80012f8:	d0ed      	beq.n	80012d6 <disp_DrawFrame+0x26>
 80012fa:	4634      	mov	r4, r6
 80012fc:	e7e9      	b.n	80012d2 <disp_DrawFrame+0x22>
	}

	for(uint8_t i=x1; i<=x2; i++){
		SSD1306_DrawPixel(i, y1, SSD1306_COLOR_WHITE);
 80012fe:	b2b4      	uxth	r4, r6
 8001300:	2201      	movs	r2, #1
 8001302:	4649      	mov	r1, r9
 8001304:	4620      	mov	r0, r4
 8001306:	f000 faa5 	bl	8001854 <SSD1306_DrawPixel>
		SSD1306_DrawPixel(i, y2, SSD1306_COLOR_WHITE);
 800130a:	2201      	movs	r2, #1
 800130c:	4641      	mov	r1, r8
 800130e:	4620      	mov	r0, r4
 8001310:	f000 faa0 	bl	8001854 <SSD1306_DrawPixel>
	for(uint8_t i=x1; i<=x2; i++){
 8001314:	3601      	adds	r6, #1
 8001316:	b2f6      	uxtb	r6, r6
 8001318:	42be      	cmp	r6, r7
 800131a:	d9f0      	bls.n	80012fe <disp_DrawFrame+0x4e>
	}
}
 800131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001320 <disp_DrawInitScreen>:

/*
 * Draws loading screen with battery voltage and core temperature
 */
#define Start_Y 0//16
void disp_DrawInitScreen(void){
 8001320:	b510      	push	{r4, lr}
 8001322:	b082      	sub	sp, #8
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 fa87 	bl	8001838 <SSD1306_Fill>
	disp_DrawFrame(0, 0, 125, Start_Y+31, 0);
 800132a:	2000      	movs	r0, #0
 800132c:	9000      	str	r0, [sp, #0]
 800132e:	231f      	movs	r3, #31
 8001330:	227d      	movs	r2, #125	; 0x7d
 8001332:	4601      	mov	r1, r0
 8001334:	f7ff ffbc 	bl	80012b0 <disp_DrawFrame>
	//SSD1306_DrawRectangle(0, 0, 127, Start_Y+31,SSD1306_COLOR_WHITE);
	SSD1306_GotoXY(1, Start_Y+1);
 8001338:	2101      	movs	r1, #1
 800133a:	4608      	mov	r0, r1
 800133c:	f000 fab4 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(DEVSTRING, &Font_7x10, SSD1306_COLOR_WHITE);
 8001340:	4c0d      	ldr	r4, [pc, #52]	; (8001378 <disp_DrawInitScreen+0x58>)
 8001342:	2201      	movs	r2, #1
 8001344:	4621      	mov	r1, r4
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <disp_DrawInitScreen+0x5c>)
 8001348:	f000 fb02 	bl	8001950 <SSD1306_Puts>

	SSD1306_GotoXY(1, Start_Y + 11);
 800134c:	210b      	movs	r1, #11
 800134e:	2001      	movs	r0, #1
 8001350:	f000 faaa 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(NAMESTRING, &Font_7x10, SSD1306_COLOR_WHITE);
 8001354:	2201      	movs	r2, #1
 8001356:	4621      	mov	r1, r4
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <disp_DrawInitScreen+0x60>)
 800135a:	f000 faf9 	bl	8001950 <SSD1306_Puts>

	SSD1306_GotoXY(1, Start_Y + 21);
 800135e:	2115      	movs	r1, #21
 8001360:	2001      	movs	r0, #1
 8001362:	f000 faa1 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(REVSTR, &Font_7x10, SSD1306_COLOR_WHITE);
 8001366:	2201      	movs	r2, #1
 8001368:	4621      	mov	r1, r4
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <disp_DrawInitScreen+0x64>)
 800136c:	f000 faf0 	bl	8001950 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001370:	f000 fb14 	bl	800199c <SSD1306_UpdateScreen>
}
 8001374:	b002      	add	sp, #8
 8001376:	bd10      	pop	{r4, pc}
 8001378:	20000060 	.word	0x20000060
 800137c:	0800888c 	.word	0x0800888c
 8001380:	0800889c 	.word	0x0800889c
 8001384:	080088b0 	.word	0x080088b0

08001388 <floatToString>:

//char * floatToString(char * outstr, float value, int places, int minwidth=, bool rightjustify) {
uint8_t floatToString(char * outstr, float value, uint8_t places, uint8_t minwidth)
{
 8001388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138c:	b085      	sub	sp, #20
 800138e:	4682      	mov	sl, r0
 8001390:	4608      	mov	r0, r1
 8001392:	9101      	str	r1, [sp, #4]
 8001394:	4693      	mov	fp, r2
 8001396:	461c      	mov	r4, r3
    // make sure we round properly. this could use pow from <math.h>, but doesn't seem worth the import
    // if this rounding step isn't here, the value  54.321 prints as 54.3209

    // calculate rounding term d:   0.5/pow(10,places)
    float d = 0.5;
    if (value < 0)
 8001398:	2100      	movs	r1, #0
 800139a:	f7ff fe21 	bl	8000fe0 <__aeabi_fcmplt>
 800139e:	b9b8      	cbnz	r0, 80013d0 <floatToString+0x48>
    float d = 0.5;
 80013a0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80013a4:	2500      	movs	r5, #0
 80013a6:	e004      	b.n	80013b2 <floatToString+0x2a>
        d *= -1.0;
    // divide by ten for each decimal place
    for (i = 0; i < places; i++)
        d/= 10.0;
 80013a8:	4968      	ldr	r1, [pc, #416]	; (800154c <floatToString+0x1c4>)
 80013aa:	f7ff fd2f 	bl	8000e0c <__aeabi_fdiv>
    for (i = 0; i < places; i++)
 80013ae:	3501      	adds	r5, #1
 80013b0:	b2ed      	uxtb	r5, r5
 80013b2:	455d      	cmp	r5, fp
 80013b4:	d3f8      	bcc.n	80013a8 <floatToString+0x20>
    // this small addition, combined with truncation will round our values properly
    tempfloat +=  d;
 80013b6:	9d01      	ldr	r5, [sp, #4]
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7ff fb6b 	bl	8000a94 <__addsf3>
 80013be:	9000      	str	r0, [sp, #0]

    // first get value tens to be the large power of ten less than value
    if (value < 0)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff fe0c 	bl	8000fe0 <__aeabi_fcmplt>
 80013c8:	b928      	cbnz	r0, 80013d6 <floatToString+0x4e>
    float d = 0.5;
 80013ca:	2700      	movs	r7, #0
 80013cc:	4d60      	ldr	r5, [pc, #384]	; (8001550 <floatToString+0x1c8>)
 80013ce:	e00e      	b.n	80013ee <floatToString+0x66>
        d *= -1.0;
 80013d0:	f04f 403f 	mov.w	r0, #3204448256	; 0xbf000000
 80013d4:	e7e6      	b.n	80013a4 <floatToString+0x1c>
        tempfloat *= -1.0;
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
 80013dc:	9600      	str	r6, [sp, #0]
 80013de:	e7f4      	b.n	80013ca <floatToString+0x42>
    while ((tens * 10.0) <= tempfloat) {
        tens *= 10.0;
 80013e0:	495a      	ldr	r1, [pc, #360]	; (800154c <floatToString+0x1c4>)
 80013e2:	4628      	mov	r0, r5
 80013e4:	f7ff fc5e 	bl	8000ca4 <__aeabi_fmul>
 80013e8:	4605      	mov	r5, r0
        tenscount += 1;
 80013ea:	3701      	adds	r7, #1
 80013ec:	b2ff      	uxtb	r7, r7
    while ((tens * 10.0) <= tempfloat) {
 80013ee:	4628      	mov	r0, r5
 80013f0:	f7ff f81a 	bl	8000428 <__aeabi_f2d>
 80013f4:	2200      	movs	r2, #0
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <floatToString+0x1cc>)
 80013f8:	f7ff f86e 	bl	80004d8 <__aeabi_dmul>
 80013fc:	4680      	mov	r8, r0
 80013fe:	4689      	mov	r9, r1
 8001400:	9800      	ldr	r0, [sp, #0]
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4640      	mov	r0, r8
 800140c:	4649      	mov	r1, r9
 800140e:	f7ff fadf 	bl	80009d0 <__aeabi_dcmple>
 8001412:	2800      	cmp	r0, #0
 8001414:	d1e4      	bne.n	80013e0 <floatToString+0x58>
    }

    if (tenscount > 0)
 8001416:	b33f      	cbz	r7, 8001468 <floatToString+0xe0>
        charcount += tenscount;
 8001418:	f107 0801 	add.w	r8, r7, #1
 800141c:	fa5f f888 	uxtb.w	r8, r8
    else
        charcount += 1;

    if (value < 0)
 8001420:	2100      	movs	r1, #0
 8001422:	9801      	ldr	r0, [sp, #4]
 8001424:	f7ff fddc 	bl	8000fe0 <__aeabi_fcmplt>
 8001428:	bb08      	cbnz	r0, 800146e <floatToString+0xe6>
        charcount += 1;
    charcount += 1 + places;
 800142a:	44d8      	add	r8, fp
 800142c:	fa5f f888 	uxtb.w	r8, r8
 8001430:	f108 0801 	add.w	r8, r8, #1
 8001434:	fa5f f288 	uxtb.w	r2, r8
 8001438:	9203      	str	r2, [sp, #12]

    minwidth += 1; // both count the null final character
 800143a:	1c63      	adds	r3, r4, #1
 800143c:	b2db      	uxtb	r3, r3
    if (minwidth > charcount){
 800143e:	429a      	cmp	r2, r3
 8001440:	d21a      	bcs.n	8001478 <floatToString+0xf0>
        extra = minwidth - charcount;
 8001442:	1a9a      	subs	r2, r3, r2
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	9202      	str	r2, [sp, #8]
        charcount = minwidth;
 8001448:	9303      	str	r3, [sp, #12]
//            outstr[c++] = ' ';
//        }
//    }

    // write out the negative if needed
    if (value < 0)
 800144a:	2100      	movs	r1, #0
 800144c:	9801      	ldr	r0, [sp, #4]
 800144e:	f7ff fdc7 	bl	8000fe0 <__aeabi_fcmplt>
 8001452:	b9a0      	cbnz	r0, 800147e <floatToString+0xf6>
    uint8_t c = 0;
 8001454:	2400      	movs	r4, #0
        outstr[c++] = '-';

    if (tenscount == 0)
 8001456:	b927      	cbnz	r7, 8001462 <floatToString+0xda>
        outstr[c++] = '0';
 8001458:	1c63      	adds	r3, r4, #1
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	f80a 2004 	strb.w	r2, [sl, r4]
 8001460:	b2dc      	uxtb	r4, r3
 8001462:	f04f 0800 	mov.w	r8, #0
 8001466:	e034      	b.n	80014d2 <floatToString+0x14a>
        charcount += 1;
 8001468:	f04f 0802 	mov.w	r8, #2
 800146c:	e7d8      	b.n	8001420 <floatToString+0x98>
        charcount += 1;
 800146e:	f108 0801 	add.w	r8, r8, #1
 8001472:	fa5f f888 	uxtb.w	r8, r8
 8001476:	e7d8      	b.n	800142a <floatToString+0xa2>
    uint8_t extra = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	e7e5      	b.n	800144a <floatToString+0xc2>
        outstr[c++] = '-';
 800147e:	232d      	movs	r3, #45	; 0x2d
 8001480:	f88a 3000 	strb.w	r3, [sl]
 8001484:	2401      	movs	r4, #1
 8001486:	e7e6      	b.n	8001456 <floatToString+0xce>

    for (i=0; i< tenscount; i++) {
        digit = (int) (tempfloat/tens);
 8001488:	4629      	mov	r1, r5
 800148a:	9800      	ldr	r0, [sp, #0]
 800148c:	f7ff fcbe 	bl	8000e0c <__aeabi_fdiv>
 8001490:	f7ff fdce 	bl	8001030 <__aeabi_f2iz>
 8001494:	fa5f f980 	uxtb.w	r9, r0
        itoa(digit, &outstr[c++], 10);
 8001498:	1c66      	adds	r6, r4, #1
 800149a:	b2f6      	uxtb	r6, r6
 800149c:	220a      	movs	r2, #10
 800149e:	eb0a 0104 	add.w	r1, sl, r4
 80014a2:	4648      	mov	r0, r9
 80014a4:	f005 f85e 	bl	8006564 <itoa>
        tempfloat = tempfloat - ((float)digit * tens);
 80014a8:	4648      	mov	r0, r9
 80014aa:	f7ff fba3 	bl	8000bf4 <__aeabi_ui2f>
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7ff fbf8 	bl	8000ca4 <__aeabi_fmul>
 80014b4:	4601      	mov	r1, r0
 80014b6:	9800      	ldr	r0, [sp, #0]
 80014b8:	f7ff faea 	bl	8000a90 <__aeabi_fsub>
 80014bc:	9000      	str	r0, [sp, #0]
        tens /= 10.0;
 80014be:	4923      	ldr	r1, [pc, #140]	; (800154c <floatToString+0x1c4>)
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fca3 	bl	8000e0c <__aeabi_fdiv>
 80014c6:	4605      	mov	r5, r0
    for (i=0; i< tenscount; i++) {
 80014c8:	f108 0801 	add.w	r8, r8, #1
 80014cc:	fa5f f888 	uxtb.w	r8, r8
        itoa(digit, &outstr[c++], 10);
 80014d0:	4634      	mov	r4, r6
    for (i=0; i< tenscount; i++) {
 80014d2:	4547      	cmp	r7, r8
 80014d4:	d8d8      	bhi.n	8001488 <floatToString+0x100>
    }

    // if no places after decimal, stop now and return

    // otherwise, write the point and continue on
    if (places > 0)
 80014d6:	f1bb 0f00 	cmp.w	fp, #0
 80014da:	d004      	beq.n	80014e6 <floatToString+0x15e>
    outstr[c++] = '.';
 80014dc:	1c63      	adds	r3, r4, #1
 80014de:	222e      	movs	r2, #46	; 0x2e
 80014e0:	f80a 2004 	strb.w	r2, [sl, r4]
 80014e4:	b2dc      	uxtb	r4, r3
 80014e6:	2500      	movs	r5, #0
 80014e8:	9800      	ldr	r0, [sp, #0]
 80014ea:	e018      	b.n	800151e <floatToString+0x196>


    // now write out each decimal place by shifting digits one by one into the ones place and writing the truncated value
    for (i = 0; i < places; i++) {
        tempfloat *= 10.0;
 80014ec:	4917      	ldr	r1, [pc, #92]	; (800154c <floatToString+0x1c4>)
 80014ee:	f7ff fbd9 	bl	8000ca4 <__aeabi_fmul>
 80014f2:	4680      	mov	r8, r0
        digit = (int) tempfloat;
 80014f4:	f7ff fd9c 	bl	8001030 <__aeabi_f2iz>
 80014f8:	b2c6      	uxtb	r6, r0
        itoa(digit, &outstr[c++], 10);
 80014fa:	1c67      	adds	r7, r4, #1
 80014fc:	b2ff      	uxtb	r7, r7
 80014fe:	220a      	movs	r2, #10
 8001500:	eb0a 0104 	add.w	r1, sl, r4
 8001504:	4630      	mov	r0, r6
 8001506:	f005 f82d 	bl	8006564 <itoa>
        // once written, subtract off that digit
        tempfloat = tempfloat - (float) digit;
 800150a:	4630      	mov	r0, r6
 800150c:	f7ff fb72 	bl	8000bf4 <__aeabi_ui2f>
 8001510:	4601      	mov	r1, r0
 8001512:	4640      	mov	r0, r8
 8001514:	f7ff fabc 	bl	8000a90 <__aeabi_fsub>
    for (i = 0; i < places; i++) {
 8001518:	3501      	adds	r5, #1
 800151a:	b2ed      	uxtb	r5, r5
        itoa(digit, &outstr[c++], 10);
 800151c:	463c      	mov	r4, r7
    for (i = 0; i < places; i++) {
 800151e:	455d      	cmp	r5, fp
 8001520:	d3e4      	bcc.n	80014ec <floatToString+0x164>
    }
    if (extra > 0) {
 8001522:	9b02      	ldr	r3, [sp, #8]
 8001524:	b153      	cbz	r3, 800153c <floatToString+0x1b4>
        for (int i = 0; i< extra; i++) {
 8001526:	2300      	movs	r3, #0
 8001528:	9802      	ldr	r0, [sp, #8]
 800152a:	e005      	b.n	8001538 <floatToString+0x1b0>
            outstr[c++] = ' ';
 800152c:	1c62      	adds	r2, r4, #1
 800152e:	2120      	movs	r1, #32
 8001530:	f80a 1004 	strb.w	r1, [sl, r4]
        for (int i = 0; i< extra; i++) {
 8001534:	3301      	adds	r3, #1
            outstr[c++] = ' ';
 8001536:	b2d4      	uxtb	r4, r2
        for (int i = 0; i< extra; i++) {
 8001538:	4298      	cmp	r0, r3
 800153a:	dcf7      	bgt.n	800152c <floatToString+0x1a4>
        }
    }


    outstr[c++] = '\0';
 800153c:	2300      	movs	r3, #0
 800153e:	f80a 3004 	strb.w	r3, [sl, r4]
    return charcount;
}
 8001542:	9803      	ldr	r0, [sp, #12]
 8001544:	b005      	add	sp, #20
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154a:	bf00      	nop
 800154c:	41200000 	.word	0x41200000
 8001550:	3dcccccd 	.word	0x3dcccccd
 8001554:	40240000 	.word	0x40240000

08001558 <disp_DrawScreen>:
/*

 * Draws normal screen, cfg mode specifies which configuration is highlighted, pushspeed, pullduration is string representation of selected parameters
 */
void disp_DrawScreen(disp_CfgModeTd cfgMode, char* pushSpeed, char* pullDur, float vBat, float iMeas, float tCore){
 8001558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800155c:	4605      	mov	r5, r0
 800155e:	460e      	mov	r6, r1
 8001560:	4690      	mov	r8, r2
 8001562:	461f      	mov	r7, r3

	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001564:	2000      	movs	r0, #0
 8001566:	f000 f967 	bl	8001838 <SSD1306_Fill>
	//disp_DrawFrame(0, 0, 127, Start_Y+31, 0);

	//FIRST LINE
	strcpy(Line,"  Speed:   ");
 800156a:	4c3e      	ldr	r4, [pc, #248]	; (8001664 <disp_DrawScreen+0x10c>)
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <disp_DrawScreen+0x110>)
 800156e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001570:	6020      	str	r0, [r4, #0]
 8001572:	6061      	str	r1, [r4, #4]
 8001574:	60a2      	str	r2, [r4, #8]
	strcat(Line,pushSpeed);
 8001576:	4631      	mov	r1, r6
 8001578:	4620      	mov	r0, r4
 800157a:	f005 fb9f 	bl	8006cbc <strcat>
	//sprintf(Line, "  Speed:   %s", pushSpeed);
	SSD1306_GotoXY(1, Start_Y+0);
 800157e:	2100      	movs	r1, #0
 8001580:	2001      	movs	r0, #1
 8001582:	f000 f991 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 8001586:	4e39      	ldr	r6, [pc, #228]	; (800166c <disp_DrawScreen+0x114>)
 8001588:	2201      	movs	r2, #1
 800158a:	4631      	mov	r1, r6
 800158c:	4620      	mov	r0, r4
 800158e:	f000 f9df 	bl	8001950 <SSD1306_Puts>

	//SECOND LINE
	strcpy(Line,"  Retract: ");
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <disp_DrawScreen+0x118>)
 8001594:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001596:	6020      	str	r0, [r4, #0]
 8001598:	6061      	str	r1, [r4, #4]
 800159a:	60a2      	str	r2, [r4, #8]
	strcat(Line,pullDur);
 800159c:	4641      	mov	r1, r8
 800159e:	4620      	mov	r0, r4
 80015a0:	f005 fb8c 	bl	8006cbc <strcat>
	//sprintf(Line, "  Retract: %s", pullDur);
	SSD1306_GotoXY(1, Start_Y+10);
 80015a4:	210a      	movs	r1, #10
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 f97e 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 80015ac:	2201      	movs	r2, #1
 80015ae:	4631      	mov	r1, r6
 80015b0:	4620      	mov	r0, r4
 80015b2:	f000 f9cd 	bl	8001950 <SSD1306_Puts>

	//THIRD LINE - button functions
	if(cfgMode>0){
 80015b6:	b1dd      	cbz	r5, 80015f0 <disp_DrawScreen+0x98>
		strcpy(Line,"   OK   Less  More");
 80015b8:	4626      	mov	r6, r4
 80015ba:	4c2e      	ldr	r4, [pc, #184]	; (8001674 <disp_DrawScreen+0x11c>)
 80015bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015be:	6030      	str	r0, [r6, #0]
 80015c0:	6071      	str	r1, [r6, #4]
 80015c2:	60b2      	str	r2, [r6, #8]
 80015c4:	60f3      	str	r3, [r6, #12]
 80015c6:	8822      	ldrh	r2, [r4, #0]
 80015c8:	78a3      	ldrb	r3, [r4, #2]
 80015ca:	8232      	strh	r2, [r6, #16]
 80015cc:	74b3      	strb	r3, [r6, #18]
		strcat(Line,floatBuf);

		//sprintf(Line, "Bat: %2.1fV t: %2.1fC", vBat,tCore);
	}

	SSD1306_GotoXY(1, Start_Y+21);
 80015ce:	2115      	movs	r1, #21
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 f969 	bl	80018a8 <SSD1306_GotoXY>
	SSD1306_Puts(Line, &Font_7x10, SSD1306_COLOR_WHITE);
 80015d6:	2201      	movs	r2, #1
 80015d8:	4924      	ldr	r1, [pc, #144]	; (800166c <disp_DrawScreen+0x114>)
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <disp_DrawScreen+0x10c>)
 80015dc:	f000 f9b8 	bl	8001950 <SSD1306_Puts>

	//Draw frame around selected parameter in configuration mode
	if(cfgMode == disp_CfgModeTd_Speed){
 80015e0:	2d01      	cmp	r5, #1
 80015e2:	d02b      	beq.n	800163c <disp_DrawScreen+0xe4>
		SSD1306_GotoXY(0, Start_Y+0);
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
	}
	else if(cfgMode == disp_CfgModeTd_Ret){
 80015e4:	2d02      	cmp	r5, #2
 80015e6:	d033      	beq.n	8001650 <disp_DrawScreen+0xf8>
		SSD1306_GotoXY(0, Start_Y+10);
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
	}

	SSD1306_UpdateScreen();
 80015e8:	f000 f9d8 	bl	800199c <SSD1306_UpdateScreen>
}
 80015ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(Line,"Bat: ");
 80015f0:	4c1c      	ldr	r4, [pc, #112]	; (8001664 <disp_DrawScreen+0x10c>)
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <disp_DrawScreen+0x120>)
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	6020      	str	r0, [r4, #0]
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	80a3      	strh	r3, [r4, #4]
		floatToString(floatBuf, vBat, 1, 3 );
 80015fc:	4e1f      	ldr	r6, [pc, #124]	; (800167c <disp_DrawScreen+0x124>)
 80015fe:	2303      	movs	r3, #3
 8001600:	2201      	movs	r2, #1
 8001602:	4639      	mov	r1, r7
 8001604:	4630      	mov	r0, r6
 8001606:	f7ff febf 	bl	8001388 <floatToString>
		strcat(Line,floatBuf);
 800160a:	4631      	mov	r1, r6
 800160c:	4620      	mov	r0, r4
 800160e:	f005 fb55 	bl	8006cbc <strcat>
		strcat(Line,"V t: ");
 8001612:	4620      	mov	r0, r4
 8001614:	f7fe fd9c 	bl	8000150 <strlen>
 8001618:	4602      	mov	r2, r0
 800161a:	1901      	adds	r1, r0, r4
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <disp_DrawScreen+0x128>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	5110      	str	r0, [r2, r4]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	808b      	strh	r3, [r1, #4]
		floatToString(floatBuf, tCore, 1, 3 );
 8001626:	2303      	movs	r3, #3
 8001628:	2201      	movs	r2, #1
 800162a:	9907      	ldr	r1, [sp, #28]
 800162c:	4630      	mov	r0, r6
 800162e:	f7ff feab 	bl	8001388 <floatToString>
		strcat(Line,floatBuf);
 8001632:	4631      	mov	r1, r6
 8001634:	4620      	mov	r0, r4
 8001636:	f005 fb41 	bl	8006cbc <strcat>
 800163a:	e7c8      	b.n	80015ce <disp_DrawScreen+0x76>
		SSD1306_GotoXY(0, Start_Y+0);
 800163c:	2100      	movs	r1, #0
 800163e:	4608      	mov	r0, r1
 8001640:	f000 f932 	bl	80018a8 <SSD1306_GotoXY>
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
 8001644:	2201      	movs	r2, #1
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <disp_DrawScreen+0x114>)
 8001648:	206f      	movs	r0, #111	; 0x6f
 800164a:	f000 f933 	bl	80018b4 <SSD1306_Putc>
 800164e:	e7cb      	b.n	80015e8 <disp_DrawScreen+0x90>
		SSD1306_GotoXY(0, Start_Y+10);
 8001650:	210a      	movs	r1, #10
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f928 	bl	80018a8 <SSD1306_GotoXY>
		SSD1306_Putc('o', &Font_7x10, SSD1306_COLOR_WHITE);
 8001658:	2201      	movs	r2, #1
 800165a:	4904      	ldr	r1, [pc, #16]	; (800166c <disp_DrawScreen+0x114>)
 800165c:	206f      	movs	r0, #111	; 0x6f
 800165e:	f000 f929 	bl	80018b4 <SSD1306_Putc>
 8001662:	e7c1      	b.n	80015e8 <disp_DrawScreen+0x90>
 8001664:	200004b0 	.word	0x200004b0
 8001668:	080088c4 	.word	0x080088c4
 800166c:	20000060 	.word	0x20000060
 8001670:	080088d0 	.word	0x080088d0
 8001674:	080088dc 	.word	0x080088dc
 8001678:	080088f0 	.word	0x080088f0
 800167c:	2000048c 	.word	0x2000048c
 8001680:	080088f8 	.word	0x080088f8

08001684 <meas_Init>:


/*
 * Initialize generator module, used typically during boot only
 */
void meas_Init(void){
 8001684:	b508      	push	{r3, lr}

	VBat = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <meas_Init+0x2c>)
 800168a:	6013      	str	r3, [r2, #0]
	Im = 0;
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <meas_Init+0x30>)
 800168e:	6013      	str	r3, [r2, #0]
	Temp = 0;
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <meas_Init+0x34>)
 8001692:	6013      	str	r3, [r2, #0]
	vSense = 0;
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <meas_Init+0x38>)
 8001696:	6013      	str	r3, [r2, #0]
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  //PA_Pin Start pwm motor speed% duty cycle
	//HAL_TIM_Base_Start(&htim1);
	// Kalibrace ADC při zapnutí pro lepší přesnost
	 while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);           // calibrate AD convertor
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <meas_Init+0x3c>)
 800169a:	f000 fd9f 	bl	80021dc <HAL_ADCEx_Calibration_Start>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d1fa      	bne.n	8001698 <meas_Init+0x14>
	// Start ADC Conversion
	// Pass (The ADC Instance, Result Buffer Address, Buffer Length)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCBuffer[0], (uint32_t)ADCCHANNELS);
 80016a2:	2203      	movs	r2, #3
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <meas_Init+0x40>)
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <meas_Init+0x3c>)
 80016a8:	f000 fc52 	bl	8001f50 <HAL_ADC_Start_DMA>

}
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	200004d0 	.word	0x200004d0
 80016b4:	200004dc 	.word	0x200004dc
 80016b8:	200004cc 	.word	0x200004cc
 80016bc:	200004c8 	.word	0x200004c8
 80016c0:	200004e8 	.word	0x200004e8
 80016c4:	200004d4 	.word	0x200004d4

080016c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c8:	b538      	push	{r3, r4, r5, lr}
	//HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
	if(CountMeasure>AVGLOOPMAX) return;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_ADC_ConvCpltCallback+0x70>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d82f      	bhi.n	8001734 <HAL_ADC_ConvCpltCallback+0x6c>
	AvVBat += (ADC_TO_VOLT * ADCBuffer[0]);// * VMCOEF;
 80016d4:	4c19      	ldr	r4, [pc, #100]	; (800173c <HAL_ADC_ConvCpltCallback+0x74>)
 80016d6:	8820      	ldrh	r0, [r4, #0]
 80016d8:	f7ff fa90 	bl	8000bfc <__aeabi_i2f>
 80016dc:	4918      	ldr	r1, [pc, #96]	; (8001740 <HAL_ADC_ConvCpltCallback+0x78>)
 80016de:	f7ff fae1 	bl	8000ca4 <__aeabi_fmul>
 80016e2:	4d18      	ldr	r5, [pc, #96]	; (8001744 <HAL_ADC_ConvCpltCallback+0x7c>)
 80016e4:	682b      	ldr	r3, [r5, #0]
 80016e6:	4601      	mov	r1, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f9d3 	bl	8000a94 <__addsf3>
 80016ee:	6028      	str	r0, [r5, #0]
	//Im = ADCBuffer[1] * IMCOEF;
	vSense = (ADC_TO_VOLT * ADCBuffer[2]);// volts temperature;
 80016f0:	88a0      	ldrh	r0, [r4, #4]
 80016f2:	f7ff fa83 	bl	8000bfc <__aeabi_i2f>
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <HAL_ADC_ConvCpltCallback+0x78>)
 80016f8:	f7ff fad4 	bl	8000ca4 <__aeabi_fmul>
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_ADC_ConvCpltCallback+0x80>)
 80016fe:	6018      	str	r0, [r3, #0]
	AvTemp += (V25 - vSense) / AVG_SLOPE + 25.0f;                  // convert sensor's output voltage to temperature [°C]
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_ADC_ConvCpltCallback+0x84>)
 8001704:	f7ff f9c4 	bl	8000a90 <__aeabi_fsub>
 8001708:	4911      	ldr	r1, [pc, #68]	; (8001750 <HAL_ADC_ConvCpltCallback+0x88>)
 800170a:	f7ff fb7f 	bl	8000e0c <__aeabi_fdiv>
 800170e:	4911      	ldr	r1, [pc, #68]	; (8001754 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001710:	f7ff f9c0 	bl	8000a94 <__addsf3>
 8001714:	4d10      	ldr	r5, [pc, #64]	; (8001758 <HAL_ADC_ConvCpltCallback+0x90>)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	4601      	mov	r1, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f9ba 	bl	8000a94 <__addsf3>
 8001720:	6028      	str	r0, [r5, #0]
	ADCBuffer[0] = ADCBuffer[1] = ADCBuffer[2] = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	80a3      	strh	r3, [r4, #4]
 8001726:	8063      	strh	r3, [r4, #2]
 8001728:	8023      	strh	r3, [r4, #0]
	CountMeasure++;
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_ADC_ConvCpltCallback+0x70>)
 800172c:	7813      	ldrb	r3, [r2, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	7013      	strb	r3, [r2, #0]
}
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	20000270 	.word	0x20000270
 800173c:	200004d4 	.word	0x200004d4
 8001740:	3a533333 	.word	0x3a533333
 8001744:	2000026c 	.word	0x2000026c
 8001748:	200004c8 	.word	0x200004c8
 800174c:	3fb70a3d 	.word	0x3fb70a3d
 8001750:	3b8ce704 	.word	0x3b8ce704
 8001754:	41c80000 	.word	0x41c80000
 8001758:	20000268 	.word	0x20000268

0800175c <HAL_ADC_ErrorCallback>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800175c:	b508      	push	{r3, lr}
  /* Turn LED5 on: Transfer Error */
	printf("DMA Transfer Error\n");
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <HAL_ADC_ErrorCallback+0xc>)
 8001760:	f005 faa4 	bl	8006cac <puts>
}
 8001764:	bd08      	pop	{r3, pc}
 8001766:	bf00      	nop
 8001768:	0800906c 	.word	0x0800906c

0800176c <mo_SetSpeed>:
void mo_Init(void){

}


void mo_SetSpeed(int16_t speed){
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4604      	mov	r4, r0

	Speed = speed;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <mo_SetSpeed+0xc0>)
 8001772:	8018      	strh	r0, [r3, #0]

	HAL_TIM_Base_Stop(&htim3);
 8001774:	4d2e      	ldr	r5, [pc, #184]	; (8001830 <mo_SetSpeed+0xc4>)
 8001776:	4628      	mov	r0, r5
 8001778:	f003 fc10 	bl	8004f9c <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);  //PA_Pin Stop pwm
 800177c:	2100      	movs	r1, #0
 800177e:	4628      	mov	r0, r5
 8001780:	f003 fe44 	bl	800540c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);  //PB_Pin Stop pwm
 8001784:	2104      	movs	r1, #4
 8001786:	4628      	mov	r0, r5
 8001788:	f003 fe40 	bl	800540c <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_RESET);   // Stop motor
 800178c:	4d29      	ldr	r5, [pc, #164]	; (8001834 <mo_SetSpeed+0xc8>)
 800178e:	2200      	movs	r2, #0
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	4628      	mov	r0, r5
 8001794:	f001 f868 	bl	8002868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4628      	mov	r0, r5
 800179e:	f001 f863 	bl	8002868 <HAL_GPIO_WritePin>

	if(speed > 0){
 80017a2:	2c00      	cmp	r4, #0
 80017a4:	dd1e      	ble.n	80017e4 <mo_SetSpeed+0x78>
		UT_SATURATE(speed, MO_SPEED_MIN, MO_SPEED_MAX);
 80017a6:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 80017aa:	dc03      	bgt.n	80017b4 <mo_SetSpeed+0x48>
 80017ac:	2c4f      	cmp	r4, #79	; 0x4f
 80017ae:	dc03      	bgt.n	80017b8 <mo_SetSpeed+0x4c>
 80017b0:	2450      	movs	r4, #80	; 0x50
 80017b2:	e001      	b.n	80017b8 <mo_SetSpeed+0x4c>
 80017b4:	f44f 7448 	mov.w	r4, #800	; 0x320
		HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_RESET);
 80017b8:	4d1e      	ldr	r5, [pc, #120]	; (8001834 <mo_SetSpeed+0xc8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	4628      	mov	r0, r5
 80017c0:	f001 f852 	bl	8002868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	4628      	mov	r0, r5
 80017ca:	f001 f84d 	bl	8002868 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,speed); //Set motor speed% voltage
 80017ce:	4d18      	ldr	r5, [pc, #96]	; (8001830 <mo_SetSpeed+0xc4>)
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	635c      	str	r4, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);  //PA_Pin Start pwm motor speed% duty cycle
 80017d4:	2100      	movs	r1, #0
 80017d6:	4628      	mov	r0, r5
 80017d8:	f003 fda6 	bl	8005328 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim3);
 80017dc:	4628      	mov	r0, r5
 80017de:	f003 fbaf 	bl	8004f40 <HAL_TIM_Base_Start>

	}



}
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
	else if(speed < 0){
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	dafc      	bge.n	80017e2 <mo_SetSpeed+0x76>
		speed *= -1;
 80017e8:	4264      	negs	r4, r4
 80017ea:	b224      	sxth	r4, r4
		UT_SATURATE(speed, MO_SPEED_MIN, MO_SPEED_MAX);
 80017ec:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
 80017f0:	dc03      	bgt.n	80017fa <mo_SetSpeed+0x8e>
 80017f2:	2c4f      	cmp	r4, #79	; 0x4f
 80017f4:	dc03      	bgt.n	80017fe <mo_SetSpeed+0x92>
 80017f6:	2450      	movs	r4, #80	; 0x50
 80017f8:	e001      	b.n	80017fe <mo_SetSpeed+0x92>
 80017fa:	f44f 7448 	mov.w	r4, #800	; 0x320
		HAL_GPIO_WritePin(PA_GPIO_Port,PA_Pin,GPIO_PIN_SET);
 80017fe:	4d0d      	ldr	r5, [pc, #52]	; (8001834 <mo_SetSpeed+0xc8>)
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4628      	mov	r0, r5
 8001806:	f001 f82f 	bl	8002868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB_GPIO_Port,PB_Pin,GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2140      	movs	r1, #64	; 0x40
 800180e:	4628      	mov	r0, r5
 8001810:	f001 f82a 	bl	8002868 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,speed); //Set motor speed% voltage
 8001814:	4d06      	ldr	r5, [pc, #24]	; (8001830 <mo_SetSpeed+0xc4>)
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);  //PB_Pin Start pwm motor speed% duty cycle
 800181a:	2104      	movs	r1, #4
 800181c:	4628      	mov	r0, r5
 800181e:	f003 fd83 	bl	8005328 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim3);
 8001822:	4628      	mov	r0, r5
 8001824:	f003 fb8c 	bl	8004f40 <HAL_TIM_Base_Start>
}
 8001828:	e7db      	b.n	80017e2 <mo_SetSpeed+0x76>
 800182a:	bf00      	nop
 800182c:	200004e0 	.word	0x200004e0
 8001830:	20000620 	.word	0x20000620
 8001834:	40010800 	.word	0x40010800

08001838 <SSD1306_Fill>:
//	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
//		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
//	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001838:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800183a:	b130      	cbz	r0, 800184a <SSD1306_Fill+0x12>
 800183c:	21ff      	movs	r1, #255	; 0xff
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <SSD1306_Fill+0x18>)
 8001844:	f004 fe90 	bl	8006568 <memset>
	//memset(Buffer_DMA, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(Buffer_DMA));
	//Buffer_DMA_InitCommand();
}
 8001848:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800184a:	2100      	movs	r1, #0
 800184c:	e7f7      	b.n	800183e <SSD1306_Fill+0x6>
 800184e:	bf00      	nop
 8001850:	2000027c 	.word	0x2000027c

08001854 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return; //Error
 8001854:	287f      	cmp	r0, #127	; 0x7f
 8001856:	d815      	bhi.n	8001884 <SSD1306_DrawPixel+0x30>
 8001858:	291f      	cmp	r1, #31
 800185a:	d813      	bhi.n	8001884 <SSD1306_DrawPixel+0x30>
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) color = (SSD1306_COLOR_t)!color;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SSD1306_DrawPixel+0x4c>)
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	b113      	cbz	r3, 8001868 <SSD1306_DrawPixel+0x14>
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	0952      	lsrs	r2, r2, #5
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001868:	2a01      	cmp	r2, #1
 800186a:	d00c      	beq.n	8001886 <SSD1306_DrawPixel+0x32>
	else SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800186c:	08cb      	lsrs	r3, r1, #3
 800186e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001872:	f001 0107 	and.w	r1, r1, #7
 8001876:	2301      	movs	r3, #1
 8001878:	408b      	lsls	r3, r1
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SSD1306_DrawPixel+0x50>)
 800187c:	5c11      	ldrb	r1, [r2, r0]
 800187e:	ea21 0103 	bic.w	r1, r1, r3
 8001882:	5411      	strb	r1, [r2, r0]
	//Buffer_DMA[y % 8]
	//if (color == SSD1306_COLOR_WHITE) Buffer_DMA[(uint8_t)y/8].Data[x] |= 1 << (y % 8);
	//else Buffer_DMA[(uint8_t)y/8].Data[x] &= ~(1 << (y % 8));


}
 8001884:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001886:	08cb      	lsrs	r3, r1, #3
 8001888:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800188c:	f001 0107 	and.w	r1, r1, #7
 8001890:	2301      	movs	r3, #1
 8001892:	408b      	lsls	r3, r1
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <SSD1306_DrawPixel+0x50>)
 8001896:	5c11      	ldrb	r1, [r2, r0]
 8001898:	4319      	orrs	r1, r3
 800189a:	5411      	strb	r1, [r2, r0]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000274 	.word	0x20000274
 80018a4:	2000027c 	.word	0x2000027c

080018a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <SSD1306_GotoXY+0x8>)
 80018aa:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80018ac:	8059      	strh	r1, [r3, #2]
}
 80018ae:	4770      	bx	lr
 80018b0:	20000274 	.word	0x20000274

080018b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SSD1306_Putc+0x98>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	780c      	ldrb	r4, [r1, #0]
 80018be:	4423      	add	r3, r4
	if (
 80018c0:	2b7f      	cmp	r3, #127	; 0x7f
 80018c2:	dc3e      	bgt.n	8001942 <SSD1306_Putc+0x8e>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <SSD1306_Putc+0x98>)
 80018c6:	885b      	ldrh	r3, [r3, #2]
 80018c8:	784c      	ldrb	r4, [r1, #1]
 80018ca:	4423      	add	r3, r4
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018cc:	2b1f      	cmp	r3, #31
 80018ce:	dc3b      	bgt.n	8001948 <SSD1306_Putc+0x94>
 80018d0:	4690      	mov	r8, r2
 80018d2:	460d      	mov	r5, r1
 80018d4:	4681      	mov	r9, r0
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018d6:	2600      	movs	r6, #0
 80018d8:	e020      	b.n	800191c <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <SSD1306_Putc+0x98>)
 80018dc:	8818      	ldrh	r0, [r3, #0]
 80018de:	8859      	ldrh	r1, [r3, #2]
 80018e0:	4431      	add	r1, r6
 80018e2:	4420      	add	r0, r4
 80018e4:	fab8 f288 	clz	r2, r8
 80018e8:	0952      	lsrs	r2, r2, #5
 80018ea:	b289      	uxth	r1, r1
 80018ec:	b280      	uxth	r0, r0
 80018ee:	f7ff ffb1 	bl	8001854 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018f2:	3401      	adds	r4, #1
 80018f4:	782b      	ldrb	r3, [r5, #0]
 80018f6:	42a3      	cmp	r3, r4
 80018f8:	d90f      	bls.n	800191a <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80018fa:	fa07 f304 	lsl.w	r3, r7, r4
 80018fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001902:	d0ea      	beq.n	80018da <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <SSD1306_Putc+0x98>)
 8001906:	8818      	ldrh	r0, [r3, #0]
 8001908:	8859      	ldrh	r1, [r3, #2]
 800190a:	4431      	add	r1, r6
 800190c:	4420      	add	r0, r4
 800190e:	4642      	mov	r2, r8
 8001910:	b289      	uxth	r1, r1
 8001912:	b280      	uxth	r0, r0
 8001914:	f7ff ff9e 	bl	8001854 <SSD1306_DrawPixel>
 8001918:	e7eb      	b.n	80018f2 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 800191a:	3601      	adds	r6, #1
 800191c:	786a      	ldrb	r2, [r5, #1]
 800191e:	42b2      	cmp	r2, r6
 8001920:	d908      	bls.n	8001934 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001922:	6869      	ldr	r1, [r5, #4]
 8001924:	f1a9 0320 	sub.w	r3, r9, #32
 8001928:	fb02 6303 	mla	r3, r2, r3, r6
 800192c:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001930:	2400      	movs	r4, #0
 8001932:	e7df      	b.n	80018f4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001934:	782b      	ldrb	r3, [r5, #0]
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <SSD1306_Putc+0x98>)
 8001938:	8811      	ldrh	r1, [r2, #0]
 800193a:	440b      	add	r3, r1
 800193c:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 800193e:	4648      	mov	r0, r9
 8001940:	e000      	b.n	8001944 <SSD1306_Putc+0x90>
		return 0;
 8001942:	2000      	movs	r0, #0
}
 8001944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8001948:	2000      	movs	r0, #0
 800194a:	e7fb      	b.n	8001944 <SSD1306_Putc+0x90>
 800194c:	20000274 	.word	0x20000274

08001950 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	460e      	mov	r6, r1
 8001956:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001958:	7823      	ldrb	r3, [r4, #0]
 800195a:	b14b      	cbz	r3, 8001970 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800195c:	462a      	mov	r2, r5
 800195e:	4631      	mov	r1, r6
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffa7 	bl	80018b4 <SSD1306_Putc>
 8001966:	7823      	ldrb	r3, [r4, #0]
 8001968:	4298      	cmp	r0, r3
 800196a:	d101      	bne.n	8001970 <SSD1306_Puts+0x20>
			return *str;

		}

		/* Increase string pointer */
		str++;
 800196c:	3401      	adds	r4, #1
 800196e:	e7f3      	b.n	8001958 <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd70      	pop	{r4, r5, r6, pc}

08001974 <ssd1306_I2C_Write>:
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
HAL_I2C_Mem_Write_DMA(&hi2c1, address, reg, 1, data, count);
}

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001974:	b510      	push	{r4, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	ac06      	add	r4, sp, #24
 800197a:	f804 2d01 	strb.w	r2, [r4, #-1]!
	HAL_I2C_Mem_Write(&hi2c1, address, reg, 1, &data, 1, 10);
 800197e:	230a      	movs	r3, #10
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2301      	movs	r3, #1
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9400      	str	r4, [sp, #0]
 8001988:	460a      	mov	r2, r1
 800198a:	4601      	mov	r1, r0
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <ssd1306_I2C_Write+0x24>)
 800198e:	f001 fb81 	bl	8003094 <HAL_I2C_Mem_Write>
}
 8001992:	b006      	add	sp, #24
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	200005a0 	.word	0x200005a0

0800199c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800199c:	b500      	push	{lr}
 800199e:	b083      	sub	sp, #12
	SSD1306_WRITECOMMAND(SSD1306_PAGEADDR);//SSD1306_PAGEADDR
 80019a0:	2222      	movs	r2, #34	; 0x22
 80019a2:	2100      	movs	r1, #0
 80019a4:	2078      	movs	r0, #120	; 0x78
 80019a6:	f7ff ffe5 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0); // Page start address (0)
 80019aa:	2200      	movs	r2, #0
 80019ac:	4611      	mov	r1, r2
 80019ae:	2078      	movs	r0, #120	; 0x78
 80019b0:	f7ff ffe0 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND((SSD1306_HEIGHT/8)-1); // Page end address
 80019b4:	2203      	movs	r2, #3
 80019b6:	2100      	movs	r1, #0
 80019b8:	2078      	movs	r0, #120	; 0x78
 80019ba:	f7ff ffdb 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_COLUMNADDR);
 80019be:	2221      	movs	r2, #33	; 0x21
 80019c0:	2100      	movs	r1, #0
 80019c2:	2078      	movs	r0, #120	; 0x78
 80019c4:	f7ff ffd6 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0);   // Column start address (0)
 80019c8:	2200      	movs	r2, #0
 80019ca:	4611      	mov	r1, r2
 80019cc:	2078      	movs	r0, #120	; 0x78
 80019ce:	f7ff ffd1 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_WIDTH-1); // Column end address (127)
 80019d2:	227f      	movs	r2, #127	; 0x7f
 80019d4:	2100      	movs	r1, #0
 80019d6:	2078      	movs	r0, #120	; 0x78
 80019d8:	f7ff ffcc 	bl	8001974 <ssd1306_I2C_Write>
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <SSD1306_UpdateScreen+0x68>)
 80019de:	f002 fb98 	bl	8004112 <HAL_I2C_GetState>
 80019e2:	2820      	cmp	r0, #32
 80019e4:	d1fa      	bne.n	80019dc <SSD1306_UpdateScreen+0x40>
	HAL_I2C_Mem_Write_DMA(&hi2c1, SSD1306_I2C_ADDR, SSD1306_DATA, 1, &SSD1306_Buffer[0], sizeof(SSD1306_Buffer));
 80019e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SSD1306_UpdateScreen+0x6c>)
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <SSD1306_UpdateScreen+0x68>)
 80019f8:	f001 fc00 	bl	80031fc <HAL_I2C_Mem_Write_DMA>
}
 80019fc:	b003      	add	sp, #12
 80019fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a02:	bf00      	nop
 8001a04:	200005a0 	.word	0x200005a0
 8001a08:	2000027c 	.word	0x2000027c

08001a0c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001a0c:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 200) != HAL_OK) {
 8001a0e:	23c8      	movs	r3, #200	; 0xc8
 8001a10:	2201      	movs	r2, #1
 8001a12:	2178      	movs	r1, #120	; 0x78
 8001a14:	484d      	ldr	r0, [pc, #308]	; (8001b4c <SSD1306_Init+0x140>)
 8001a16:	f001 fcc7 	bl	80033a8 <HAL_I2C_IsDeviceReady>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	f040 8094 	bne.w	8001b48 <SSD1306_Init+0x13c>
	uint32_t p = 2500;
 8001a20:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a24:	e000      	b.n	8001a28 <SSD1306_Init+0x1c>
		p--;
 8001a26:	3b01      	subs	r3, #1
	while(p>0)
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1fc      	bne.n	8001a26 <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(SSD1306_DISPLAYOFF); 			// 0xAE vypnuto zobrazení
 8001a2c:	22ae      	movs	r2, #174	; 0xae
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	; 0x78
 8001a32:	f7ff ff9f 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MEMORYMODE); 			// 0x20 režim adresování stránky
 8001a36:	2220      	movs	r2, #32
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2078      	movs	r0, #120	; 0x78
 8001a3c:	f7ff ff9a 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);          				// 0x00 horizontal addressing
 8001a40:	2200      	movs	r2, #0
 8001a42:	4611      	mov	r1, r2
 8001a44:	2078      	movs	r0, #120	; 0x78
 8001a46:	f7ff ff95 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MIRROR_VERT_NORM);		// 0xC8 Skenování od 127 do 0 (reverzní skenování)
 8001a4a:	22c8      	movs	r2, #200	; 0xc8
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2078      	movs	r0, #120	; 0x78
 8001a50:	f7ff ff90 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETSTARTLINE);    		// 0x40 První řádek); ze kterého se má zahájit skenování
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	2100      	movs	r1, #0
 8001a58:	2078      	movs	r0, #120	; 0x78
 8001a5a:	f7ff ff8b 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETCONTRAST);      	// 0x81 porovná hodnotu s 0x7F podle datasheetu
 8001a5e:	2281      	movs	r2, #129	; 0x81
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	; 0x78
 8001a64:	f7ff ff86 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xFF);							// 0xFF max
 8001a68:	22ff      	movs	r2, #255	; 0xff
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	; 0x78
 8001a6e:	f7ff ff81 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_MIRROR_HORIZ_NORMAL);  // 0xA1 Použít reverzní mapování. 0x00 - je normální mapování
 8001a72:	22a1      	movs	r2, #161	; 0xa1
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f7ff ff7c 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_NORMALDISPLAY);		// 0xA6 set normal display
 8001a7c:	22a6      	movs	r2, #166	; 0xa6
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	; 0x78
 8001a82:	f7ff ff77 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETMULTIPLEX);       	// 0xA8 set multiplex ratio(1 to 64)
 8001a86:	22a8      	movs	r2, #168	; 0xa8
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	; 0x78
 8001a8c:	f7ff ff72 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1);
 8001a90:	221f      	movs	r2, #31
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	; 0x78
 8001a96:	f7ff ff6d 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_SETDISPLAYOFFSET); 	// 0xD3 set display offset
 8001a9a:	22d3      	movs	r2, #211	; 0xd3
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	; 0x78
 8001aa0:	f7ff ff68 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);          				// 0x00 not offset
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	2078      	movs	r0, #120	; 0x78
 8001aaa:	f7ff ff63 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETDISPLAYCLOCKDIV); 	// 0xD5 set display clock divide ratio/oscillator frequency
 8001aae:	22d5      	movs	r2, #213	; 0xd5
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2078      	movs	r0, #120	; 0x78
 8001ab4:	f7ff ff5e 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x80);          				// 0x80 set divide ratio default
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	2100      	movs	r1, #0
 8001abc:	2078      	movs	r0, #120	; 0x78
 8001abe:	f7ff ff59 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETPRECHARGE);     	// 0xD9 set pre-charge period na 0x22 // 0xF1
 8001ac2:	22d9      	movs	r2, #217	; 0xd9
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2078      	movs	r0, #120	; 0x78
 8001ac8:	f7ff ff54 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x22);
 8001acc:	2222      	movs	r2, #34	; 0x22
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2078      	movs	r0, #120	; 0x78
 8001ad2:	f7ff ff4f 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETCOMPINS);       	// 0xDA set com pins hardware configuration
 8001ad6:	22da      	movs	r2, #218	; 0xda
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2078      	movs	r0, #120	; 0x78
 8001adc:	f7ff ff4a 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x02);							// 0x02 is for 128x32 !!!!!!!!!!!!!! UPDATE IN HEADER
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2078      	movs	r0, #120	; 0x78
 8001ae6:	f7ff ff45 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_SETVCOMDETECT);     	// 0xDB set vcomh
 8001aea:	22db      	movs	r2, #219	; 0xdb
 8001aec:	2100      	movs	r1, #0
 8001aee:	2078      	movs	r0, #120	; 0x78
 8001af0:	f7ff ff40 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20); 						// 0x20 0.77xVcc
 8001af4:	2220      	movs	r2, #32
 8001af6:	2100      	movs	r1, #0
 8001af8:	2078      	movs	r0, #120	; 0x78
 8001afa:	f7ff ff3b 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_CHARGEPUMP);        	// 0x8D set charge pump
 8001afe:	228d      	movs	r2, #141	; 0x8d
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	; 0x78
 8001b04:	f7ff ff36 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14); 						// 0x14 using internal VCC
 8001b08:	2214      	movs	r2, #20
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	; 0x78
 8001b0e:	f7ff ff31 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DISPLAYALLON_RESUME); 	// 0xA4 Output follows RAM content;0xA55,Output ignores RAM content
 8001b12:	22a4      	movs	r2, #164	; 0xa4
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	; 0x78
 8001b18:	f7ff ff2c 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DISPLAYON);			// 0xAF turn on SSD1306 panel
 8001b1c:	22af      	movs	r2, #175	; 0xaf
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	; 0x78
 8001b22:	f7ff ff27 	bl	8001974 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b26:	222e      	movs	r2, #46	; 0x2e
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	; 0x78
 8001b2c:	f7ff ff22 	bl	8001974 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fe81 	bl	8001838 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001b36:	f7ff ff31 	bl	800199c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SSD1306_Init+0x144>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b40:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001b42:	2001      	movs	r0, #1
 8001b44:	7158      	strb	r0, [r3, #5]
}
 8001b46:	bd08      	pop	{r3, pc}
		return 0;
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e7fc      	b.n	8001b46 <SSD1306_Init+0x13a>
 8001b4c:	200005a0 	.word	0x200005a0
 8001b50:	20000274 	.word	0x20000274

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_InitTick+0x40>)
 8001b5a:	7818      	ldrb	r0, [r3, #0]
 8001b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b60:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_InitTick+0x44>)
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b6c:	f000 fc02 	bl	8002374 <HAL_SYSTICK_Config>
 8001b70:	b968      	cbnz	r0, 8001b8e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	2c0f      	cmp	r4, #15
 8001b74:	d901      	bls.n	8001b7a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e00a      	b.n	8001b90 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b82:	f000 fbb5 	bl	80022f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_InitTick+0x48>)
 8001b88:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
}
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	bf00      	nop
 8001b94:	20000068 	.word	0x20000068
 8001b98:	20000074 	.word	0x20000074
 8001b9c:	2000006c 	.word	0x2000006c

08001ba0 <HAL_Init>:
{
 8001ba0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x20>)
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fb8d 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff ffce 	bl	8001b54 <HAL_InitTick>
  HAL_MspInit();
 8001bb8:	f004 fa52 	bl	8006060 <HAL_MspInit>
}
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	bd08      	pop	{r3, pc}
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_IncTick+0x10>)
 8001bc6:	6811      	ldr	r1, [r2, #0]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_IncTick+0x14>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	440b      	add	r3, r1
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200004e4 	.word	0x200004e4
 8001bd8:	20000068 	.word	0x20000068

08001bdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bdc:	4b01      	ldr	r3, [pc, #4]	; (8001be4 <HAL_GetTick+0x8>)
 8001bde:	6818      	ldr	r0, [r3, #0]
}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200004e4 	.word	0x200004e4

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fff6 	bl	8001bdc <HAL_GetTick>
 8001bf0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bf6:	d002      	beq.n	8001bfe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_Delay+0x24>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	f7ff ffed 	bl	8001bdc <HAL_GetTick>
 8001c02:	1b40      	subs	r0, r0, r5
 8001c04:	42a0      	cmp	r0, r4
 8001c06:	d3fa      	bcc.n	8001bfe <HAL_Delay+0x16>
  {
  }
}
 8001c08:	bd38      	pop	{r3, r4, r5, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000068 	.word	0x20000068

08001c10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c10:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c16:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001c1a:	d003      	beq.n	8001c24 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4798      	blx	r3
  }
}
 8001c22:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	6892      	ldr	r2, [r2, #8]
 8001c30:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c34:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001c38:	d003      	beq.n	8001c42 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fd44 	bl	80016c8 <HAL_ADC_ConvCpltCallback>
 8001c40:	e7ef      	b.n	8001c22 <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c42:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	d1f8      	bne.n	8001c3a <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c52:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001c56:	d1f0      	bne.n	8001c3a <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c60:	e7eb      	b.n	8001c3a <ADC_DMAConvCplt+0x2a>

08001c62 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001c62:	4770      	bx	lr

08001c64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c64:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c66:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001c68:	f7ff fffb 	bl	8001c62 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c6c:	bd08      	pop	{r3, pc}

08001c6e <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_ADC_IRQHandler>:
{
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	f012 0f20 	tst.w	r2, #32
 8001c7c:	d018      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	f012 0f02 	tst.w	r2, #2
 8001c84:	d014      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c86:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001c88:	f012 0f10 	tst.w	r2, #16
 8001c8c:	d103      	bne.n	8001c96 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c94:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c9c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001ca0:	d038      	beq.n	8001d14 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff fd10 	bl	80016c8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	f06f 0212 	mvn.w	r2, #18
 8001cae:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001cb8:	d022      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f012 0f04 	tst.w	r2, #4
 8001cc0:	d01e      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cc4:	f012 0f10 	tst.w	r2, #16
 8001cc8:	d103      	bne.n	8001cd2 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd0:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001cd8:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001cdc:	d031      	beq.n	8001d42 <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cde:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ce0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001cf0:	d024      	beq.n	8001d3c <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f000 fae8 	bl	80022c8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	f06f 020c 	mvn.w	r2, #12
 8001cfe:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f013 0f01 	tst.w	r3, #1
 8001d10:	d128      	bne.n	8001d64 <HAL_ADC_IRQHandler+0xf4>
}
 8001d12:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d14:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d1c3      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	f022 0220 	bic.w	r2, r2, #32
 8001d20:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d28:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d30:	d1b7      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d3a:	e7b2      	b.n	8001ca2 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d3c:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	d1d7      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d50:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d58:	d1cb      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d62:	e7c6      	b.n	8001cf2 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff7e 	bl	8001c6e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f06f 0201 	mvn.w	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	e7ca      	b.n	8001d12 <HAL_ADC_IRQHandler+0xa2>

08001d7c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d7c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d86:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d90:	f7ff fce4 	bl	800175c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d94:	bd08      	pop	{r3, pc}
	...

08001d98 <HAL_ADC_ConfigChannel>:
{ 
 8001d98:	b430      	push	{r4, r5}
 8001d9a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001da0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f000 808b 	beq.w	8001ec0 <HAL_ADC_ConfigChannel+0x128>
 8001daa:	4602      	mov	r2, r0
 8001dac:	2301      	movs	r3, #1
 8001dae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001db2:	684b      	ldr	r3, [r1, #4]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d829      	bhi.n	8001e0c <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001db8:	6805      	ldr	r5, [r0, #0]
 8001dba:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dc0:	3b05      	subs	r3, #5
 8001dc2:	241f      	movs	r4, #31
 8001dc4:	409c      	lsls	r4, r3
 8001dc6:	ea20 0004 	bic.w	r0, r0, r4
 8001dca:	680c      	ldr	r4, [r1, #0]
 8001dcc:	fa04 f303 	lsl.w	r3, r4, r3
 8001dd0:	4303      	orrs	r3, r0
 8001dd2:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dd4:	680b      	ldr	r3, [r1, #0]
 8001dd6:	2b09      	cmp	r3, #9
 8001dd8:	d938      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dda:	6815      	ldr	r5, [r2, #0]
 8001ddc:	68e8      	ldr	r0, [r5, #12]
 8001dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001de2:	3b1e      	subs	r3, #30
 8001de4:	2407      	movs	r4, #7
 8001de6:	409c      	lsls	r4, r3
 8001de8:	ea20 0004 	bic.w	r0, r0, r4
 8001dec:	688c      	ldr	r4, [r1, #8]
 8001dee:	fa04 f303 	lsl.w	r3, r4, r3
 8001df2:	4303      	orrs	r3, r0
 8001df4:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001df6:	680b      	ldr	r3, [r1, #0]
 8001df8:	3b10      	subs	r3, #16
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d934      	bls.n	8001e68 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001e00:	2300      	movs	r3, #0
 8001e02:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8001e06:	b002      	add	sp, #8
 8001e08:	bc30      	pop	{r4, r5}
 8001e0a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d80e      	bhi.n	8001e2e <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e10:	6805      	ldr	r5, [r0, #0]
 8001e12:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e18:	3b23      	subs	r3, #35	; 0x23
 8001e1a:	241f      	movs	r4, #31
 8001e1c:	409c      	lsls	r4, r3
 8001e1e:	ea20 0004 	bic.w	r0, r0, r4
 8001e22:	680c      	ldr	r4, [r1, #0]
 8001e24:	fa04 f303 	lsl.w	r3, r4, r3
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	632b      	str	r3, [r5, #48]	; 0x30
 8001e2c:	e7d2      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e2e:	6805      	ldr	r5, [r0, #0]
 8001e30:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e36:	3b41      	subs	r3, #65	; 0x41
 8001e38:	241f      	movs	r4, #31
 8001e3a:	409c      	lsls	r4, r3
 8001e3c:	ea20 0004 	bic.w	r0, r0, r4
 8001e40:	680c      	ldr	r4, [r1, #0]
 8001e42:	fa04 f303 	lsl.w	r3, r4, r3
 8001e46:	4303      	orrs	r3, r0
 8001e48:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001e4a:	e7c3      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e4c:	6815      	ldr	r5, [r2, #0]
 8001e4e:	6928      	ldr	r0, [r5, #16]
 8001e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e54:	2407      	movs	r4, #7
 8001e56:	409c      	lsls	r4, r3
 8001e58:	ea20 0004 	bic.w	r0, r0, r4
 8001e5c:	688c      	ldr	r4, [r1, #8]
 8001e5e:	fa04 f303 	lsl.w	r3, r4, r3
 8001e62:	4303      	orrs	r3, r0
 8001e64:	612b      	str	r3, [r5, #16]
 8001e66:	e7c6      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <HAL_ADC_ConfigChannel+0x12c>)
 8001e6c:	4283      	cmp	r3, r0
 8001e6e:	d005      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001e72:	f043 0320 	orr.w	r3, r3, #32
 8001e76:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e7c1      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e7c:	6898      	ldr	r0, [r3, #8]
 8001e7e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001e82:	d11b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e84:	6898      	ldr	r0, [r3, #8]
 8001e86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001e8a:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e8c:	680b      	ldr	r3, [r1, #0]
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d001      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e92:	2000      	movs	r0, #0
 8001e94:	e7b4      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_ADC_ConfigChannel+0x130>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <HAL_ADC_ConfigChannel+0x134>)
 8001e9c:	fba1 1303 	umull	r1, r3, r1, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ea6:	0059      	lsls	r1, r3, #1
 8001ea8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001eb2:	9b01      	ldr	r3, [sp, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e7a1      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x68>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e79f      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	e7a0      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x6e>
 8001ec4:	40012400 	.word	0x40012400
 8001ec8:	20000074 	.word	0x20000074
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Enable>:
{
 8001ed0:	b530      	push	{r4, r5, lr}
 8001ed2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ed8:	6803      	ldr	r3, [r0, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	f012 0f01 	tst.w	r2, #1
 8001ee0:	d12e      	bne.n	8001f40 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <ADC_Enable+0x78>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <ADC_Enable+0x7c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001ef8:	e002      	b.n	8001f00 <ADC_Enable+0x30>
      wait_loop_index--;
 8001efa:	9b01      	ldr	r3, [sp, #4]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001f00:	9b01      	ldr	r3, [sp, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <ADC_Enable+0x2a>
 8001f06:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001f08:	f7ff fe68 	bl	8001bdc <HAL_GetTick>
 8001f0c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f013 0f01 	tst.w	r3, #1
 8001f16:	d111      	bne.n	8001f3c <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f18:	f7ff fe60 	bl	8001bdc <HAL_GetTick>
 8001f1c:	1b40      	subs	r0, r0, r5
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	d9f5      	bls.n	8001f0e <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001f32:	2300      	movs	r3, #0
 8001f34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
 8001f3a:	e002      	b.n	8001f42 <ADC_Enable+0x72>
  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e000      	b.n	8001f42 <ADC_Enable+0x72>
 8001f40:	2000      	movs	r0, #0
}
 8001f42:	b003      	add	sp, #12
 8001f44:	bd30      	pop	{r4, r5, pc}
 8001f46:	bf00      	nop
 8001f48:	20000074 	.word	0x20000074
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <HAL_ADC_Start_DMA>:
{
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f52:	6804      	ldr	r4, [r0, #0]
 8001f54:	4d45      	ldr	r5, [pc, #276]	; (800206c <HAL_ADC_Start_DMA+0x11c>)
 8001f56:	42ac      	cmp	r4, r5
 8001f58:	d05b      	beq.n	8002012 <HAL_ADC_Start_DMA+0xc2>
 8001f5a:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_ADC_Start_DMA+0x120>)
 8001f5c:	429c      	cmp	r4, r3
 8001f5e:	d058      	beq.n	8002012 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001f60:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001f64:	2c01      	cmp	r4, #1
 8001f66:	d07e      	beq.n	8002066 <HAL_ADC_Start_DMA+0x116>
 8001f68:	4616      	mov	r6, r2
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001f74:	f7ff ffac 	bl	8001ed0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001f78:	4607      	mov	r7, r0
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d16e      	bne.n	800205c <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f8e:	6822      	ldr	r2, [r4, #0]
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_ADC_Start_DMA+0x120>)
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d044      	beq.n	8002020 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f9c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9e:	6853      	ldr	r3, [r2, #4]
 8001fa0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fa4:	d005      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001fb8:	d048      	beq.n	800204c <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fbc:	f023 0306 	bic.w	r3, r3, #6
 8001fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fc8:	6a23      	ldr	r3, [r4, #32]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <HAL_ADC_Start_DMA+0x124>)
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fce:	6a23      	ldr	r3, [r4, #32]
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_ADC_Start_DMA+0x128>)
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fd4:	6a23      	ldr	r3, [r4, #32]
 8001fd6:	4a29      	ldr	r2, [pc, #164]	; (800207c <HAL_ADC_Start_DMA+0x12c>)
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f06f 0202 	mvn.w	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fe2:	6822      	ldr	r2, [r4, #0]
 8001fe4:	6893      	ldr	r3, [r2, #8]
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fec:	6821      	ldr	r1, [r4, #0]
 8001fee:	4633      	mov	r3, r6
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	314c      	adds	r1, #76	; 0x4c
 8001ff4:	6a20      	ldr	r0, [r4, #32]
 8001ff6:	f000 fa1f 	bl	8002438 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	6893      	ldr	r3, [r2, #8]
 8001ffe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002002:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002006:	d024      	beq.n	8002052 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002008:	6893      	ldr	r3, [r2, #8]
 800200a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	e027      	b.n	8002062 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_ADC_Start_DMA+0x11c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800201a:	d0a1      	beq.n	8001f60 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 800201c:	2701      	movs	r7, #1
 800201e:	e020      	b.n	8002062 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002020:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800202a:	d0b4      	beq.n	8001f96 <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800202c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002032:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_ADC_Start_DMA+0x11c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800203c:	d0b9      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800203e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002040:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002048:	62a3      	str	r3, [r4, #40]	; 0x28
 800204a:	e7b2      	b.n	8001fb2 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 800204c:	2300      	movs	r3, #0
 800204e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002050:	e7b7      	b.n	8001fc2 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002058:	6093      	str	r3, [r2, #8]
 800205a:	e002      	b.n	8002062 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 800205c:	2300      	movs	r3, #0
 800205e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002062:	4638      	mov	r0, r7
 8002064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002066:	2702      	movs	r7, #2
 8002068:	e7fb      	b.n	8002062 <HAL_ADC_Start_DMA+0x112>
 800206a:	bf00      	nop
 800206c:	40012400 	.word	0x40012400
 8002070:	40012800 	.word	0x40012800
 8002074:	08001c11 	.word	0x08001c11
 8002078:	08001c65 	.word	0x08001c65
 800207c:	08001d7d 	.word	0x08001d7d

08002080 <ADC_ConversionStop_Disable>:
{
 8002080:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002082:	6803      	ldr	r3, [r0, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	f012 0f01 	tst.w	r2, #1
 800208a:	d101      	bne.n	8002090 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800208c:	2000      	movs	r0, #0
}
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800209a:	f7ff fd9f 	bl	8001bdc <HAL_GetTick>
 800209e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f013 0f01 	tst.w	r3, #1
 80020a8:	d00e      	beq.n	80020c8 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020aa:	f7ff fd97 	bl	8001bdc <HAL_GetTick>
 80020ae:	1b40      	subs	r0, r0, r5
 80020b0:	2802      	cmp	r0, #2
 80020b2:	d9f5      	bls.n	80020a0 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
 80020c6:	e7e2      	b.n	800208e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7e0      	b.n	800208e <ADC_ConversionStop_Disable+0xe>

080020cc <HAL_ADC_Init>:
  if(hadc == NULL)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d07f      	beq.n	80021d0 <HAL_ADC_Init+0x104>
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d033      	beq.n	8002142 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020da:	4620      	mov	r0, r4
 80020dc:	f7ff ffd0 	bl	8002080 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020e2:	f013 0310 	ands.w	r3, r3, #16
 80020e6:	d16d      	bne.n	80021c4 <HAL_ADC_Init+0xf8>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d16b      	bne.n	80021c4 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80020ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020ee:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80020f2:	f022 0202 	bic.w	r2, r2, #2
 80020f6:	f042 0202 	orr.w	r2, r2, #2
 80020fa:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fc:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020fe:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002100:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002102:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002104:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002108:	68a1      	ldr	r1, [r4, #8]
 800210a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800210e:	d021      	beq.n	8002154 <HAL_ADC_Init+0x88>
 8002110:	2901      	cmp	r1, #1
 8002112:	d01c      	beq.n	800214e <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002114:	7d21      	ldrb	r1, [r4, #20]
 8002116:	2901      	cmp	r1, #1
 8002118:	d01f      	beq.n	800215a <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800211a:	6825      	ldr	r5, [r4, #0]
 800211c:	6869      	ldr	r1, [r5, #4]
 800211e:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002122:	430b      	orrs	r3, r1
 8002124:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002126:	6821      	ldr	r1, [r4, #0]
 8002128:	688d      	ldr	r5, [r1, #8]
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_ADC_Init+0x108>)
 800212c:	402b      	ands	r3, r5
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002132:	68a3      	ldr	r3, [r4, #8]
 8002134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002138:	d020      	beq.n	800217c <HAL_ADC_Init+0xb0>
 800213a:	2b01      	cmp	r3, #1
 800213c:	d01e      	beq.n	800217c <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 800213e:	2100      	movs	r1, #0
 8002140:	e01f      	b.n	8002182 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 8002142:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002144:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002148:	f003 fb02 	bl	8005750 <HAL_ADC_MspInit>
 800214c:	e7c5      	b.n	80020da <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	e7df      	b.n	8002114 <HAL_ADC_Init+0x48>
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	e7dc      	b.n	8002114 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800215a:	b935      	cbnz	r5, 800216a <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800215c:	69a1      	ldr	r1, [r4, #24]
 800215e:	3901      	subs	r1, #1
 8002160:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8002164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002168:	e7d7      	b.n	800211a <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800216c:	f041 0120 	orr.w	r1, r1, #32
 8002170:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002174:	f041 0101 	orr.w	r1, r1, #1
 8002178:	62e1      	str	r1, [r4, #44]	; 0x2c
 800217a:	e7ce      	b.n	800211a <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800217c:	6923      	ldr	r3, [r4, #16]
 800217e:	3b01      	subs	r3, #1
 8002180:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002182:	6825      	ldr	r5, [r4, #0]
 8002184:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800218a:	430b      	orrs	r3, r1
 800218c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_Init+0x10c>)
 8002194:	400b      	ands	r3, r1
 8002196:	429a      	cmp	r2, r3
 8002198:	d00b      	beq.n	80021b2 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800219a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800219c:	f023 0312 	bic.w	r3, r3, #18
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e00d      	b.n	80021ce <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	2300      	movs	r3, #0
 80021b4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80021b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80021c2:	e004      	b.n	80021ce <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80021cc:	2001      	movs	r0, #1
}
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
}
 80021d2:	4770      	bx	lr
 80021d4:	ffe1f7fd 	.word	0xffe1f7fd
 80021d8:	ff1f0efe 	.word	0xff1f0efe

080021dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d068      	beq.n	80022be <HAL_ADCEx_Calibration_Start+0xe2>
 80021ec:	4604      	mov	r4, r0
 80021ee:	2301      	movs	r3, #1
 80021f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021f4:	f7ff ff44 	bl	8002080 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021f8:	4605      	mov	r5, r0
 80021fa:	b128      	cbz	r0, 8002208 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fc:	2300      	movs	r3, #0
 80021fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002202:	4628      	mov	r0, r5
 8002204:	b002      	add	sp, #8
 8002206:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800220a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_ADCEx_Calibration_Start+0xe8>)
 800221a:	681e      	ldr	r6, [r3, #0]
 800221c:	2002      	movs	r0, #2
 800221e:	f002 fb41 	bl	80048a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002222:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002226:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8002228:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800222a:	e002      	b.n	8002232 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 800222c:	9b01      	ldr	r3, [sp, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff fe49 	bl	8001ed0 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	6893      	ldr	r3, [r2, #8]
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002248:	f7ff fcc8 	bl	8001bdc <HAL_GetTick>
 800224c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f012 0f08 	tst.w	r2, #8
 8002256:	d00f      	beq.n	8002278 <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002258:	f7ff fcc0 	bl	8001bdc <HAL_GetTick>
 800225c:	1b80      	subs	r0, r0, r6
 800225e:	280a      	cmp	r0, #10
 8002260:	d9f5      	bls.n	800224e <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 8002262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002264:	f023 0312 	bic.w	r3, r3, #18
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800226e:	2300      	movs	r3, #0
 8002270:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002274:	2501      	movs	r5, #1
 8002276:	e7c4      	b.n	8002202 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f042 0204 	orr.w	r2, r2, #4
 800227e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002280:	f7ff fcac 	bl	8001bdc <HAL_GetTick>
 8002284:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f013 0f04 	tst.w	r3, #4
 800228e:	d00f      	beq.n	80022b0 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002290:	f7ff fca4 	bl	8001bdc <HAL_GetTick>
 8002294:	1b80      	subs	r0, r0, r6
 8002296:	280a      	cmp	r0, #10
 8002298:	d9f5      	bls.n	8002286 <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 800229a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229c:	f023 0312 	bic.w	r3, r3, #18
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80022a6:	2300      	movs	r3, #0
 80022a8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80022ac:	2501      	movs	r5, #1
 80022ae:	e7a8      	b.n	8002202 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80022bc:	e79e      	b.n	80021fc <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80022be:	2502      	movs	r5, #2
 80022c0:	e79f      	b.n	8002202 <HAL_ADCEx_Calibration_Start+0x26>
 80022c2:	bf00      	nop
 80022c4:	20000074 	.word	0x20000074

080022c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80022ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d8:	0200      	lsls	r0, r0, #8
 80022da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022de:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80022e0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80022e4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80022e8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_NVIC_SetPriority+0x60>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fa:	f1c3 0407 	rsb	r4, r3, #7
 80022fe:	2c04      	cmp	r4, #4
 8002300:	bf28      	it	cs
 8002302:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002304:	1d1d      	adds	r5, r3, #4
 8002306:	2d06      	cmp	r5, #6
 8002308:	d918      	bls.n	800233c <HAL_NVIC_SetPriority+0x4c>
 800230a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 35ff 	mov.w	r5, #4294967295
 8002310:	fa05 f404 	lsl.w	r4, r5, r4
 8002314:	ea21 0104 	bic.w	r1, r1, r4
 8002318:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231a:	fa05 f303 	lsl.w	r3, r5, r3
 800231e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002322:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002324:	2800      	cmp	r0, #0
 8002326:	db0b      	blt.n	8002340 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	0109      	lsls	r1, r1, #4
 800232a:	b2c9      	uxtb	r1, r1
 800232c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002330:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002334:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002338:	bc30      	pop	{r4, r5}
 800233a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233c:	2300      	movs	r3, #0
 800233e:	e7e5      	b.n	800230c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	f000 000f 	and.w	r0, r0, #15
 8002344:	0109      	lsls	r1, r1, #4
 8002346:	b2c9      	uxtb	r1, r1
 8002348:	4b02      	ldr	r3, [pc, #8]	; (8002354 <HAL_NVIC_SetPriority+0x64>)
 800234a:	5419      	strb	r1, [r3, r0]
 800234c:	e7f4      	b.n	8002338 <HAL_NVIC_SetPriority+0x48>
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	e000ed14 	.word	0xe000ed14

08002358 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002358:	2800      	cmp	r0, #0
 800235a:	db07      	blt.n	800236c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235c:	f000 021f 	and.w	r2, r0, #31
 8002360:	0940      	lsrs	r0, r0, #5
 8002362:	2301      	movs	r3, #1
 8002364:	4093      	lsls	r3, r2
 8002366:	4a02      	ldr	r2, [pc, #8]	; (8002370 <HAL_NVIC_EnableIRQ+0x18>)
 8002368:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	3801      	subs	r0, #1
 8002376:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800237a:	d20a      	bcs.n	8002392 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_SYSTICK_Config+0x24>)
 800237e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_SYSTICK_Config+0x28>)
 8002382:	21f0      	movs	r1, #240	; 0xf0
 8002384:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	2000      	movs	r0, #0
 800238a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023a2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80023a4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80023a6:	2401      	movs	r4, #1
 80023a8:	40b4      	lsls	r4, r6
 80023aa:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ac:	6804      	ldr	r4, [r0, #0]
 80023ae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b0:	6843      	ldr	r3, [r0, #4]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d005      	beq.n	80023c2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80023b6:	6803      	ldr	r3, [r0, #0]
 80023b8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80023ba:	6803      	ldr	r3, [r0, #0]
 80023bc:	60da      	str	r2, [r3, #12]
  }
}
 80023be:	bc70      	pop	{r4, r5, r6}
 80023c0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80023c2:	6803      	ldr	r3, [r0, #0]
 80023c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	60d9      	str	r1, [r3, #12]
 80023ca:	e7f8      	b.n	80023be <DMA_SetConfig+0x1e>

080023cc <HAL_DMA_Init>:
  if(hdma == NULL)
 80023cc:	b360      	cbz	r0, 8002428 <HAL_DMA_Init+0x5c>
{
 80023ce:	b410      	push	{r4}
 80023d0:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023d2:	6801      	ldr	r1, [r0, #0]
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_DMA_Init+0x60>)
 80023d6:	440b      	add	r3, r1
 80023d8:	4815      	ldr	r0, [pc, #84]	; (8002430 <HAL_DMA_Init+0x64>)
 80023da:	fba0 0303 	umull	r0, r3, r0, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_DMA_Init+0x68>)
 80023e6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80023ee:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023f0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80023f4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80023f8:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 80023fc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	68d4      	ldr	r4, [r2, #12]
 8002400:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	6954      	ldr	r4, [r2, #20]
 8002408:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800240e:	69d4      	ldr	r4, [r2, #28]
 8002410:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002412:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002414:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	2000      	movs	r0, #0
 8002418:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800241a:	2301      	movs	r3, #1
 800241c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002420:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002424:	bc10      	pop	{r4}
 8002426:	4770      	bx	lr
    return HAL_ERROR;
 8002428:	2001      	movs	r0, #1
}
 800242a:	4770      	bx	lr
 800242c:	bffdfff8 	.word	0xbffdfff8
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_DMA_Start_IT>:
{
 8002438:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800243a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800243e:	2c01      	cmp	r4, #1
 8002440:	d032      	beq.n	80024a8 <HAL_DMA_Start_IT+0x70>
 8002442:	2401      	movs	r4, #1
 8002444:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002448:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800244c:	2c01      	cmp	r4, #1
 800244e:	d004      	beq.n	800245a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8002450:	2300      	movs	r3, #0
 8002452:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8002456:	2002      	movs	r0, #2
}
 8002458:	bd38      	pop	{r3, r4, r5, pc}
 800245a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	2002      	movs	r0, #2
 800245e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002462:	2000      	movs	r0, #0
 8002464:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002466:	6825      	ldr	r5, [r4, #0]
 8002468:	6828      	ldr	r0, [r5, #0]
 800246a:	f020 0001 	bic.w	r0, r0, #1
 800246e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff ff95 	bl	80023a0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002478:	b15b      	cbz	r3, 8002492 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	6813      	ldr	r3, [r2, #0]
 800247e:	f043 030e 	orr.w	r3, r3, #14
 8002482:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2000      	movs	r0, #0
 8002490:	e7e2      	b.n	8002458 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002492:	6822      	ldr	r2, [r4, #0]
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800249c:	6822      	ldr	r2, [r4, #0]
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	f043 030a 	orr.w	r3, r3, #10
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e7ed      	b.n	8002484 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80024a8:	2002      	movs	r0, #2
 80024aa:	e7d5      	b.n	8002458 <HAL_DMA_Start_IT+0x20>

080024ac <HAL_DMA_Abort_IT>:
{  
 80024ac:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	2304      	movs	r3, #4
 80024b8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
}
 80024bc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024be:	6802      	ldr	r2, [r0, #0]
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f023 030e 	bic.w	r3, r3, #14
 80024c6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80024c8:	6802      	ldr	r2, [r0, #0]
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	4a19      	ldr	r2, [pc, #100]	; (800253c <HAL_DMA_Abort_IT+0x90>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d014      	beq.n	8002504 <HAL_DMA_Abort_IT+0x58>
 80024da:	3214      	adds	r2, #20
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01f      	beq.n	8002520 <HAL_DMA_Abort_IT+0x74>
 80024e0:	3214      	adds	r2, #20
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01e      	beq.n	8002524 <HAL_DMA_Abort_IT+0x78>
 80024e6:	3214      	adds	r2, #20
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01e      	beq.n	800252a <HAL_DMA_Abort_IT+0x7e>
 80024ec:	3214      	adds	r2, #20
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01e      	beq.n	8002530 <HAL_DMA_Abort_IT+0x84>
 80024f2:	3214      	adds	r2, #20
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d002      	beq.n	80024fe <HAL_DMA_Abort_IT+0x52>
 80024f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024fc:	e003      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
 80024fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002502:	e000      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
 8002504:	2201      	movs	r2, #1
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_DMA_Abort_IT+0x94>)
 8002508:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800250a:	2301      	movs	r3, #1
 800250c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002510:	2300      	movs	r3, #0
 8002512:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002516:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002518:	b16b      	cbz	r3, 8002536 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800251a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2000      	movs	r0, #0
 800251e:	e7cd      	b.n	80024bc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002520:	2210      	movs	r2, #16
 8002522:	e7f0      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
 8002524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002528:	e7ed      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
 800252a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800252e:	e7ea      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
 8002530:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002534:	e7e7      	b.n	8002506 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2000      	movs	r0, #0
 8002538:	e7c0      	b.n	80024bc <HAL_DMA_Abort_IT+0x10>
 800253a:	bf00      	nop
 800253c:	40020008 	.word	0x40020008
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_DMA_IRQHandler>:
{
 8002544:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002546:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002548:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800254a:	6804      	ldr	r4, [r0, #0]
 800254c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800254e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002550:	2304      	movs	r3, #4
 8002552:	408b      	lsls	r3, r1
 8002554:	4213      	tst	r3, r2
 8002556:	d035      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x80>
 8002558:	f015 0f04 	tst.w	r5, #4
 800255c:	d032      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f013 0f20 	tst.w	r3, #32
 8002564:	d103      	bne.n	800256e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800256e:	6803      	ldr	r3, [r0, #0]
 8002570:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_DMA_IRQHandler+0x13c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d014      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x5c>
 8002576:	3214      	adds	r2, #20
 8002578:	4293      	cmp	r3, r2
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0x6a>
 800257c:	3214      	adds	r2, #20
 800257e:	4293      	cmp	r3, r2
 8002580:	d017      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x6e>
 8002582:	3214      	adds	r2, #20
 8002584:	4293      	cmp	r3, r2
 8002586:	d017      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x74>
 8002588:	3214      	adds	r2, #20
 800258a:	4293      	cmp	r3, r2
 800258c:	d017      	beq.n	80025be <HAL_DMA_IRQHandler+0x7a>
 800258e:	3214      	adds	r2, #20
 8002590:	4293      	cmp	r3, r2
 8002592:	d002      	beq.n	800259a <HAL_DMA_IRQHandler+0x56>
 8002594:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002598:	e003      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
 800259a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800259e:	e000      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
 80025a0:	2204      	movs	r2, #4
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_DMA_IRQHandler+0x140>)
 80025a4:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025a8:	b103      	cbz	r3, 80025ac <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80025aa:	4798      	blx	r3
}
 80025ac:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	e7f7      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
 80025b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b6:	e7f4      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
 80025b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025bc:	e7f1      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
 80025be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025c2:	e7ee      	b.n	80025a2 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025c4:	2302      	movs	r3, #2
 80025c6:	408b      	lsls	r3, r1
 80025c8:	4213      	tst	r3, r2
 80025ca:	d03c      	beq.n	8002646 <HAL_DMA_IRQHandler+0x102>
 80025cc:	f015 0f02 	tst.w	r5, #2
 80025d0:	d039      	beq.n	8002646 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f013 0f20 	tst.w	r3, #32
 80025d8:	d106      	bne.n	80025e8 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	f023 030a 	bic.w	r3, r3, #10
 80025e0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025e8:	6803      	ldr	r3, [r0, #0]
 80025ea:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_DMA_IRQHandler+0x13c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d014      	beq.n	800261a <HAL_DMA_IRQHandler+0xd6>
 80025f0:	3214      	adds	r2, #20
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01c      	beq.n	8002630 <HAL_DMA_IRQHandler+0xec>
 80025f6:	3214      	adds	r2, #20
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d01b      	beq.n	8002634 <HAL_DMA_IRQHandler+0xf0>
 80025fc:	3214      	adds	r2, #20
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01b      	beq.n	800263a <HAL_DMA_IRQHandler+0xf6>
 8002602:	3214      	adds	r2, #20
 8002604:	4293      	cmp	r3, r2
 8002606:	d01b      	beq.n	8002640 <HAL_DMA_IRQHandler+0xfc>
 8002608:	3214      	adds	r2, #20
 800260a:	4293      	cmp	r3, r2
 800260c:	d002      	beq.n	8002614 <HAL_DMA_IRQHandler+0xd0>
 800260e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002612:	e003      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
 8002614:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002618:	e000      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
 800261a:	2202      	movs	r2, #2
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_DMA_IRQHandler+0x140>)
 800261e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002620:	2300      	movs	r3, #0
 8002622:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002626:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0bf      	beq.n	80025ac <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 800262c:	4798      	blx	r3
 800262e:	e7bd      	b.n	80025ac <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002630:	2220      	movs	r2, #32
 8002632:	e7f3      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
 8002634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002638:	e7f0      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
 800263a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263e:	e7ed      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
 8002640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002644:	e7ea      	b.n	800261c <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002646:	2308      	movs	r3, #8
 8002648:	fa03 f101 	lsl.w	r1, r3, r1
 800264c:	4211      	tst	r1, r2
 800264e:	d0ad      	beq.n	80025ac <HAL_DMA_IRQHandler+0x68>
 8002650:	f015 0f08 	tst.w	r5, #8
 8002654:	d0aa      	beq.n	80025ac <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f023 030e 	bic.w	r3, r3, #14
 800265c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800265e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002660:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002662:	2301      	movs	r3, #1
 8002664:	fa03 f202 	lsl.w	r2, r3, r2
 8002668:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800266a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800266c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002670:	2300      	movs	r3, #0
 8002672:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002676:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002678:	2b00      	cmp	r3, #0
 800267a:	d097      	beq.n	80025ac <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800267c:	4798      	blx	r3
  return;
 800267e:	e795      	b.n	80025ac <HAL_DMA_IRQHandler+0x68>
 8002680:	40020008 	.word	0x40020008
 8002684:	40020000 	.word	0x40020000

08002688 <HAL_DMA_GetState>:
}
 8002688:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b4f0      	push	{r4, r5, r6, r7}
 8002692:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002694:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8002696:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002698:	e0a2      	b.n	80027e0 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800269a:	2d00      	cmp	r5, #0
 800269c:	d05a      	beq.n	8002754 <HAL_GPIO_Init+0xc4>
 800269e:	2d01      	cmp	r5, #1
 80026a0:	d100      	bne.n	80026a4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a4:	2bff      	cmp	r3, #255	; 0xff
 80026a6:	d869      	bhi.n	800277c <HAL_GPIO_Init+0xec>
 80026a8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0xf2>
 80026ae:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b0:	f8dc 4000 	ldr.w	r4, [ip]
 80026b4:	270f      	movs	r7, #15
 80026b6:	40af      	lsls	r7, r5
 80026b8:	ea24 0407 	bic.w	r4, r4, r7
 80026bc:	fa06 f505 	lsl.w	r5, r6, r5
 80026c0:	432c      	orrs	r4, r5
 80026c2:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c6:	684c      	ldr	r4, [r1, #4]
 80026c8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80026cc:	f000 8087 	beq.w	80027de <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026d0:	4c5f      	ldr	r4, [pc, #380]	; (8002850 <HAL_GPIO_Init+0x1c0>)
 80026d2:	69a5      	ldr	r5, [r4, #24]
 80026d4:	f045 0501 	orr.w	r5, r5, #1
 80026d8:	61a5      	str	r5, [r4, #24]
 80026da:	69a4      	ldr	r4, [r4, #24]
 80026dc:	f004 0401 	and.w	r4, r4, #1
 80026e0:	9401      	str	r4, [sp, #4]
 80026e2:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80026e4:	0895      	lsrs	r5, r2, #2
 80026e6:	1caf      	adds	r7, r5, #2
 80026e8:	4c5a      	ldr	r4, [pc, #360]	; (8002854 <HAL_GPIO_Init+0x1c4>)
 80026ea:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ee:	f002 0703 	and.w	r7, r2, #3
 80026f2:	00bf      	lsls	r7, r7, #2
 80026f4:	f04f 0c0f 	mov.w	ip, #15
 80026f8:	fa0c fc07 	lsl.w	ip, ip, r7
 80026fc:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002700:	4c55      	ldr	r4, [pc, #340]	; (8002858 <HAL_GPIO_Init+0x1c8>)
 8002702:	42a0      	cmp	r0, r4
 8002704:	d043      	beq.n	800278e <HAL_GPIO_Init+0xfe>
 8002706:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800270a:	42a0      	cmp	r0, r4
 800270c:	f000 8081 	beq.w	8002812 <HAL_GPIO_Init+0x182>
 8002710:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002714:	42a0      	cmp	r0, r4
 8002716:	d07e      	beq.n	8002816 <HAL_GPIO_Init+0x186>
 8002718:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800271c:	42a0      	cmp	r0, r4
 800271e:	d034      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 8002720:	2404      	movs	r4, #4
 8002722:	e035      	b.n	8002790 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8002724:	4f4d      	ldr	r7, [pc, #308]	; (800285c <HAL_GPIO_Init+0x1cc>)
 8002726:	42bd      	cmp	r5, r7
 8002728:	d014      	beq.n	8002754 <HAL_GPIO_Init+0xc4>
 800272a:	d90b      	bls.n	8002744 <HAL_GPIO_Init+0xb4>
 800272c:	4f4c      	ldr	r7, [pc, #304]	; (8002860 <HAL_GPIO_Init+0x1d0>)
 800272e:	42bd      	cmp	r5, r7
 8002730:	d010      	beq.n	8002754 <HAL_GPIO_Init+0xc4>
 8002732:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002736:	42bd      	cmp	r5, r7
 8002738:	d00c      	beq.n	8002754 <HAL_GPIO_Init+0xc4>
 800273a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800273e:	42bd      	cmp	r5, r7
 8002740:	d1b0      	bne.n	80026a4 <HAL_GPIO_Init+0x14>
 8002742:	e007      	b.n	8002754 <HAL_GPIO_Init+0xc4>
 8002744:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8002748:	42bd      	cmp	r5, r7
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0xc4>
 800274c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002750:	42bd      	cmp	r5, r7
 8002752:	d1a7      	bne.n	80026a4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002754:	688d      	ldr	r5, [r1, #8]
 8002756:	b17d      	cbz	r5, 8002778 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002758:	2d01      	cmp	r5, #1
 800275a:	d008      	beq.n	800276e <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 800275c:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275e:	2608      	movs	r6, #8
 8002760:	e7a0      	b.n	80026a4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002762:	68ce      	ldr	r6, [r1, #12]
 8002764:	3608      	adds	r6, #8
          break;
 8002766:	e79d      	b.n	80026a4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002768:	68ce      	ldr	r6, [r1, #12]
 800276a:	360c      	adds	r6, #12
          break;
 800276c:	e79a      	b.n	80026a4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800276e:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2608      	movs	r6, #8
 8002772:	e797      	b.n	80026a4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002774:	2600      	movs	r6, #0
 8002776:	e795      	b.n	80026a4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002778:	2604      	movs	r6, #4
 800277a:	e793      	b.n	80026a4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277c:	f100 0c04 	add.w	ip, r0, #4
 8002780:	e793      	b.n	80026aa <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002782:	f1a2 0508 	sub.w	r5, r2, #8
 8002786:	00ad      	lsls	r5, r5, #2
 8002788:	e792      	b.n	80026b0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800278a:	2403      	movs	r4, #3
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x100>
 800278e:	2400      	movs	r4, #0
 8002790:	40bc      	lsls	r4, r7
 8002792:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8002796:	3502      	adds	r5, #2
 8002798:	4f2e      	ldr	r7, [pc, #184]	; (8002854 <HAL_GPIO_Init+0x1c4>)
 800279a:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279e:	684c      	ldr	r4, [r1, #4]
 80027a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80027a4:	d039      	beq.n	800281a <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a6:	4d2f      	ldr	r5, [pc, #188]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 80027a8:	682c      	ldr	r4, [r5, #0]
 80027aa:	431c      	orrs	r4, r3
 80027ac:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ae:	684c      	ldr	r4, [r1, #4]
 80027b0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80027b4:	d037      	beq.n	8002826 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b6:	4d2b      	ldr	r5, [pc, #172]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 80027b8:	686c      	ldr	r4, [r5, #4]
 80027ba:	431c      	orrs	r4, r3
 80027bc:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027be:	684c      	ldr	r4, [r1, #4]
 80027c0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80027c4:	d035      	beq.n	8002832 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c6:	4d27      	ldr	r5, [pc, #156]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 80027c8:	68ac      	ldr	r4, [r5, #8]
 80027ca:	431c      	orrs	r4, r3
 80027cc:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ce:	684c      	ldr	r4, [r1, #4]
 80027d0:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80027d4:	d033      	beq.n	800283e <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d6:	4d23      	ldr	r5, [pc, #140]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 80027d8:	68ec      	ldr	r4, [r5, #12]
 80027da:	4323      	orrs	r3, r4
 80027dc:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80027de:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	680b      	ldr	r3, [r1, #0]
 80027e2:	fa33 f402 	lsrs.w	r4, r3, r2
 80027e6:	d030      	beq.n	800284a <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 80027e8:	2401      	movs	r4, #1
 80027ea:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ec:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 80027ee:	429c      	cmp	r4, r3
 80027f0:	d1f5      	bne.n	80027de <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 80027f2:	684d      	ldr	r5, [r1, #4]
 80027f4:	2d12      	cmp	r5, #18
 80027f6:	d0b7      	beq.n	8002768 <HAL_GPIO_Init+0xd8>
 80027f8:	d894      	bhi.n	8002724 <HAL_GPIO_Init+0x94>
 80027fa:	2d02      	cmp	r5, #2
 80027fc:	d0b1      	beq.n	8002762 <HAL_GPIO_Init+0xd2>
 80027fe:	f67f af4c 	bls.w	800269a <HAL_GPIO_Init+0xa>
 8002802:	2d03      	cmp	r5, #3
 8002804:	d0b6      	beq.n	8002774 <HAL_GPIO_Init+0xe4>
 8002806:	2d11      	cmp	r5, #17
 8002808:	f47f af4c 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800280c:	68ce      	ldr	r6, [r1, #12]
 800280e:	3604      	adds	r6, #4
          break;
 8002810:	e748      	b.n	80026a4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002812:	2401      	movs	r4, #1
 8002814:	e7bc      	b.n	8002790 <HAL_GPIO_Init+0x100>
 8002816:	2402      	movs	r4, #2
 8002818:	e7ba      	b.n	8002790 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281a:	4d12      	ldr	r5, [pc, #72]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 800281c:	682c      	ldr	r4, [r5, #0]
 800281e:	ea24 0403 	bic.w	r4, r4, r3
 8002822:	602c      	str	r4, [r5, #0]
 8002824:	e7c3      	b.n	80027ae <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002826:	4d0f      	ldr	r5, [pc, #60]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 8002828:	686c      	ldr	r4, [r5, #4]
 800282a:	ea24 0403 	bic.w	r4, r4, r3
 800282e:	606c      	str	r4, [r5, #4]
 8002830:	e7c5      	b.n	80027be <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002832:	4d0c      	ldr	r5, [pc, #48]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 8002834:	68ac      	ldr	r4, [r5, #8]
 8002836:	ea24 0403 	bic.w	r4, r4, r3
 800283a:	60ac      	str	r4, [r5, #8]
 800283c:	e7c7      	b.n	80027ce <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800283e:	4d09      	ldr	r5, [pc, #36]	; (8002864 <HAL_GPIO_Init+0x1d4>)
 8002840:	68ec      	ldr	r4, [r5, #12]
 8002842:	ea24 0303 	bic.w	r3, r4, r3
 8002846:	60eb      	str	r3, [r5, #12]
 8002848:	e7c9      	b.n	80027de <HAL_GPIO_Init+0x14e>
  }
}
 800284a:	b002      	add	sp, #8
 800284c:	bcf0      	pop	{r4, r5, r6, r7}
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	10210000 	.word	0x10210000
 8002860:	10310000 	.word	0x10310000
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002868:	b912      	cbnz	r2, 8002870 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286a:	0409      	lsls	r1, r1, #16
 800286c:	6101      	str	r1, [r0, #16]
  }
}
 800286e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002870:	6101      	str	r1, [r0, #16]
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002874:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002876:	ea01 0203 	and.w	r2, r1, r3
 800287a:	ea21 0103 	bic.w	r1, r1, r3
 800287e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002882:	6101      	str	r1, [r0, #16]
}
 8002884:	4770      	bx	lr

08002886 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002886:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d00a      	beq.n	80028a6 <I2C_Master_SB+0x20>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002890:	6903      	ldr	r3, [r0, #16]
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002896:	d015      	beq.n	80028c4 <I2C_Master_SB+0x3e>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002898:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d034      	beq.n	8002908 <I2C_Master_SB+0x82>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if (hi2c->EventCount == 1U)
 800289e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d03b      	beq.n	800291c <I2C_Master_SB+0x96>
      {
        /* Do nothing */
      }
    }
  }
}
 80028a4:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 80028a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028a8:	b92b      	cbnz	r3, 80028b6 <I2C_Master_SB+0x30>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028ac:	6802      	ldr	r2, [r0, #0]
 80028ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028b2:	6113      	str	r3, [r2, #16]
 80028b4:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028b8:	6802      	ldr	r2, [r0, #0]
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	6113      	str	r3, [r2, #16]
 80028c2:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b21      	cmp	r3, #33	; 0x21
 80028cc:	d00f      	beq.n	80028ee <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028d0:	6802      	ldr	r2, [r0, #0]
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028dc:	b16b      	cbz	r3, 80028fa <I2C_Master_SB+0x74>
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	b15b      	cbz	r3, 80028fa <I2C_Master_SB+0x74>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	6853      	ldr	r3, [r2, #4]
 80028e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028ea:	6053      	str	r3, [r2, #4]
 80028ec:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028f6:	6113      	str	r3, [r2, #16]
 80028f8:	e7ef      	b.n	80028da <I2C_Master_SB+0x54>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0d1      	beq.n	80028a4 <I2C_Master_SB+0x1e>
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ed      	bne.n	80028e2 <I2C_Master_SB+0x5c>
 8002906:	e7cd      	b.n	80028a4 <I2C_Master_SB+0x1e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002908:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800290a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	f003 0306 	and.w	r3, r3, #6
 8002914:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002918:	6113      	str	r3, [r2, #16]
 800291a:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800291c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800291e:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002922:	6802      	ldr	r2, [r0, #0]
 8002924:	f003 0306 	and.w	r3, r3, #6
 8002928:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800292c:	6113      	str	r3, [r2, #16]
}
 800292e:	e7b9      	b.n	80028a4 <I2C_Master_SB+0x1e>

08002930 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002930:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002932:	6802      	ldr	r2, [r0, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800293a:	b13b      	cbz	r3, 800294c <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	b14b      	cbz	r3, 8002954 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	6053      	str	r3, [r2, #4]
    }
  }
}
 800294a:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800294c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800294e:	2a00      	cmp	r2, #0
 8002950:	d1f4      	bne.n	800293c <I2C_Master_ADD10+0xc>
 8002952:	e7fa      	b.n	800294a <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002954:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f1      	bne.n	8002940 <I2C_Master_ADD10+0x10>
 800295c:	e7f5      	b.n	800294a <I2C_Master_ADD10+0x1a>

0800295e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800295e:	b410      	push	{r4}
 8002960:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002962:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002966:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002968:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800296a:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800296c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b22      	cmp	r3, #34	; 0x22
 8002974:	d00a      	beq.n	800298c <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	930b      	str	r3, [sp, #44]	; 0x2c
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	930b      	str	r3, [sp, #44]	; 0x2c
 8002984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }
}
 8002986:	b00d      	add	sp, #52	; 0x34
 8002988:	bc10      	pop	{r4}
 800298a:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800298c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800298e:	b90b      	cbnz	r3, 8002994 <I2C_Master_ADDR+0x36>
 8002990:	2a40      	cmp	r2, #64	; 0x40
 8002992:	d017      	beq.n	80029c4 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002994:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002996:	b91b      	cbnz	r3, 80029a0 <I2C_Master_ADDR+0x42>
 8002998:	6903      	ldr	r3, [r0, #16]
 800299a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800299e:	d019      	beq.n	80029d4 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 80029a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d125      	bne.n	80029f4 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a8:	9303      	str	r3, [sp, #12]
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	9203      	str	r2, [sp, #12]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	9203      	str	r2, [sp, #12]
 80029b4:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	6503      	str	r3, [r0, #80]	; 0x50
 80029c2:	e7e0      	b.n	8002986 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	9201      	str	r2, [sp, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	9b01      	ldr	r3, [sp, #4]
 80029d2:	e7d8      	b.n	8002986 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d4:	2300      	movs	r3, #0
 80029d6:	9302      	str	r3, [sp, #8]
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	9202      	str	r2, [sp, #8]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	9202      	str	r2, [sp, #8]
 80029e2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80029ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029ee:	3301      	adds	r3, #1
 80029f0:	6503      	str	r3, [r0, #80]	; 0x50
 80029f2:	e7c8      	b.n	8002986 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 80029f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d025      	beq.n	8002a48 <I2C_Master_ADDR+0xea>
      else if (hi2c->XferCount == 2U)
 80029fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d07b      	beq.n	8002afc <I2C_Master_ADDR+0x19e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0c:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002a16:	d00e      	beq.n	8002a36 <I2C_Master_ADDR+0xd8>
 8002a18:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002a1c:	d007      	beq.n	8002a2e <I2C_Master_ADDR+0xd0>
 8002a1e:	2901      	cmp	r1, #1
 8002a20:	d005      	beq.n	8002a2e <I2C_Master_ADDR+0xd0>
 8002a22:	2908      	cmp	r1, #8
 8002a24:	d003      	beq.n	8002a2e <I2C_Master_ADDR+0xd0>
 8002a26:	2910      	cmp	r1, #16
 8002a28:	d001      	beq.n	8002a2e <I2C_Master_ADDR+0xd0>
 8002a2a:	2920      	cmp	r1, #32
 8002a2c:	d103      	bne.n	8002a36 <I2C_Master_ADDR+0xd8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a34:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	930a      	str	r3, [sp, #40]	; 0x28
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	930a      	str	r3, [sp, #40]	; 0x28
 8002a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a46:	e7ba      	b.n	80029be <I2C_Master_ADDR+0x60>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a48:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002a4c:	d011      	beq.n	8002a72 <I2C_Master_ADDR+0x114>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a4e:	2908      	cmp	r1, #8
 8002a50:	d034      	beq.n	8002abc <I2C_Master_ADDR+0x15e>
 8002a52:	2920      	cmp	r1, #32
 8002a54:	d032      	beq.n	8002abc <I2C_Master_ADDR+0x15e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a56:	2c12      	cmp	r4, #18
 8002a58:	d02e      	beq.n	8002ab8 <I2C_Master_ADDR+0x15a>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a5a:	2904      	cmp	r1, #4
 8002a5c:	d040      	beq.n	8002ae0 <I2C_Master_ADDR+0x182>
 8002a5e:	2902      	cmp	r1, #2
 8002a60:	d03e      	beq.n	8002ae0 <I2C_Master_ADDR+0x182>
 8002a62:	2910      	cmp	r1, #16
 8002a64:	d03c      	beq.n	8002ae0 <I2C_Master_ADDR+0x182>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	6802      	ldr	r2, [r0, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	e03b      	b.n	8002aea <I2C_Master_ADDR+0x18c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	6802      	ldr	r2, [r0, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a7c:	6803      	ldr	r3, [r0, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002a84:	d00c      	beq.n	8002aa0 <I2C_Master_ADDR+0x142>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9304      	str	r3, [sp, #16]
 8002a92:	6803      	ldr	r3, [r0, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	9204      	str	r2, [sp, #16]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	9304      	str	r3, [sp, #16]
 8002a9c:	9b04      	ldr	r3, [sp, #16]
 8002a9e:	e78e      	b.n	80029be <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	9205      	str	r2, [sp, #20]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	9205      	str	r2, [sp, #20]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	9205      	str	r2, [sp, #20]
 8002aac:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e782      	b.n	80029be <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ab8:	2901      	cmp	r1, #1
 8002aba:	d0ce      	beq.n	8002a5a <I2C_Master_ADDR+0xfc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9307      	str	r3, [sp, #28]
 8002aca:	6803      	ldr	r3, [r0, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	9207      	str	r2, [sp, #28]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	9207      	str	r2, [sp, #28]
 8002ad4:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e76e      	b.n	80029be <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	6802      	ldr	r2, [r0, #0]
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae8:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	9306      	str	r3, [sp, #24]
 8002aee:	6803      	ldr	r3, [r0, #0]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	9206      	str	r2, [sp, #24]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	9306      	str	r3, [sp, #24]
 8002af8:	9b06      	ldr	r3, [sp, #24]
 8002afa:	e760      	b.n	80029be <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002afc:	2904      	cmp	r1, #4
 8002afe:	d015      	beq.n	8002b2c <I2C_Master_ADDR+0x1ce>
 8002b00:	2902      	cmp	r1, #2
 8002b02:	d013      	beq.n	8002b2c <I2C_Master_ADDR+0x1ce>
 8002b04:	2910      	cmp	r1, #16
 8002b06:	d011      	beq.n	8002b2c <I2C_Master_ADDR+0x1ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b08:	6802      	ldr	r2, [r0, #0]
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b10:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b12:	2300      	movs	r3, #0
 8002b14:	9308      	str	r3, [sp, #32]
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	9208      	str	r2, [sp, #32]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	9208      	str	r2, [sp, #32]
 8002b20:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00c      	b.n	8002b46 <I2C_Master_ADDR+0x1e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b34:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	9309      	str	r3, [sp, #36]	; 0x24
 8002b3a:	6803      	ldr	r3, [r0, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	9309      	str	r3, [sp, #36]	; 0x24
 8002b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b46:	6803      	ldr	r3, [r0, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002b4e:	f43f af36 	beq.w	80029be <I2C_Master_ADDR+0x60>
 8002b52:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002b56:	d008      	beq.n	8002b6a <I2C_Master_ADDR+0x20c>
 8002b58:	2901      	cmp	r1, #1
 8002b5a:	d006      	beq.n	8002b6a <I2C_Master_ADDR+0x20c>
 8002b5c:	2908      	cmp	r1, #8
 8002b5e:	d004      	beq.n	8002b6a <I2C_Master_ADDR+0x20c>
 8002b60:	2910      	cmp	r1, #16
 8002b62:	d002      	beq.n	8002b6a <I2C_Master_ADDR+0x20c>
 8002b64:	2920      	cmp	r1, #32
 8002b66:	f47f af2a 	bne.w	80029be <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e724      	b.n	80029be <I2C_Master_ADDR+0x60>

08002b74 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002b74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b153      	cbz	r3, 8002b90 <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b88:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002b90:	4770      	bx	lr

08002b92 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002b92:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b153      	cbz	r3, 8002bae <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ba6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002bae:	4770      	bx	lr

08002bb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bc8:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002bd0:	9b01      	ldr	r3, [sp, #4]
 8002bd2:	b133      	cbz	r3, 8002be2 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002bd4:	6803      	ldr	r3, [r0, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002bdc:	d1f5      	bne.n	8002bca <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8002bde:	2000      	movs	r0, #0
 8002be0:	e004      	b.n	8002bec <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002be4:	f043 0320 	orr.w	r3, r3, #32
 8002be8:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
}
 8002bec:	b002      	add	sp, #8
 8002bee:	4770      	bx	lr
 8002bf0:	20000074 	.word	0x20000074
 8002bf4:	14f8b589 	.word	0x14f8b589

08002bf8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf8:	6803      	ldr	r3, [r0, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c00:	d011      	beq.n	8002c26 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c12:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c16:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c18:	f042 0204 	orr.w	r2, r2, #4
 8002c1c:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	4770      	bx	lr
  }
  return HAL_OK;
 8002c26:	2000      	movs	r0, #0
}
 8002c28:	4770      	bx	lr

08002c2a <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c30:	d004      	beq.n	8002c3c <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c38:	d003      	beq.n	8002c42 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c3a:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002c40:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c42:	2308      	movs	r3, #8
 8002c44:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002c46:	e7f8      	b.n	8002c3a <I2C_ConvertOtherXferOptions+0x10>

08002c48 <I2C_WaitOnFlagUntilTimeout>:
{
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4617      	mov	r7, r2
 8002c50:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	e022      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe ffc2 	bl	8001bdc <HAL_GetTick>
 8002c58:	9b06      	ldr	r3, [sp, #24]
 8002c5a:	1ac0      	subs	r0, r0, r3
 8002c5c:	42a8      	cmp	r0, r5
 8002c5e:	d800      	bhi.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002c60:	b9dd      	cbnz	r5, 8002c9a <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c66:	2220      	movs	r2, #32
 8002c68:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c6c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c78:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e01a      	b.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	6833      	ldr	r3, [r6, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	ea24 0303 	bic.w	r3, r4, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	429f      	cmp	r7, r3
 8002c92:	d10f      	bne.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002c94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c98:	d1dc      	bne.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d0ee      	beq.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002ca2:	6833      	ldr	r3, [r6, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	ea24 0303 	bic.w	r3, r4, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	e7ed      	b.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002cb4:	2000      	movs	r0, #0
}
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	4604      	mov	r4, r0
 8002cbc:	460d      	mov	r5, r1
 8002cbe:	4616      	mov	r6, r2
 8002cc0:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc2:	e03c      	b.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ce4:	f042 0204 	orr.w	r2, r2, #4
 8002ce8:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002cea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002cee:	2001      	movs	r0, #1
 8002cf0:	e033      	b.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7fe ff73 	bl	8001bdc <HAL_GetTick>
 8002cf6:	1bc0      	subs	r0, r0, r7
 8002cf8:	42b0      	cmp	r0, r6
 8002cfa:	d800      	bhi.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002cfc:	b9fe      	cbnz	r6, 8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d02:	2220      	movs	r2, #32
 8002d04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002d18:	2001      	movs	r0, #1
 8002d1a:	e01e      	b.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	ea25 0303 	bic.w	r3, r5, r3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3300      	adds	r3, #0
 8002d28:	bf18      	it	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	b1a3      	cbz	r3, 8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d36:	d1c5      	bne.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002d3c:	d1d9      	bne.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d0ea      	beq.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	ea25 0303 	bic.w	r3, r5, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3300      	adds	r3, #0
 8002d52:	bf18      	it	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	e7e9      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002d58:	2000      	movs	r0, #0
}
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d5c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	460d      	mov	r5, r1
 8002d62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d6c:	d11c      	bne.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff ff42 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002d74:	b9d0      	cbnz	r0, 8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d7a:	d0f3      	beq.n	8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7fe ff2e 	bl	8001bdc <HAL_GetTick>
 8002d80:	1b80      	subs	r0, r0, r6
 8002d82:	42a8      	cmp	r0, r5
 8002d84:	d801      	bhi.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d86:	2d00      	cmp	r5, #0
 8002d88:	d1ec      	bne.n	8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002da0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002da4:	2001      	movs	r0, #1
 8002da6:	e000      	b.n	8002daa <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002da8:	2000      	movs	r0, #0
}
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002dac:	2001      	movs	r0, #1
 8002dae:	e7fc      	b.n	8002daa <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002db0 <I2C_RequestMemoryWrite>:
{
 8002db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	4604      	mov	r4, r0
 8002db8:	4688      	mov	r8, r1
 8002dba:	4616      	mov	r6, r2
 8002dbc:	461f      	mov	r7, r3
 8002dbe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc0:	6802      	ldr	r2, [r0, #0]
 8002dc2:	6813      	ldr	r3, [r2, #0]
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dca:	9500      	str	r5, [sp, #0]
 8002dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd4:	f7ff ff38 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	b160      	cbz	r0, 8002df4 <I2C_RequestMemoryWrite+0x44>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002de2:	d04f      	beq.n	8002e84 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	b004      	add	sp, #16
 8002df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002df4:	6822      	ldr	r2, [r4, #0]
 8002df6:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8002dfa:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e00:	4921      	ldr	r1, [pc, #132]	; (8002e88 <I2C_RequestMemoryWrite+0xd8>)
 8002e02:	4620      	mov	r0, r4
 8002e04:	f7ff ff58 	bl	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e08:	b108      	cbz	r0, 8002e0e <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e7ee      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9303      	str	r3, [sp, #12]
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	9203      	str	r2, [sp, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	9303      	str	r3, [sp, #12]
 8002e1c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1e:	462a      	mov	r2, r5
 8002e20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff9a 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b158      	cbz	r0, 8002e44 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d001      	beq.n	8002e36 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e7da      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e7d3      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e44:	2f01      	cmp	r7, #1
 8002e46:	d00e      	beq.n	8002e66 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	0a32      	lsrs	r2, r6, #8
 8002e4c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	462a      	mov	r2, r5
 8002e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff ff82 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b178      	cbz	r0, 8002e7c <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d005      	beq.n	8002e6e <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e7c2      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	b2f6      	uxtb	r6, r6
 8002e6a:	6116      	str	r6, [r2, #16]
 8002e6c:	e7be      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e7b7      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	b2f6      	uxtb	r6, r6
 8002e80:	6116      	str	r6, [r2, #16]
 8002e82:	e7b3      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e7b1      	b.n	8002dec <I2C_RequestMemoryWrite+0x3c>
 8002e88:	00010002 	.word	0x00010002

08002e8c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f013 0f04 	tst.w	r3, #4
 8002e9c:	d11c      	bne.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff feaa 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002ea4:	b9d0      	cbnz	r0, 8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002eaa:	d0f3      	beq.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7fe fe96 	bl	8001bdc <HAL_GetTick>
 8002eb0:	1b80      	subs	r0, r0, r6
 8002eb2:	42a8      	cmp	r0, r5
 8002eb4:	d801      	bhi.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d1ec      	bne.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eca:	f042 0220 	orr.w	r2, r2, #32
 8002ece:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ed0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e000      	b.n	8002eda <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ed8:	2000      	movs	r0, #0
}
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
 8002ede:	e7fc      	b.n	8002eda <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002ee0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f000 80c8 	beq.w	8003076 <HAL_I2C_Init+0x196>
{
 8002ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d075      	beq.n	8002fde <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	2324      	movs	r3, #36	; 0x24
 8002ef4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	6822      	ldr	r2, [r4, #0]
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f14:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f16:	f001 fc1b 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_I2C_Init+0x1a0>)
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d862      	bhi.n	8002fe8 <HAL_I2C_Init+0x108>
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_I2C_Init+0x1a4>)
 8002f24:	4298      	cmp	r0, r3
 8002f26:	bf8c      	ite	hi
 8002f28:	2300      	movhi	r3, #0
 8002f2a:	2301      	movls	r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 80a4 	bne.w	800307a <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8002f32:	4b55      	ldr	r3, [pc, #340]	; (8003088 <HAL_I2C_Init+0x1a8>)
 8002f34:	fba3 2300 	umull	r2, r3, r3, r0
 8002f38:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3a:	6821      	ldr	r1, [r4, #0]
 8002f3c:	684a      	ldr	r2, [r1, #4]
 8002f3e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f42:	431a      	orrs	r2, r3
 8002f44:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	6a2a      	ldr	r2, [r5, #32]
 8002f4a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002f4e:	6866      	ldr	r6, [r4, #4]
 8002f50:	494b      	ldr	r1, [pc, #300]	; (8003080 <HAL_I2C_Init+0x1a0>)
 8002f52:	428e      	cmp	r6, r1
 8002f54:	d84e      	bhi.n	8002ff4 <HAL_I2C_Init+0x114>
 8002f56:	3301      	adds	r3, #1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	6825      	ldr	r5, [r4, #0]
 8002f5e:	69e9      	ldr	r1, [r5, #28]
 8002f60:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002f64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f68:	6863      	ldr	r3, [r4, #4]
 8002f6a:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_I2C_Init+0x1a0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d84b      	bhi.n	8003008 <HAL_I2C_Init+0x128>
 8002f70:	3801      	subs	r0, #1
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf38      	it	cc
 8002f82:	2304      	movcc	r3, #4
 8002f84:	430b      	orrs	r3, r1
 8002f86:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f88:	6821      	ldr	r1, [r4, #0]
 8002f8a:	680b      	ldr	r3, [r1, #0]
 8002f8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f90:	69e2      	ldr	r2, [r4, #28]
 8002f92:	6a20      	ldr	r0, [r4, #32]
 8002f94:	4302      	orrs	r2, r0
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f9a:	6821      	ldr	r1, [r4, #0]
 8002f9c:	688b      	ldr	r3, [r1, #8]
 8002f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fa6:	6922      	ldr	r2, [r4, #16]
 8002fa8:	68e0      	ldr	r0, [r4, #12]
 8002faa:	4302      	orrs	r2, r0
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	6821      	ldr	r1, [r4, #0]
 8002fb2:	68cb      	ldr	r3, [r1, #12]
 8002fb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fb8:	6962      	ldr	r2, [r4, #20]
 8002fba:	69a0      	ldr	r0, [r4, #24]
 8002fbc:	4302      	orrs	r2, r0
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	2000      	movs	r0, #0
 8002fce:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002fe2:	f002 fc8f 	bl	8005904 <HAL_I2C_MspInit>
 8002fe6:	e784      	b.n	8002ef2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_I2C_Init+0x1ac>)
 8002fea:	4298      	cmp	r0, r3
 8002fec:	bf8c      	ite	hi
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	e79b      	b.n	8002f2c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4924      	ldr	r1, [pc, #144]	; (8003090 <HAL_I2C_Init+0x1b0>)
 8002ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	3301      	adds	r3, #1
 8003006:	e7a7      	b.n	8002f58 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003008:	68a2      	ldr	r2, [r4, #8]
 800300a:	b9ba      	cbnz	r2, 800303c <HAL_I2C_Init+0x15c>
 800300c:	1e46      	subs	r6, r0, #1
 800300e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003012:	fbb6 f6f7 	udiv	r6, r6, r7
 8003016:	3601      	adds	r6, #1
 8003018:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800301c:	fab6 f686 	clz	r6, r6
 8003020:	0976      	lsrs	r6, r6, #5
 8003022:	bb36      	cbnz	r6, 8003072 <HAL_I2C_Init+0x192>
 8003024:	b9c2      	cbnz	r2, 8003058 <HAL_I2C_Init+0x178>
 8003026:	3801      	subs	r0, #1
 8003028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800302c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003036:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800303a:	e7a3      	b.n	8002f84 <HAL_I2C_Init+0xa4>
 800303c:	1e46      	subs	r6, r0, #1
 800303e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003042:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003046:	fbb6 f6f7 	udiv	r6, r6, r7
 800304a:	3601      	adds	r6, #1
 800304c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003050:	fab6 f686 	clz	r6, r6
 8003054:	0976      	lsrs	r6, r6, #5
 8003056:	e7e4      	b.n	8003022 <HAL_I2C_Init+0x142>
 8003058:	3801      	subs	r0, #1
 800305a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800305e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003062:	fbb0 f2f3 	udiv	r2, r0, r3
 8003066:	3201      	adds	r2, #1
 8003068:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800306c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003070:	e788      	b.n	8002f84 <HAL_I2C_Init+0xa4>
 8003072:	2301      	movs	r3, #1
 8003074:	e786      	b.n	8002f84 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
}
 8003078:	4770      	bx	lr
    return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	e7ae      	b.n	8002fdc <HAL_I2C_Init+0xfc>
 800307e:	bf00      	nop
 8003080:	000186a0 	.word	0x000186a0
 8003084:	001e847f 	.word	0x001e847f
 8003088:	431bde83 	.word	0x431bde83
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	10624dd3 	.word	0x10624dd3

08003094 <HAL_I2C_Mem_Write>:
{
 8003094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	4604      	mov	r4, r0
 800309c:	460e      	mov	r6, r1
 800309e:	4617      	mov	r7, r2
 80030a0:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80030a2:	f7fe fd9b 	bl	8001bdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d004      	beq.n	80030ba <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	b002      	add	sp, #8
 80030b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030bc:	9000      	str	r0, [sp, #0]
 80030be:	2319      	movs	r3, #25
 80030c0:	2201      	movs	r2, #1
 80030c2:	494c      	ldr	r1, [pc, #304]	; (80031f4 <HAL_I2C_Mem_Write+0x160>)
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff fdbf 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	f040 808b 	bne.w	80031e6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80030d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f000 8088 	beq.w	80031ea <HAL_I2C_Mem_Write+0x156>
 80030da:	2301      	movs	r3, #1
 80030dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f012 0f01 	tst.w	r2, #1
 80030e8:	d103      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030fa:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030fc:	2321      	movs	r3, #33	; 0x21
 80030fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003102:	2340      	movs	r3, #64	; 0x40
 8003104:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	2300      	movs	r3, #0
 800310a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800310c:	9b08      	ldr	r3, [sp, #32]
 800310e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003110:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8003114:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003116:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003118:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_I2C_Mem_Write+0x164>)
 800311c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800311e:	9501      	str	r5, [sp, #4]
 8003120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4643      	mov	r3, r8
 8003126:	463a      	mov	r2, r7
 8003128:	4631      	mov	r1, r6
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff fe40 	bl	8002db0 <I2C_RequestMemoryWrite>
 8003130:	2800      	cmp	r0, #0
 8003132:	d15c      	bne.n	80031ee <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8003134:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d034      	beq.n	80031a4 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	462a      	mov	r2, r5
 800313c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff fe0c 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003144:	bb10      	cbnz	r0, 800318c <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	7812      	ldrb	r2, [r2, #0]
 800314c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800314e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003150:	1c4b      	adds	r3, r1, #1
 8003152:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003154:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800315c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800315e:	3a01      	subs	r2, #1
 8003160:	b292      	uxth	r2, r2
 8003162:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	6950      	ldr	r0, [r2, #20]
 8003168:	f010 0f04 	tst.w	r0, #4
 800316c:	d0e2      	beq.n	8003134 <HAL_I2C_Mem_Write+0xa0>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0e0      	beq.n	8003134 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003172:	784b      	ldrb	r3, [r1, #1]
 8003174:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003178:	3301      	adds	r3, #1
 800317a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800317c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003182:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003184:	3b01      	subs	r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	8563      	strh	r3, [r4, #42]	; 0x2a
 800318a:	e7d3      	b.n	8003134 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800318e:	2b04      	cmp	r3, #4
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e78d      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e786      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a4:	462a      	mov	r2, r5
 80031a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff fe6f 	bl	8002e8c <I2C_WaitOnBTFFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	b158      	cbz	r0, 80031ca <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e77a      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e773      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	6821      	ldr	r1, [r4, #0]
 80031cc:	680a      	ldr	r2, [r1, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	2220      	movs	r2, #32
 80031d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	2200      	movs	r2, #0
 80031dc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80031e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80031e4:	e765      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	e763      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80031ea:	2302      	movs	r3, #2
 80031ec:	e761      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e75f      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1e>
 80031f2:	bf00      	nop
 80031f4:	00100002 	.word	0x00100002
 80031f8:	ffff0000 	.word	0xffff0000

080031fc <HAL_I2C_Mem_Write_DMA>:
{
 80031fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	4604      	mov	r4, r0
 8003204:	460d      	mov	r5, r1
 8003206:	4616      	mov	r6, r2
 8003208:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	9303      	str	r3, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7fe fce5 	bl	8001bdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003212:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	f040 80b3 	bne.w	8003384 <HAL_I2C_Mem_Write_DMA+0x188>
 800321e:	4680      	mov	r8, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003220:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_I2C_Mem_Write_DMA+0x198>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	08db      	lsrs	r3, r3, #3
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_I2C_Mem_Write_DMA+0x19c>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003236:	9303      	str	r3, [sp, #12]
      count--;
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	3b01      	subs	r3, #1
 800323c:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 800323e:	9b03      	ldr	r3, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03a      	beq.n	80032ba <HAL_I2C_Mem_Write_DMA+0xbe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	f012 0f02 	tst.w	r2, #2
 800324c:	d1f4      	bne.n	8003238 <HAL_I2C_Mem_Write_DMA+0x3c>
    __HAL_LOCK(hi2c);
 800324e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8003252:	2a01      	cmp	r2, #1
 8003254:	f000 809b 	beq.w	800338e <HAL_I2C_Mem_Write_DMA+0x192>
 8003258:	2201      	movs	r2, #1
 800325a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	f012 0f01 	tst.w	r2, #1
 8003264:	d103      	bne.n	800326e <HAL_I2C_Mem_Write_DMA+0x72>
      __HAL_I2C_ENABLE(hi2c);
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003276:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003278:	2321      	movs	r3, #33	; 0x21
 800327a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800328a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800328c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003290:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_I2C_Mem_Write_DMA+0x1a0>)
 800329a:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 800329c:	b9db      	cbnz	r3, 80032d6 <HAL_I2C_Mem_Write_DMA+0xda>
      hi2c->State     = HAL_I2C_STATE_READY;
 800329e:	2320      	movs	r3, #32
 80032a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032a4:	2200      	movs	r2, #0
 80032a6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80032aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80032b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e065      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	2220      	movs	r2, #32
 80032be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e057      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80032d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_I2C_Mem_Write_DMA+0x1a4>)
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80032dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032de:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_I2C_Mem_Write_DMA+0x1a8>)
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80032e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80032e4:	2300      	movs	r3, #0
 80032e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80032e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80032ea:	6353      	str	r3, [r2, #52]	; 0x34
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032f0:	3210      	adds	r2, #16
 80032f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032f6:	f7ff f89f 	bl	8002438 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80032fa:	b168      	cbz	r0, 8003318 <HAL_I2C_Mem_Write_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80032fc:	2320      	movs	r3, #32
 80032fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003302:	2200      	movs	r2, #0
 8003304:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003310:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e036      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003318:	f8cd 8004 	str.w	r8, [sp, #4]
 800331c:	2323      	movs	r3, #35	; 0x23
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	463b      	mov	r3, r7
 8003322:	4632      	mov	r2, r6
 8003324:	4629      	mov	r1, r5
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff fd42 	bl	8002db0 <I2C_RequestMemoryWrite>
 800332c:	4603      	mov	r3, r0
 800332e:	b998      	cbnz	r0, 8003358 <HAL_I2C_Mem_Write_DMA+0x15c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003330:	2100      	movs	r1, #0
 8003332:	9102      	str	r1, [sp, #8]
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6950      	ldr	r0, [r2, #20]
 8003338:	9002      	str	r0, [sp, #8]
 800333a:	6990      	ldr	r0, [r2, #24]
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9802      	ldr	r0, [sp, #8]
        __HAL_UNLOCK(hi2c);
 8003340:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003344:	6851      	ldr	r1, [r2, #4]
 8003346:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800334a:	6051      	str	r1, [r2, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800334c:	6821      	ldr	r1, [r4, #0]
 800334e:	684a      	ldr	r2, [r1, #4]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003354:	604a      	str	r2, [r1, #4]
        return HAL_OK;
 8003356:	e016      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003358:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800335a:	f7ff f8a7 	bl	80024ac <HAL_DMA_Abort_IT>
          if (hi2c->hdmatx != NULL)
 800335e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003360:	b10b      	cbz	r3, 8003366 <HAL_I2C_Mem_Write_DMA+0x16a>
            hi2c->hdmatx->XferCpltCallback = NULL;
 8003362:	2200      	movs	r2, #0
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	6813      	ldr	r3, [r2, #0]
 800336a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800336e:	6013      	str	r3, [r2, #0]
          hi2c->XferSize = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003374:	8563      	strh	r3, [r4, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
}
 8003386:	4618      	mov	r0, r3
 8003388:	b004      	add	sp, #16
 800338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 800338e:	2302      	movs	r3, #2
 8003390:	e7f9      	b.n	8003386 <HAL_I2C_Mem_Write_DMA+0x18a>
 8003392:	bf00      	nop
 8003394:	20000074 	.word	0x20000074
 8003398:	14f8b589 	.word	0x14f8b589
 800339c:	ffff0000 	.word	0xffff0000
 80033a0:	08003991 	.word	0x08003991
 80033a4:	08003957 	.word	0x08003957

080033a8 <HAL_I2C_IsDeviceReady>:
{
 80033a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ac:	b085      	sub	sp, #20
 80033ae:	4604      	mov	r4, r0
 80033b0:	4688      	mov	r8, r1
 80033b2:	4691      	mov	r9, r2
 80033b4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80033b6:	f7fe fc11 	bl	8001bdc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d004      	beq.n	80033ce <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	b005      	add	sp, #20
 80033ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ce:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d0:	9000      	str	r0, [sp, #0]
 80033d2:	2319      	movs	r3, #25
 80033d4:	2201      	movs	r2, #1
 80033d6:	4959      	ldr	r1, [pc, #356]	; (800353c <HAL_I2C_IsDeviceReady+0x194>)
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff fc35 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 80033de:	2800      	cmp	r0, #0
 80033e0:	f040 80a1 	bne.w	8003526 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 80033e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f000 809e 	beq.w	800352a <HAL_I2C_IsDeviceReady+0x182>
 80033ee:	2301      	movs	r3, #1
 80033f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	f012 0f01 	tst.w	r2, #1
 80033fc:	d103      	bne.n	8003406 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800340e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	2324      	movs	r3, #36	; 0x24
 8003412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	2300      	movs	r3, #0
 8003418:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800341a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800341e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003420:	2701      	movs	r7, #1
 8003422:	e03e      	b.n	80034a2 <HAL_I2C_IsDeviceReady+0xfa>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f413 7f80 	tst.w	r3, #256	; 0x100
 800342c:	d07f      	beq.n	800352e <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003432:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e7c6      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003446:	6959      	ldr	r1, [r3, #20]
 8003448:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800344c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2ba0      	cmp	r3, #160	; 0xa0
 8003454:	d009      	beq.n	800346a <HAL_I2C_IsDeviceReady+0xc2>
 8003456:	b942      	cbnz	r2, 800346a <HAL_I2C_IsDeviceReady+0xc2>
 8003458:	b939      	cbnz	r1, 800346a <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7fe fbbf 	bl	8001bdc <HAL_GetTick>
 800345e:	1b80      	subs	r0, r0, r6
 8003460:	42a8      	cmp	r0, r5
 8003462:	d8e9      	bhi.n	8003438 <HAL_I2C_IsDeviceReady+0x90>
 8003464:	2d00      	cmp	r5, #0
 8003466:	d1ea      	bne.n	800343e <HAL_I2C_IsDeviceReady+0x96>
 8003468:	e7e6      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 800346a:	2320      	movs	r3, #32
 800346c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	f012 0f02 	tst.w	r2, #2
 8003478:	d131      	bne.n	80034de <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003488:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348a:	9600      	str	r6, [sp, #0]
 800348c:	2319      	movs	r3, #25
 800348e:	2201      	movs	r2, #1
 8003490:	492a      	ldr	r1, [pc, #168]	; (800353c <HAL_I2C_IsDeviceReady+0x194>)
 8003492:	4620      	mov	r0, r4
 8003494:	f7ff fbd8 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8003498:	2800      	cmp	r0, #0
 800349a:	d14c      	bne.n	8003536 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 800349c:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800349e:	454f      	cmp	r7, r9
 80034a0:	d239      	bcs.n	8003516 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034ac:	9600      	str	r6, [sp, #0]
 80034ae:	462b      	mov	r3, r5
 80034b0:	2200      	movs	r2, #0
 80034b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff fbc6 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1b1      	bne.n	8003424 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80034c6:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80034c8:	f7fe fb88 	bl	8001bdc <HAL_GetTick>
 80034cc:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d6:	6959      	ldr	r1, [r3, #20]
 80034d8:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034dc:	e7b6      	b.n	800344c <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	9303      	str	r3, [sp, #12]
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	9303      	str	r3, [sp, #12]
 80034f4:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f6:	9600      	str	r6, [sp, #0]
 80034f8:	2319      	movs	r3, #25
 80034fa:	2201      	movs	r2, #1
 80034fc:	490f      	ldr	r1, [pc, #60]	; (800353c <HAL_I2C_IsDeviceReady+0x194>)
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fba2 	bl	8002c48 <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	b9a0      	cbnz	r0, 8003532 <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8003508:	2220      	movs	r2, #32
 800350a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800350e:	2200      	movs	r2, #0
 8003510:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8003514:	e757      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003516:	2320      	movs	r3, #32
 8003518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800351c:	2300      	movs	r3, #0
 800351e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e74f      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	e74d      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800352a:	2302      	movs	r3, #2
 800352c:	e74b      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e749      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e747      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e745      	b.n	80033c6 <HAL_I2C_IsDeviceReady+0x1e>
 800353a:	bf00      	nop
 800353c:	00100002 	.word	0x00100002

08003540 <HAL_I2C_MasterTxCpltCallback>:
}
 8003540:	4770      	bx	lr

08003542 <I2C_MasterTransmit_BTF>:
{
 8003542:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003544:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003546:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b21      	cmp	r3, #33	; 0x21
 800354e:	d000      	beq.n	8003552 <I2C_MasterTransmit_BTF+0x10>
}
 8003550:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003552:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	b9d3      	cbnz	r3, 800358e <I2C_MasterTransmit_BTF+0x4c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003558:	2a08      	cmp	r2, #8
 800355a:	d004      	beq.n	8003566 <I2C_MasterTransmit_BTF+0x24>
 800355c:	2a20      	cmp	r2, #32
 800355e:	d002      	beq.n	8003566 <I2C_MasterTransmit_BTF+0x24>
 8003560:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003564:	d11f      	bne.n	80035a6 <I2C_MasterTransmit_BTF+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003566:	6802      	ldr	r2, [r0, #0]
 8003568:	6853      	ldr	r3, [r2, #4]
 800356a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800356e:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	6802      	ldr	r2, [r0, #0]
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003578:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	2300      	movs	r3, #0
 800357c:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800357e:	2220      	movs	r2, #32
 8003580:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003588:	f7ff ffda 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
}
 800358c:	e7e0      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003596:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003598:	3301      	adds	r3, #1
 800359a:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800359c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	8543      	strh	r3, [r0, #42]	; 0x2a
 80035a4:	e7d4      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035a6:	6802      	ldr	r2, [r0, #0]
 80035a8:	6853      	ldr	r3, [r2, #4]
 80035aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035ae:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035b0:	2311      	movs	r3, #17
 80035b2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	2320      	movs	r3, #32
 80035bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035c0:	f7ff ffbe 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
 80035c4:	e7c4      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe>

080035c6 <HAL_I2C_MasterRxCpltCallback>:
}
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2C_SlaveTxCpltCallback>:
}
 80035c8:	4770      	bx	lr

080035ca <I2C_SlaveTransmit_TXE>:
{
 80035ca:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035d0:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80035d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b17b      	cbz	r3, 80035f8 <I2C_SlaveTransmit_TXE+0x2e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80035da:	6803      	ldr	r3, [r0, #0]
 80035dc:	7809      	ldrb	r1, [r1, #0]
 80035de:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80035e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80035e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b90b      	cbnz	r3, 80035f8 <I2C_SlaveTransmit_TXE+0x2e>
 80035f4:	2a29      	cmp	r2, #41	; 0x29
 80035f6:	d000      	beq.n	80035fa <I2C_SlaveTransmit_TXE+0x30>
}
 80035f8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035fa:	6802      	ldr	r2, [r0, #0]
 80035fc:	6853      	ldr	r3, [r2, #4]
 80035fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003602:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003604:	2321      	movs	r3, #33	; 0x21
 8003606:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003608:	2328      	movs	r3, #40	; 0x28
 800360a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800360e:	f7ff ffdb 	bl	80035c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003612:	e7f1      	b.n	80035f8 <I2C_SlaveTransmit_TXE+0x2e>

08003614 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003614:	4770      	bx	lr

08003616 <I2C_SlaveReceive_RXNE>:
{
 8003616:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003618:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800361c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800361e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	b17b      	cbz	r3, 8003644 <I2C_SlaveReceive_RXNE+0x2e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	6919      	ldr	r1, [r3, #16]
 8003628:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800362a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800362c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800362e:	3301      	adds	r3, #1
 8003630:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003632:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800363a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	b90b      	cbnz	r3, 8003644 <I2C_SlaveReceive_RXNE+0x2e>
 8003640:	2a2a      	cmp	r2, #42	; 0x2a
 8003642:	d000      	beq.n	8003646 <I2C_SlaveReceive_RXNE+0x30>
}
 8003644:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	6853      	ldr	r3, [r2, #4]
 800364a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003650:	2322      	movs	r3, #34	; 0x22
 8003652:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003654:	2328      	movs	r3, #40	; 0x28
 8003656:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800365a:	f7ff ffdb 	bl	8003614 <HAL_I2C_SlaveRxCpltCallback>
}
 800365e:	e7f1      	b.n	8003644 <I2C_SlaveReceive_RXNE+0x2e>

08003660 <HAL_I2C_AddrCallback>:
}
 8003660:	4770      	bx	lr

08003662 <I2C_Slave_ADDR>:
{
 8003662:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003664:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003668:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800366c:	2b28      	cmp	r3, #40	; 0x28
 800366e:	d007      	beq.n	8003680 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	f06f 0202 	mvn.w	r2, #2
 8003676:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003678:	2300      	movs	r3, #0
 800367a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800367e:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003680:	6802      	ldr	r2, [r0, #0]
 8003682:	6853      	ldr	r3, [r2, #4]
 8003684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003688:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800368a:	f011 0f04 	tst.w	r1, #4
 800368e:	d00b      	beq.n	80036a8 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003690:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003692:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003696:	d109      	bne.n	80036ac <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003698:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800369a:	2100      	movs	r1, #0
 800369c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7ff ffdd 	bl	8003660 <HAL_I2C_AddrCallback>
 80036a6:	e7ea      	b.n	800367e <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e7f2      	b.n	8003692 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036ac:	8b02      	ldrh	r2, [r0, #24]
 80036ae:	e7f4      	b.n	800369a <I2C_Slave_ADDR+0x38>

080036b0 <HAL_I2C_ListenCpltCallback>:
}
 80036b0:	4770      	bx	lr

080036b2 <I2C_MemoryTransmit_TXE_BTF>:
{
 80036b2:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80036b8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80036ba:	b99a      	cbnz	r2, 80036e4 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d008      	beq.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80036c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80036cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036ce:	3301      	adds	r3, #1
 80036d0:	6503      	str	r3, [r0, #80]	; 0x50
}
 80036d2:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036d4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80036d6:	6802      	ldr	r2, [r0, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80036dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036de:	3302      	adds	r3, #2
 80036e0:	6503      	str	r3, [r0, #80]	; 0x50
 80036e2:	e7f6      	b.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80036e4:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 80036e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80036e8:	2a01      	cmp	r2, #1
 80036ea:	d023      	beq.n	8003734 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 80036ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80036ee:	2a02      	cmp	r2, #2
 80036f0:	d1ef      	bne.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036f2:	2b22      	cmp	r3, #34	; 0x22
 80036f4:	d026      	beq.n	8003744 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80036f8:	b292      	uxth	r2, r2
 80036fa:	b10a      	cbz	r2, 8003700 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d027      	beq.n	8003750 <I2C_MemoryTransmit_TXE_BTF+0x9e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003700:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003702:	b292      	uxth	r2, r2
 8003704:	2a00      	cmp	r2, #0
 8003706:	d1e4      	bne.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003708:	2b21      	cmp	r3, #33	; 0x21
 800370a:	d1e2      	bne.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800370c:	6802      	ldr	r2, [r0, #0]
 800370e:	6853      	ldr	r3, [r2, #4]
 8003710:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003714:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	6802      	ldr	r2, [r0, #0]
 8003718:	6813      	ldr	r3, [r2, #0]
 800371a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003724:	2220      	movs	r2, #32
 8003726:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800372e:	f002 f9f3 	bl	8005b18 <HAL_I2C_MemTxCpltCallback>
}
 8003732:	e7ce      	b.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003734:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003736:	6802      	ldr	r2, [r0, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 800373c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800373e:	3301      	adds	r3, #1
 8003740:	6503      	str	r3, [r0, #80]	; 0x50
 8003742:	e7c6      	b.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003744:	6802      	ldr	r2, [r0, #0]
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e7c0      	b.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003750:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003758:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800375a:	3301      	adds	r3, #1
 800375c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800375e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003760:	3b01      	subs	r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003766:	e7b4      	b.n	80036d2 <I2C_MemoryTransmit_TXE_BTF+0x20>

08003768 <I2C_MasterTransmit_TXE>:
{
 8003768:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800376a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800376e:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003770:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003774:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003776:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003778:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800377a:	b909      	cbnz	r1, 8003780 <I2C_MasterTransmit_TXE+0x18>
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	d004      	beq.n	800378a <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003780:	2b21      	cmp	r3, #33	; 0x21
 8003782:	d03b      	beq.n	80037fc <I2C_MasterTransmit_TXE+0x94>
 8003784:	2a40      	cmp	r2, #64	; 0x40
 8003786:	d037      	beq.n	80037f8 <I2C_MasterTransmit_TXE+0x90>
}
 8003788:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800378a:	2c08      	cmp	r4, #8
 800378c:	d004      	beq.n	8003798 <I2C_MasterTransmit_TXE+0x30>
 800378e:	2c20      	cmp	r4, #32
 8003790:	d002      	beq.n	8003798 <I2C_MasterTransmit_TXE+0x30>
 8003792:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8003796:	d119      	bne.n	80037cc <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003798:	6802      	ldr	r2, [r0, #0]
 800379a:	6853      	ldr	r3, [r2, #4]
 800379c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037a0:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a2:	6802      	ldr	r2, [r0, #0]
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	2320      	movs	r3, #32
 80037b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d015      	beq.n	80037ec <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c6:	f7ff febb 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
 80037ca:	e7dd      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037cc:	6802      	ldr	r2, [r0, #0]
 80037ce:	6853      	ldr	r3, [r2, #4]
 80037d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037d6:	2311      	movs	r3, #17
 80037d8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	2300      	movs	r3, #0
 80037dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	2320      	movs	r3, #32
 80037e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037e6:	f7ff feab 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
 80037ea:	e7cd      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037f2:	f002 f991 	bl	8005b18 <HAL_I2C_MemTxCpltCallback>
 80037f6:	e7c7      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037f8:	2b22      	cmp	r3, #34	; 0x22
 80037fa:	d1c5      	bne.n	8003788 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 80037fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b183      	cbz	r3, 8003824 <I2C_MasterTransmit_TXE+0xbc>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003802:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d011      	beq.n	8003830 <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800380e:	6803      	ldr	r3, [r0, #0]
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 800381a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800381c:	3b01      	subs	r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003822:	e7b1      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003824:	6802      	ldr	r2, [r0, #0]
 8003826:	6853      	ldr	r3, [r2, #4]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	e7ab      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003830:	f7ff ff3f 	bl	80036b2 <I2C_MemoryTransmit_TXE_BTF>
 8003834:	e7a8      	b.n	8003788 <I2C_MasterTransmit_TXE+0x20>

08003836 <HAL_I2C_MemRxCpltCallback>:
}
 8003836:	4770      	bx	lr

08003838 <I2C_MasterReceive_BTF>:
{
 8003838:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800383a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800383c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b04      	cmp	r3, #4
 8003842:	d013      	beq.n	800386c <I2C_MasterReceive_BTF+0x34>
  else if (hi2c->XferCount == 3U)
 8003844:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b03      	cmp	r3, #3
 800384a:	d020      	beq.n	800388e <I2C_MasterReceive_BTF+0x56>
  else if (hi2c->XferCount == 2U)
 800384c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d036      	beq.n	80038c2 <I2C_MasterReceive_BTF+0x8a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	6803      	ldr	r3, [r0, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800385a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800385c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003862:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003864:	3b01      	subs	r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800386a:	e00f      	b.n	800388c <I2C_MasterReceive_BTF+0x54>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	6802      	ldr	r2, [r0, #0]
 800386e:	6853      	ldr	r3, [r2, #4]
 8003870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003874:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	6803      	ldr	r3, [r0, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800387c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800387e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003880:	3301      	adds	r3, #1
 8003882:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003884:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003886:	3b01      	subs	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800388c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	6801      	ldr	r1, [r0, #0]
 8003890:	684b      	ldr	r3, [r1, #4]
 8003892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003896:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003898:	2a04      	cmp	r2, #4
 800389a:	d006      	beq.n	80038aa <I2C_MasterReceive_BTF+0x72>
 800389c:	2a02      	cmp	r2, #2
 800389e:	d004      	beq.n	80038aa <I2C_MasterReceive_BTF+0x72>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a0:	6802      	ldr	r2, [r0, #0]
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a8:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	6803      	ldr	r3, [r0, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b4:	3301      	adds	r3, #1
 80038b6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80038b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	8543      	strh	r3, [r0, #42]	; 0x2a
 80038c0:	e7e4      	b.n	800388c <I2C_MasterReceive_BTF+0x54>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038c2:	2a01      	cmp	r2, #1
 80038c4:	d00b      	beq.n	80038de <I2C_MasterReceive_BTF+0xa6>
 80038c6:	2a10      	cmp	r2, #16
 80038c8:	d009      	beq.n	80038de <I2C_MasterReceive_BTF+0xa6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038ca:	2a04      	cmp	r2, #4
 80038cc:	d036      	beq.n	800393c <I2C_MasterReceive_BTF+0x104>
 80038ce:	2a02      	cmp	r2, #2
 80038d0:	d034      	beq.n	800393c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	6802      	ldr	r2, [r0, #0]
 80038d4:	6813      	ldr	r3, [r2, #0]
 80038d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e004      	b.n	80038e8 <I2C_MasterReceive_BTF+0xb0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	6802      	ldr	r2, [r0, #0]
 80038e0:	6813      	ldr	r3, [r2, #0]
 80038e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e6:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	6803      	ldr	r3, [r0, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80038f2:	1c53      	adds	r3, r2, #1
 80038f4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80038f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8003904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003906:	3301      	adds	r3, #1
 8003908:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800390a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800390c:	3b01      	subs	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003912:	6802      	ldr	r2, [r0, #0]
 8003914:	6853      	ldr	r3, [r2, #4]
 8003916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391a:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	2320      	movs	r3, #32
 800391e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003922:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d00d      	beq.n	8003948 <I2C_MasterReceive_BTF+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	2300      	movs	r3, #0
 800392e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003932:	2312      	movs	r3, #18
 8003934:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003936:	f7ff fe46 	bl	80035c6 <HAL_I2C_MasterRxCpltCallback>
 800393a:	e7a7      	b.n	800388c <I2C_MasterReceive_BTF+0x54>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	6802      	ldr	r2, [r0, #0]
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e7cf      	b.n	80038e8 <I2C_MasterReceive_BTF+0xb0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003950:	f7ff ff71 	bl	8003836 <HAL_I2C_MemRxCpltCallback>
 8003954:	e79a      	b.n	800388c <I2C_MasterReceive_BTF+0x54>

08003956 <I2C_DMAError>:
{
 8003956:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003958:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hi2c->hdmatx != NULL)
 800395a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800395c:	b10b      	cbz	r3, 8003962 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003962:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003964:	b10b      	cbz	r3, 800396a <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003966:	2200      	movs	r2, #0
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	6802      	ldr	r2, [r0, #0]
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003972:	6013      	str	r3, [r2, #0]
  hi2c->XferCount       = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003978:	2220      	movs	r2, #32
 800397a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800397e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003982:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003984:	f043 0310 	orr.w	r3, r3, #16
 8003988:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 800398a:	f002 f8cb 	bl	8005b24 <HAL_I2C_ErrorCallback>
}
 800398e:	bd08      	pop	{r3, pc}

08003990 <I2C_DMAXferCplt>:
{
 8003990:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003992:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003994:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800399a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800399e:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	6842      	ldr	r2, [r0, #4]
 80039a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039aa:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 80039ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80039ae:	b10a      	cbz	r2, 80039b4 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039b0:	2000      	movs	r0, #0
 80039b2:	6290      	str	r0, [r2, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80039b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039b6:	b10a      	cbz	r2, 80039bc <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039b8:	2000      	movs	r0, #0
 80039ba:	6290      	str	r0, [r2, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80039bc:	f003 0221 	and.w	r2, r3, #33	; 0x21
 80039c0:	2a21      	cmp	r2, #33	; 0x21
 80039c2:	d041      	beq.n	8003a48 <I2C_DMAXferCplt+0xb8>
 80039c4:	f003 0222 	and.w	r2, r3, #34	; 0x22
 80039c8:	2a22      	cmp	r2, #34	; 0x22
 80039ca:	d03b      	beq.n	8003a44 <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80039cc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d049      	beq.n	8003a68 <I2C_DMAXferCplt+0xd8>
    if (hi2c->XferCount == (uint16_t)1)
 80039d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d058      	beq.n	8003a8e <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	6853      	ldr	r3, [r2, #4]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e4:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039e6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80039ea:	d006      	beq.n	80039fa <I2C_DMAXferCplt+0x6a>
 80039ec:	2d08      	cmp	r5, #8
 80039ee:	d004      	beq.n	80039fa <I2C_DMAXferCplt+0x6a>
 80039f0:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80039f4:	d001      	beq.n	80039fa <I2C_DMAXferCplt+0x6a>
 80039f6:	2d20      	cmp	r5, #32
 80039f8:	d104      	bne.n	8003a04 <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a02:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	6853      	ldr	r3, [r2, #4]
 8003a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a0c:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	6853      	ldr	r3, [r2, #4]
 8003a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a16:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d13b      	bne.n	8003a9a <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	2320      	movs	r3, #32
 8003a24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a28:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d037      	beq.n	8003aa2 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff fdc2 	bl	80035c6 <HAL_I2C_MasterRxCpltCallback>
}
 8003a42:	e011      	b.n	8003a68 <I2C_DMAXferCplt+0xd8>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a44:	2920      	cmp	r1, #32
 8003a46:	d1c1      	bne.n	80039cc <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	684a      	ldr	r2, [r1, #4]
 8003a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a50:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 8003a52:	2200      	movs	r2, #0
 8003a54:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a56:	2b29      	cmp	r3, #41	; 0x29
 8003a58:	d007      	beq.n	8003a6a <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5c:	d00e      	beq.n	8003a7c <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	6853      	ldr	r3, [r2, #4]
 8003a62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003a66:	6053      	str	r3, [r2, #4]
}
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a6a:	2321      	movs	r3, #33	; 0x21
 8003a6c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6e:	2328      	movs	r3, #40	; 0x28
 8003a70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff fda7 	bl	80035c8 <HAL_I2C_SlaveTxCpltCallback>
 8003a7a:	e7f0      	b.n	8003a5e <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a7c:	2322      	movs	r3, #34	; 0x22
 8003a7e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a80:	2328      	movs	r3, #40	; 0x28
 8003a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fdc4 	bl	8003614 <HAL_I2C_SlaveRxCpltCallback>
 8003a8c:	e7e7      	b.n	8003a5e <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e7a0      	b.n	80039dc <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f002 f842 	bl	8005b24 <HAL_I2C_ErrorCallback>
 8003aa0:	e7e2      	b.n	8003a68 <I2C_DMAXferCplt+0xd8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fec3 	bl	8003836 <HAL_I2C_MemRxCpltCallback>
 8003ab0:	e7da      	b.n	8003a68 <I2C_DMAXferCplt+0xd8>

08003ab2 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b22      	cmp	r3, #34	; 0x22
 8003aba:	d000      	beq.n	8003abe <I2C_MasterReceive_RXNE+0xc>
 8003abc:	4770      	bx	lr
    tmp = hi2c->XferCount;
 8003abe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d914      	bls.n	8003af0 <I2C_MasterReceive_RXNE+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	6803      	ldr	r3, [r0, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003acc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ace:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003ad4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003adc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d1eb      	bne.n	8003abc <I2C_MasterReceive_RXNE+0xa>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae4:	6802      	ldr	r2, [r0, #0]
 8003ae6:	6853      	ldr	r3, [r2, #4]
 8003ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aec:	6053      	str	r3, [r2, #4]
 8003aee:	4770      	bx	lr
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003af0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003af2:	2a02      	cmp	r2, #2
 8003af4:	d0e2      	beq.n	8003abc <I2C_MasterReceive_RXNE+0xa>
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d8e0      	bhi.n	8003abc <I2C_MasterReceive_RXNE+0xa>
{
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afe:	f7ff f857 	bl	8002bb0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b02:	bb68      	cbnz	r0, 8003b60 <I2C_MasterReceive_RXNE+0xae>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b0c:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	6853      	ldr	r3, [r2, #4]
 8003b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b16:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b22:	3301      	adds	r3, #1
 8003b24:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b34:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d008      	beq.n	8003b50 <I2C_MasterReceive_RXNE+0x9e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b44:	2312      	movs	r3, #18
 8003b46:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff fd3c 	bl	80035c6 <HAL_I2C_MasterRxCpltCallback>
}
 8003b4e:	bd10      	pop	{r4, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff fe6c 	bl	8003836 <HAL_I2C_MemRxCpltCallback>
 8003b5e:	e7f6      	b.n	8003b4e <I2C_MasterReceive_RXNE+0x9c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6853      	ldr	r3, [r2, #4]
 8003b64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b68:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b74:	3301      	adds	r3, #1
 8003b76:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003b78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	2320      	movs	r3, #32
 8003b82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f001 ffc9 	bl	8005b24 <HAL_I2C_ErrorCallback>
}
 8003b92:	e7dc      	b.n	8003b4e <I2C_MasterReceive_RXNE+0x9c>

08003b94 <HAL_I2C_AbortCpltCallback>:
}
 8003b94:	4770      	bx	lr
	...

08003b98 <I2C_DMAAbort>:
{
 8003b98:	b500      	push	{lr}
 8003b9a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ba0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003ba6:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <I2C_DMAAbort+0xdc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	4932      	ldr	r1, [pc, #200]	; (8003c78 <I2C_DMAAbort+0xe0>)
 8003bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003bbe:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	b143      	cbz	r3, 8003bd6 <I2C_DMAAbort+0x3e>
    count--;
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bca:	6803      	ldr	r3, [r0, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bd2:	d1f5      	bne.n	8003bc0 <I2C_DMAAbort+0x28>
 8003bd4:	e003      	b.n	8003bde <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003bd8:	f043 0320 	orr.w	r3, r3, #32
 8003bdc:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003be0:	b10b      	cbz	r3, 8003be6 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003be2:	2100      	movs	r1, #0
 8003be4:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003be6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003be8:	b10b      	cbz	r3, 8003bee <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bea:	2100      	movs	r1, #0
 8003bec:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	6801      	ldr	r1, [r0, #0]
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf6:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003bfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bfe:	b10b      	cbz	r3, 8003c04 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c00:	2100      	movs	r1, #0
 8003c02:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c06:	b10b      	cbz	r3, 8003c0c <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c08:	2100      	movs	r1, #0
 8003c0a:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003c0c:	6801      	ldr	r1, [r0, #0]
 8003c0e:	680b      	ldr	r3, [r1, #0]
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d00e      	beq.n	8003c3e <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c20:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003c24:	2a28      	cmp	r2, #40	; 0x28
 8003c26:	d014      	beq.n	8003c52 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c34:	f001 ff76 	bl	8005b24 <HAL_I2C_ErrorCallback>
}
 8003c38:	b003      	add	sp, #12
 8003c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c4a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c4c:	f7ff ffa2 	bl	8003b94 <HAL_I2C_AbortCpltCallback>
 8003c50:	e7f2      	b.n	8003c38 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8003c52:	6802      	ldr	r2, [r0, #0]
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5c:	6802      	ldr	r2, [r0, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c64:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c6a:	2328      	movs	r3, #40	; 0x28
 8003c6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003c70:	e7e0      	b.n	8003c34 <I2C_DMAAbort+0x9c>
 8003c72:	bf00      	nop
 8003c74:	20000074 	.word	0x20000074
 8003c78:	14f8b589 	.word	0x14f8b589

08003c7c <I2C_ITError>:
{
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c86:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003c8a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c8c:	2a10      	cmp	r2, #16
 8003c8e:	d035      	beq.n	8003cfc <I2C_ITError+0x80>
 8003c90:	2a40      	cmp	r2, #64	; 0x40
 8003c92:	d033      	beq.n	8003cfc <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c94:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8003c98:	2a28      	cmp	r2, #40	; 0x28
 8003c9a:	d037      	beq.n	8003d0c <I2C_ITError+0x90>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	6852      	ldr	r2, [r2, #4]
 8003ca0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003ca4:	d107      	bne.n	8003cb6 <I2C_ITError+0x3a>
 8003ca6:	2b60      	cmp	r3, #96	; 0x60
 8003ca8:	d005      	beq.n	8003cb6 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	2320      	movs	r3, #32
 8003cac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003cc2:	d047      	beq.n	8003d54 <I2C_ITError+0xd8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	d020      	beq.n	8003d18 <I2C_ITError+0x9c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cd6:	4a44      	ldr	r2, [pc, #272]	; (8003de8 <I2C_ITError+0x16c>)
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cdc:	f7fe fbe6 	bl	80024ac <HAL_DMA_Abort_IT>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d049      	beq.n	8003d78 <I2C_ITError+0xfc>
        __HAL_I2C_DISABLE(hi2c);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cf4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cf8:	4798      	blx	r3
 8003cfa:	e03d      	b.n	8003d78 <I2C_ITError+0xfc>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cfc:	2b22      	cmp	r3, #34	; 0x22
 8003cfe:	d1c9      	bne.n	8003c94 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	680a      	ldr	r2, [r1, #0]
 8003d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d08:	600a      	str	r2, [r1, #0]
 8003d0a:	e7c3      	b.n	8003c94 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d10:	2328      	movs	r3, #40	; 0x28
 8003d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003d16:	e7d0      	b.n	8003cba <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <I2C_ITError+0x16c>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d20:	f7fe fbc4 	bl	80024ac <HAL_DMA_Abort_IT>
 8003d24:	b340      	cbz	r0, 8003d78 <I2C_ITError+0xfc>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d2e:	d005      	beq.n	8003d3c <I2C_ITError+0xc0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d34:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d38:	3301      	adds	r3, #1
 8003d3a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	2320      	movs	r3, #32
 8003d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d50:	4798      	blx	r3
 8003d52:	e011      	b.n	8003d78 <I2C_ITError+0xfc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	2a60      	cmp	r2, #96	; 0x60
 8003d5c:	d01f      	beq.n	8003d9e <I2C_ITError+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d64:	d005      	beq.n	8003d72 <I2C_ITError+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6e:	3301      	adds	r3, #1
 8003d70:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003d72:	4620      	mov	r0, r4
 8003d74:	f001 fed6 	bl	8005b24 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d7a:	f013 0f0f 	tst.w	r3, #15
 8003d7e:	d004      	beq.n	8003d8a <I2C_ITError+0x10e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	6853      	ldr	r3, [r2, #4]
 8003d84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d88:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003d8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d92:	f012 0f04 	tst.w	r2, #4
 8003d96:	d001      	beq.n	8003d9c <I2C_ITError+0x120>
 8003d98:	2b28      	cmp	r3, #40	; 0x28
 8003d9a:	d018      	beq.n	8003dce <I2C_ITError+0x152>
}
 8003d9c:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	2200      	movs	r2, #0
 8003da6:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003dae:	d005      	beq.n	8003dbc <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003db4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003db8:	3301      	adds	r3, #1
 8003dba:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff fee4 	bl	8003b94 <HAL_I2C_AbortCpltCallback>
 8003dcc:	e7d4      	b.n	8003d78 <I2C_ITError+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <I2C_ITError+0x170>)
 8003dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ddc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff fc65 	bl	80036b0 <HAL_I2C_ListenCpltCallback>
}
 8003de6:	e7d9      	b.n	8003d9c <I2C_ITError+0x120>
 8003de8:	08003b99 	.word	0x08003b99
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <I2C_Slave_STOPF>:
{
 8003df0:	b530      	push	{r4, r5, lr}
 8003df2:	b083      	sub	sp, #12
 8003df4:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df6:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8003dfa:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dfc:	6802      	ldr	r2, [r0, #0]
 8003dfe:	6853      	ldr	r3, [r2, #4]
 8003e00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e04:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e06:	2300      	movs	r3, #0
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	6803      	ldr	r3, [r0, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	9201      	str	r2, [sp, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	6802      	ldr	r2, [r0, #0]
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e22:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e24:	6803      	ldr	r3, [r0, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003e2c:	d038      	beq.n	8003ea0 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e2e:	2d22      	cmp	r5, #34	; 0x22
 8003e30:	d021      	beq.n	8003e76 <I2C_Slave_STOPF+0x86>
 8003e32:	2d2a      	cmp	r5, #42	; 0x2a
 8003e34:	d01f      	beq.n	8003e76 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e36:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003e40:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003e42:	b292      	uxth	r2, r2
 8003e44:	b11a      	cbz	r2, 8003e4e <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e46:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e48:	f042 0204 	orr.w	r2, r2, #4
 8003e4c:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e54:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e56:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e58:	f7fe fc16 	bl	8002688 <HAL_DMA_GetState>
 8003e5c:	2801      	cmp	r0, #1
 8003e5e:	d01f      	beq.n	8003ea0 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e62:	4a43      	ldr	r2, [pc, #268]	; (8003f70 <I2C_Slave_STOPF+0x180>)
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e66:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e68:	f7fe fb20 	bl	80024ac <HAL_DMA_Abort_IT>
 8003e6c:	b1c0      	cbz	r0, 8003ea0 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e72:	4798      	blx	r3
 8003e74:	e014      	b.n	8003ea0 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003e80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e82:	b292      	uxth	r2, r2
 8003e84:	b11a      	cbz	r2, 8003e8e <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e94:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e96:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e98:	f7fe fbf6 	bl	8002688 <HAL_DMA_GetState>
 8003e9c:	2801      	cmp	r0, #1
 8003e9e:	d140      	bne.n	8003f22 <I2C_Slave_STOPF+0x132>
  if (hi2c->XferCount != 0U)
 8003ea0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	b323      	cbz	r3, 8003ef0 <I2C_Slave_STOPF+0x100>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	f012 0f04 	tst.w	r2, #4
 8003eae:	d009      	beq.n	8003ec4 <I2C_Slave_STOPF+0xd4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ecc:	d009      	beq.n	8003ee2 <I2C_Slave_STOPF+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ed2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003ee2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b11b      	cbz	r3, 8003ef0 <I2C_Slave_STOPF+0x100>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ef0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ef2:	bb13      	cbnz	r3, 8003f3a <I2C_Slave_STOPF+0x14a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ef4:	2d2a      	cmp	r5, #42	; 0x2a
 8003ef6:	d025      	beq.n	8003f44 <I2C_Slave_STOPF+0x154>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ef8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b28      	cmp	r3, #40	; 0x28
 8003f00:	d029      	beq.n	8003f56 <I2C_Slave_STOPF+0x166>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f04:	2b22      	cmp	r3, #34	; 0x22
 8003f06:	d001      	beq.n	8003f0c <I2C_Slave_STOPF+0x11c>
 8003f08:	2d22      	cmp	r5, #34	; 0x22
 8003f0a:	d119      	bne.n	8003f40 <I2C_Slave_STOPF+0x150>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	2220      	movs	r2, #32
 8003f12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fb7a 	bl	8003614 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f20:	e00e      	b.n	8003f40 <I2C_Slave_STOPF+0x150>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <I2C_Slave_STOPF+0x180>)
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f2a:	f7fe fabf 	bl	80024ac <HAL_DMA_Abort_IT>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d0b6      	beq.n	8003ea0 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f36:	4798      	blx	r3
 8003f38:	e7b2      	b.n	8003ea0 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fe9e 	bl	8003c7c <I2C_ITError>
}
 8003f40:	b003      	add	sp, #12
 8003f42:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f48:	2328      	movs	r3, #40	; 0x28
 8003f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7ff fb60 	bl	8003614 <HAL_I2C_SlaveRxCpltCallback>
 8003f54:	e7d0      	b.n	8003ef8 <I2C_Slave_STOPF+0x108>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <I2C_Slave_STOPF+0x184>)
 8003f58:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff fba1 	bl	80036b0 <HAL_I2C_ListenCpltCallback>
 8003f6e:	e7e7      	b.n	8003f40 <I2C_Slave_STOPF+0x150>
 8003f70:	08003b99 	.word	0x08003b99
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <HAL_I2C_EV_IRQHandler>:
{
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f7c:	6802      	ldr	r2, [r0, #0]
 8003f7e:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f80:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003f86:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f88:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d014      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x42>
 8003f90:	b2c8      	uxtb	r0, r1
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d011      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d077      	beq.n	800408c <HAL_I2C_EV_IRQHandler+0x114>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f9c:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003f9e:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fa0:	f013 0f02 	tst.w	r3, #2
 8003fa4:	d075      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x11a>
 8003fa6:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003faa:	d072      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x11a>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fae:	b103      	cbz	r3, 8003fb2 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fb0:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff fb55 	bl	8003662 <I2C_Slave_ADDR>
}
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fba:	6997      	ldr	r7, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fbc:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fbe:	f011 0001 	ands.w	r0, r1, #1
 8003fc2:	d105      	bne.n	8003fd0 <HAL_I2C_EV_IRQHandler+0x58>
 8003fc4:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003fc8:	d0f6      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
 8003fca:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003fce:	d0f3      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd0:	b110      	cbz	r0, 8003fd8 <HAL_I2C_EV_IRQHandler+0x60>
 8003fd2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003fd6:	d127      	bne.n	8004028 <HAL_I2C_EV_IRQHandler+0xb0>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd8:	f011 0f08 	tst.w	r1, #8
 8003fdc:	d002      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x6c>
 8003fde:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003fe2:	d128      	bne.n	8004036 <HAL_I2C_EV_IRQHandler+0xbe>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe4:	f011 0f02 	tst.w	r1, #2
 8003fe8:	d002      	beq.n	8003ff0 <HAL_I2C_EV_IRQHandler+0x78>
 8003fea:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003fee:	d126      	bne.n	800403e <HAL_I2C_EV_IRQHandler+0xc6>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ff0:	f017 0f04 	tst.w	r7, #4
 8003ff4:	d02f      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0xde>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ff6:	6852      	ldr	r2, [r2, #4]
 8003ff8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003ffc:	d1dc      	bne.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ffe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004002:	d005      	beq.n	8004010 <HAL_I2C_EV_IRQHandler+0x98>
 8004004:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004008:	d002      	beq.n	8004010 <HAL_I2C_EV_IRQHandler+0x98>
 800400a:	f011 0f04 	tst.w	r1, #4
 800400e:	d01a      	beq.n	8004046 <HAL_I2C_EV_IRQHandler+0xce>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004010:	f011 0f04 	tst.w	r1, #4
 8004014:	d0d0      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
 8004016:	f415 7f00 	tst.w	r5, #512	; 0x200
 800401a:	d0cd      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800401c:	2b10      	cmp	r3, #16
 800401e:	d016      	beq.n	800404e <HAL_I2C_EV_IRQHandler+0xd6>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004020:	4620      	mov	r0, r4
 8004022:	f7ff fb46 	bl	80036b2 <I2C_MemoryTransmit_TXE_BTF>
 8004026:	e7c7      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8004028:	4620      	mov	r0, r4
 800402a:	f7fe fdfe 	bl	8002c2a <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 800402e:	4620      	mov	r0, r4
 8004030:	f7fe fc29 	bl	8002886 <I2C_Master_SB>
 8004034:	e7c0      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8004036:	4620      	mov	r0, r4
 8004038:	f7fe fc7a 	bl	8002930 <I2C_Master_ADD10>
 800403c:	e7bc      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 800403e:	4620      	mov	r0, r4
 8004040:	f7fe fc8d 	bl	800295e <I2C_Master_ADDR>
 8004044:	e7b8      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8004046:	4620      	mov	r0, r4
 8004048:	f7ff fb8e 	bl	8003768 <I2C_MasterTransmit_TXE>
 800404c:	e7b4      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff fa77 	bl	8003542 <I2C_MasterTransmit_BTF>
 8004054:	e7b0      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004056:	6853      	ldr	r3, [r2, #4]
 8004058:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800405c:	d1ac      	bne.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800405e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004062:	d005      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0xf8>
 8004064:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004068:	d002      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0xf8>
 800406a:	f011 0f04 	tst.w	r1, #4
 800406e:	d009      	beq.n	8004084 <HAL_I2C_EV_IRQHandler+0x10c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004070:	f011 0f04 	tst.w	r1, #4
 8004074:	d0a0      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
 8004076:	f415 7f00 	tst.w	r5, #512	; 0x200
 800407a:	d09d      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 800407c:	4620      	mov	r0, r4
 800407e:	f7ff fbdb 	bl	8003838 <I2C_MasterReceive_BTF>
 8004082:	e799      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff fd14 	bl	8003ab2 <I2C_MasterReceive_RXNE>
 800408a:	e795      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800408c:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800408e:	6953      	ldr	r3, [r2, #20]
 8004090:	e786      	b.n	8003fa0 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004092:	f013 0f10 	tst.w	r3, #16
 8004096:	d002      	beq.n	800409e <HAL_I2C_EV_IRQHandler+0x126>
 8004098:	f415 7f00 	tst.w	r5, #512	; 0x200
 800409c:	d118      	bne.n	80040d0 <HAL_I2C_EV_IRQHandler+0x158>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800409e:	2821      	cmp	r0, #33	; 0x21
 80040a0:	d01a      	beq.n	80040d8 <HAL_I2C_EV_IRQHandler+0x160>
 80040a2:	2829      	cmp	r0, #41	; 0x29
 80040a4:	d018      	beq.n	80040d8 <HAL_I2C_EV_IRQHandler+0x160>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040aa:	d005      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0x140>
 80040ac:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80040b0:	d002      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0x140>
 80040b2:	f013 0f04 	tst.w	r3, #4
 80040b6:	d028      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x192>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b8:	f013 0f04 	tst.w	r3, #4
 80040bc:	f43f af7c 	beq.w	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
 80040c0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80040c4:	f43f af78 	beq.w	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7fe fd62 	bl	8002b92 <I2C_SlaveReceive_BTF>
 80040ce:	e773      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff fe8d 	bl	8003df0 <I2C_Slave_STOPF>
 80040d6:	e76f      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040dc:	d005      	beq.n	80040ea <HAL_I2C_EV_IRQHandler+0x172>
 80040de:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80040e2:	d002      	beq.n	80040ea <HAL_I2C_EV_IRQHandler+0x172>
 80040e4:	f013 0f04 	tst.w	r3, #4
 80040e8:	d00b      	beq.n	8004102 <HAL_I2C_EV_IRQHandler+0x18a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ea:	f013 0f04 	tst.w	r3, #4
 80040ee:	f43f af63 	beq.w	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
 80040f2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80040f6:	f43f af5f 	beq.w	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7fe fd3a 	bl	8002b74 <I2C_SlaveTransmit_BTF>
 8004100:	e75a      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fa61 	bl	80035ca <I2C_SlaveTransmit_TXE>
 8004108:	e756      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff fa83 	bl	8003616 <I2C_SlaveReceive_RXNE>
 8004110:	e752      	b.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x40>

08004112 <HAL_I2C_GetState>:
  return hi2c->State;
 8004112:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004116:	4770      	bx	lr

08004118 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004118:	4b01      	ldr	r3, [pc, #4]	; (8004120 <HAL_PWR_EnableBkUpAccess+0x8>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	4770      	bx	lr
 8004120:	420e0020 	.word	0x420e0020

08004124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004124:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <RCC_Delay+0x24>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <RCC_Delay+0x28>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	fb00 f003 	mul.w	r0, r0, r3
 8004136:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8004138:	bf00      	nop
  }
  while (Delay --);
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	1e5a      	subs	r2, r3, #1
 800413e:	9201      	str	r2, [sp, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <RCC_Delay+0x14>
}
 8004144:	b002      	add	sp, #8
 8004146:	4770      	bx	lr
 8004148:	20000074 	.word	0x20000074
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004150:	2800      	cmp	r0, #0
 8004152:	f000 81f5 	beq.w	8004540 <HAL_RCC_OscConfig+0x3f0>
{
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415c:	6803      	ldr	r3, [r0, #0]
 800415e:	f013 0f01 	tst.w	r3, #1
 8004162:	d02c      	beq.n	80041be <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004164:	4bab      	ldr	r3, [pc, #684]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b04      	cmp	r3, #4
 800416e:	d01d      	beq.n	80041ac <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004170:	4ba8      	ldr	r3, [pc, #672]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d012      	beq.n	80041a2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d041      	beq.n	8004208 <HAL_RCC_OscConfig+0xb8>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d155      	bne.n	8004234 <HAL_RCC_OscConfig+0xe4>
 8004188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800418c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e037      	b.n	8004212 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a2:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80041aa:	d0e7      	beq.n	800417c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041b4:	d003      	beq.n	80041be <HAL_RCC_OscConfig+0x6e>
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 81c3 	beq.w	8004544 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	f013 0f02 	tst.w	r3, #2
 80041c4:	d076      	beq.n	80042b4 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f013 0f0c 	tst.w	r3, #12
 80041ce:	d05f      	beq.n	8004290 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041d0:	4b90      	ldr	r3, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d054      	beq.n	8004286 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 808a 	beq.w	80042f8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b8c      	ldr	r3, [pc, #560]	; (8004418 <HAL_RCC_OscConfig+0x2c8>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041ea:	f7fd fcf7 	bl	8001bdc <HAL_GetTick>
 80041ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f013 0f02 	tst.w	r3, #2
 80041f8:	d175      	bne.n	80042e6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fd fcef 	bl	8001bdc <HAL_GetTick>
 80041fe:	1b40      	subs	r0, r0, r5
 8004200:	2802      	cmp	r0, #2
 8004202:	d9f5      	bls.n	80041f0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004204:	2003      	movs	r0, #3
 8004206:	e1a0      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	4a82      	ldr	r2, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	b343      	cbz	r3, 8004268 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004216:	f7fd fce1 	bl	8001bdc <HAL_GetTick>
 800421a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421c:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004224:	d1cb      	bne.n	80041be <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004226:	f7fd fcd9 	bl	8001bdc <HAL_GetTick>
 800422a:	1b40      	subs	r0, r0, r5
 800422c:	2864      	cmp	r0, #100	; 0x64
 800422e:	d9f5      	bls.n	800421c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004230:	2003      	movs	r0, #3
 8004232:	e18a      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d009      	beq.n	800424e <HAL_RCC_OscConfig+0xfe>
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e7e1      	b.n	8004212 <HAL_RCC_OscConfig+0xc2>
 800424e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004252:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e7d4      	b.n	8004212 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004268:	f7fd fcb8 	bl	8001bdc <HAL_GetTick>
 800426c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b69      	ldr	r3, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004276:	d0a2      	beq.n	80041be <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fcb0 	bl	8001bdc <HAL_GetTick>
 800427c:	1b40      	subs	r0, r0, r5
 800427e:	2864      	cmp	r0, #100	; 0x64
 8004280:	d9f5      	bls.n	800426e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8004282:	2003      	movs	r0, #3
 8004284:	e161      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800428e:	d1a5      	bne.n	80041dc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004290:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f013 0f02 	tst.w	r3, #2
 8004298:	d004      	beq.n	80042a4 <HAL_RCC_OscConfig+0x154>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80042a0:	2001      	movs	r0, #1
 80042a2:	e152      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042ac:	6961      	ldr	r1, [r4, #20]
 80042ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042b2:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f013 0f08 	tst.w	r3, #8
 80042ba:	d032      	beq.n	8004322 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042bc:	69a3      	ldr	r3, [r4, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d05b      	beq.n	800437a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b56      	ldr	r3, [pc, #344]	; (800441c <HAL_RCC_OscConfig+0x2cc>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80042c8:	f7fd fc88 	bl	8001bdc <HAL_GetTick>
 80042cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	4b51      	ldr	r3, [pc, #324]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f013 0f02 	tst.w	r3, #2
 80042d6:	d121      	bne.n	800431c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fd fc80 	bl	8001bdc <HAL_GetTick>
 80042dc:	1b40      	subs	r0, r0, r5
 80042de:	2802      	cmp	r0, #2
 80042e0:	d9f5      	bls.n	80042ce <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
 80042e4:	e131      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4a4b      	ldr	r2, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80042ee:	6961      	ldr	r1, [r4, #20]
 80042f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e7dd      	b.n	80042b4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80042f8:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_OscConfig+0x2c8>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042fe:	f7fd fc6d 	bl	8001bdc <HAL_GetTick>
 8004302:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004304:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f013 0f02 	tst.w	r3, #2
 800430c:	d0d2      	beq.n	80042b4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430e:	f7fd fc65 	bl	8001bdc <HAL_GetTick>
 8004312:	1b40      	subs	r0, r0, r5
 8004314:	2802      	cmp	r0, #2
 8004316:	d9f5      	bls.n	8004304 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004318:	2003      	movs	r0, #3
 800431a:	e116      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 800431c:	2001      	movs	r0, #1
 800431e:	f7ff ff01 	bl	8004124 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f013 0f04 	tst.w	r3, #4
 8004328:	f000 8098 	beq.w	800445c <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432c:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004334:	d133      	bne.n	800439e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b37      	ldr	r3, [pc, #220]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800433e:	61da      	str	r2, [r3, #28]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800434a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_OscConfig+0x2d0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004354:	d025      	beq.n	80043a2 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d036      	beq.n	80043ca <HAL_RCC_OscConfig+0x27a>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d14c      	bne.n	80043fa <HAL_RCC_OscConfig+0x2aa>
 8004360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004364:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	621a      	str	r2, [r3, #32]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	621a      	str	r2, [r3, #32]
 8004378:	e02c      	b.n	80043d4 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 800437a:	4b28      	ldr	r3, [pc, #160]	; (800441c <HAL_RCC_OscConfig+0x2cc>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004380:	f7fd fc2c 	bl	8001bdc <HAL_GetTick>
 8004384:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f013 0f02 	tst.w	r3, #2
 800438e:	d0c8      	beq.n	8004322 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004390:	f7fd fc24 	bl	8001bdc <HAL_GetTick>
 8004394:	1b40      	subs	r0, r0, r5
 8004396:	2802      	cmp	r0, #2
 8004398:	d9f5      	bls.n	8004386 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 800439a:	2003      	movs	r0, #3
 800439c:	e0d5      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2500      	movs	r5, #0
 80043a0:	e7d4      	b.n	800434c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x2d0>)
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80043ac:	f7fd fc16 	bl	8001bdc <HAL_GetTick>
 80043b0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x2d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043ba:	d1cc      	bne.n	8004356 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043bc:	f7fd fc0e 	bl	8001bdc <HAL_GetTick>
 80043c0:	1b80      	subs	r0, r0, r6
 80043c2:	2864      	cmp	r0, #100	; 0x64
 80043c4:	d9f5      	bls.n	80043b2 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 80043c6:	2003      	movs	r0, #3
 80043c8:	e0bf      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80043cc:	6a13      	ldr	r3, [r2, #32]
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d4:	68e3      	ldr	r3, [r4, #12]
 80043d6:	b37b      	cbz	r3, 8004438 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 80043d8:	f7fd fc00 	bl	8001bdc <HAL_GetTick>
 80043dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f013 0f02 	tst.w	r3, #2
 80043e6:	d138      	bne.n	800445a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fd fbf8 	bl	8001bdc <HAL_GetTick>
 80043ec:	1b80      	subs	r0, r0, r6
 80043ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80043f2:	4298      	cmp	r0, r3
 80043f4:	d9f3      	bls.n	80043de <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 80043f6:	2003      	movs	r0, #3
 80043f8:	e0a7      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d012      	beq.n	8004424 <HAL_RCC_OscConfig+0x2d4>
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_OscConfig+0x2c4>)
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	f022 0204 	bic.w	r2, r2, #4
 800440e:	621a      	str	r2, [r3, #32]
 8004410:	e7e0      	b.n	80043d4 <HAL_RCC_OscConfig+0x284>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	42420000 	.word	0x42420000
 800441c:	42420480 	.word	0x42420480
 8004420:	40007000 	.word	0x40007000
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	f042 0204 	orr.w	r2, r2, #4
 800442c:	621a      	str	r2, [r3, #32]
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	621a      	str	r2, [r3, #32]
 8004436:	e7cd      	b.n	80043d4 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8004438:	f7fd fbd0 	bl	8001bdc <HAL_GetTick>
 800443c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	4b46      	ldr	r3, [pc, #280]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f013 0f02 	tst.w	r3, #2
 8004446:	d008      	beq.n	800445a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fd fbc8 	bl	8001bdc <HAL_GetTick>
 800444c:	1b80      	subs	r0, r0, r6
 800444e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004452:	4298      	cmp	r0, r3
 8004454:	d9f3      	bls.n	800443e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8004456:	2003      	movs	r0, #3
 8004458:	e077      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 800445a:	b9e5      	cbnz	r5, 8004496 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445c:	69e3      	ldr	r3, [r4, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d072      	beq.n	8004548 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004462:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004464:	6852      	ldr	r2, [r2, #4]
 8004466:	f002 020c 	and.w	r2, r2, #12
 800446a:	2a08      	cmp	r2, #8
 800446c:	d056      	beq.n	800451c <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446e:	2b02      	cmp	r3, #2
 8004470:	d017      	beq.n	80044a2 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCC_OscConfig+0x40c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004478:	f7fd fbb0 	bl	8001bdc <HAL_GetTick>
 800447c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004486:	d047      	beq.n	8004518 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fba8 	bl	8001bdc <HAL_GetTick>
 800448c:	1b00      	subs	r0, r0, r4
 800448e:	2802      	cmp	r0, #2
 8004490:	d9f5      	bls.n	800447e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8004492:	2003      	movs	r0, #3
 8004494:	e059      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004498:	69d3      	ldr	r3, [r2, #28]
 800449a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449e:	61d3      	str	r3, [r2, #28]
 80044a0:	e7dc      	b.n	800445c <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b2e      	ldr	r3, [pc, #184]	; (800455c <HAL_RCC_OscConfig+0x40c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044a8:	f7fd fb98 	bl	8001bdc <HAL_GetTick>
 80044ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80044b6:	d006      	beq.n	80044c6 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fb90 	bl	8001bdc <HAL_GetTick>
 80044bc:	1b40      	subs	r0, r0, r5
 80044be:	2802      	cmp	r0, #2
 80044c0:	d9f5      	bls.n	80044ae <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80044c2:	2003      	movs	r0, #3
 80044c4:	e041      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044c6:	6a23      	ldr	r3, [r4, #32]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d01a      	beq.n	8004504 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ce:	4922      	ldr	r1, [pc, #136]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 80044d0:	684b      	ldr	r3, [r1, #4]
 80044d2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80044d6:	6a22      	ldr	r2, [r4, #32]
 80044d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80044da:	4302      	orrs	r2, r0
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80044e0:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_RCC_OscConfig+0x40c>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044e6:	f7fd fb79 	bl	8001bdc <HAL_GetTick>
 80044ea:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80044f4:	d10e      	bne.n	8004514 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fd fb71 	bl	8001bdc <HAL_GetTick>
 80044fa:	1b00      	subs	r0, r0, r4
 80044fc:	2802      	cmp	r0, #2
 80044fe:	d9f5      	bls.n	80044ec <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8004500:	2003      	movs	r0, #3
 8004502:	e022      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004506:	6853      	ldr	r3, [r2, #4]
 8004508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800450c:	68a1      	ldr	r1, [r4, #8]
 800450e:	430b      	orrs	r3, r1
 8004510:	6053      	str	r3, [r2, #4]
 8004512:	e7dc      	b.n	80044ce <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8004514:	2000      	movs	r0, #0
 8004516:	e018      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
 8004518:	2000      	movs	r0, #0
 800451a:	e016      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	2b01      	cmp	r3, #1
 800451e:	d016      	beq.n	800454e <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_RCC_OscConfig+0x408>)
 8004522:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004528:	6a22      	ldr	r2, [r4, #32]
 800452a:	4291      	cmp	r1, r2
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 800452e:	2001      	movs	r0, #1
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004532:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004536:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d00a      	beq.n	8004552 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 800453c:	2001      	movs	r0, #1
 800453e:	e004      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8004540:	2001      	movs	r0, #1
}
 8004542:	4770      	bx	lr
        return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8004548:	2000      	movs	r0, #0
}
 800454a:	b002      	add	sp, #8
 800454c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	e7fb      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	e7f9      	b.n	800454a <HAL_RCC_OscConfig+0x3fa>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	42420060 	.word	0x42420060

08004560 <HAL_RCC_GetSysClockFreq>:
{
 8004560:	b410      	push	{r4}
 8004562:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004564:	4c18      	ldr	r4, [pc, #96]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x68>)
 8004566:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800456a:	f10d 0c18 	add.w	ip, sp, #24
 800456e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004572:	8a23      	ldrh	r3, [r4, #16]
 8004574:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_RCC_GetSysClockFreq+0x6c>)
 800457a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800457c:	f003 020c 	and.w	r2, r3, #12
 8004580:	2a04      	cmp	r2, #4
 8004582:	d003      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x2c>
 8004584:	2a08      	cmp	r2, #8
 8004586:	d005      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = HSI_VALUE;
 8004588:	4811      	ldr	r0, [pc, #68]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800458a:	e000      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = HSE_VALUE;
 800458c:	4811      	ldr	r0, [pc, #68]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x74>)
}
 800458e:	b007      	add	sp, #28
 8004590:	bc10      	pop	{r4}
 8004592:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004594:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004598:	a906      	add	r1, sp, #24
 800459a:	440a      	add	r2, r1
 800459c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045a4:	d00c      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x60>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_GetSysClockFreq+0x6c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80045ae:	440b      	add	r3, r1
 80045b0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045b4:	4807      	ldr	r0, [pc, #28]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x74>)
 80045b6:	fb00 f002 	mul.w	r0, r0, r2
 80045ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80045be:	e7e6      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80045c2:	fb00 f002 	mul.w	r0, r0, r2
 80045c6:	e7e2      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x2e>
 80045c8:	08008858 	.word	0x08008858
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	003d0900 	.word	0x003d0900

080045dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80045dc:	2800      	cmp	r0, #0
 80045de:	f000 80a3 	beq.w	8004728 <HAL_RCC_ClockConfig+0x14c>
{
 80045e2:	b570      	push	{r4, r5, r6, lr}
 80045e4:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e6:	4b52      	ldr	r3, [pc, #328]	; (8004730 <HAL_RCC_ClockConfig+0x154>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	428b      	cmp	r3, r1
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4a4f      	ldr	r2, [pc, #316]	; (8004730 <HAL_RCC_ClockConfig+0x154>)
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	428b      	cmp	r3, r1
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004608:	2001      	movs	r0, #1
}
 800460a:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f013 0f02 	tst.w	r3, #2
 8004612:	d017      	beq.n	8004644 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	f013 0f04 	tst.w	r3, #4
 8004618:	d004      	beq.n	8004624 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 800461c:	6853      	ldr	r3, [r2, #4]
 800461e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004622:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f013 0f08 	tst.w	r3, #8
 800462a:	d004      	beq.n	8004636 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4a41      	ldr	r2, [pc, #260]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 800462e:	6853      	ldr	r3, [r2, #4]
 8004630:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004634:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004636:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 8004638:	6853      	ldr	r3, [r2, #4]
 800463a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463e:	68a0      	ldr	r0, [r4, #8]
 8004640:	4303      	orrs	r3, r0
 8004642:	6053      	str	r3, [r2, #4]
 8004644:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f013 0f01 	tst.w	r3, #1
 800464c:	d031      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	6863      	ldr	r3, [r4, #4]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004654:	2b02      	cmp	r3, #2
 8004656:	d025      	beq.n	80046a4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	4a36      	ldr	r2, [pc, #216]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	f012 0f02 	tst.w	r2, #2
 8004660:	d064      	beq.n	800472c <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004662:	4934      	ldr	r1, [pc, #208]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 8004664:	684a      	ldr	r2, [r1, #4]
 8004666:	f022 0203 	bic.w	r2, r2, #3
 800466a:	4313      	orrs	r3, r2
 800466c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800466e:	f7fd fab5 	bl	8001bdc <HAL_GetTick>
 8004672:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	6862      	ldr	r2, [r4, #4]
 800467e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004682:	d016      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fd faaa 	bl	8001bdc <HAL_GetTick>
 8004688:	1b80      	subs	r0, r0, r6
 800468a:	f241 3388 	movw	r3, #5000	; 0x1388
 800468e:	4298      	cmp	r0, r3
 8004690:	d9f0      	bls.n	8004674 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8004692:	2003      	movs	r0, #3
 8004694:	e7b9      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4a27      	ldr	r2, [pc, #156]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800469e:	d1e0      	bne.n	8004662 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
 80046a2:	e7b2      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80046ac:	d1d9      	bne.n	8004662 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7ab      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b2:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_RCC_ClockConfig+0x154>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	42ab      	cmp	r3, r5
 80046bc:	d90c      	bls.n	80046d8 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_RCC_ClockConfig+0x154>)
 80046c0:	6813      	ldr	r3, [r2, #0]
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	432b      	orrs	r3, r5
 80046c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	6813      	ldr	r3, [r2, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 80046d4:	2001      	movs	r0, #1
 80046d6:	e798      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	f013 0f04 	tst.w	r3, #4
 80046de:	d006      	beq.n	80046ee <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 80046e2:	6853      	ldr	r3, [r2, #4]
 80046e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046e8:	68e1      	ldr	r1, [r4, #12]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	f013 0f08 	tst.w	r3, #8
 80046f4:	d007      	beq.n	8004706 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046f6:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 80046f8:	6853      	ldr	r3, [r2, #4]
 80046fa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80046fe:	6921      	ldr	r1, [r4, #16]
 8004700:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004704:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004706:	f7ff ff2b 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x158>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x15c>)
 8004714:	5cd3      	ldrb	r3, [r2, r3]
 8004716:	40d8      	lsrs	r0, r3
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <HAL_RCC_ClockConfig+0x160>)
 800471a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_RCC_ClockConfig+0x164>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	f7fd fa18 	bl	8001b54 <HAL_InitTick>
  return HAL_OK;
 8004724:	2000      	movs	r0, #0
 8004726:	e770      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004728:	2001      	movs	r0, #1
}
 800472a:	4770      	bx	lr
        return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
 800472e:	e76c      	b.n	800460a <HAL_RCC_ClockConfig+0x2e>
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	080090fc 	.word	0x080090fc
 800473c:	20000074 	.word	0x20000074
 8004740:	2000006c 	.word	0x2000006c

08004744 <HAL_RCC_GetHCLKFreq>:
}
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <HAL_RCC_GetHCLKFreq+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000074 	.word	0x20000074

08004750 <HAL_RCC_GetPCLK1Freq>:
{
 8004750:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004752:	f7ff fff7 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800475e:	4a03      	ldr	r2, [pc, #12]	; (800476c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
}
 8004762:	40d8      	lsrs	r0, r3
 8004764:	bd08      	pop	{r3, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	0800910c 	.word	0x0800910c

08004770 <HAL_RCC_GetPCLK2Freq>:
{
 8004770:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004772:	f7ff ffe7 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800477e:	4a03      	ldr	r2, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004780:	5cd3      	ldrb	r3, [r2, r3]
}
 8004782:	40d8      	lsrs	r0, r3
 8004784:	bd08      	pop	{r3, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	0800910c 	.word	0x0800910c

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004796:	6803      	ldr	r3, [r0, #0]
 8004798:	f013 0f01 	tst.w	r3, #1
 800479c:	d034      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80047a6:	d148      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047b0:	61da      	str	r2, [r3, #28]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047bc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047c6:	d03a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c8:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80047d8:	429a      	cmp	r2, r3
 80047da:	d00c      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047dc:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047de:	6a13      	ldr	r3, [r2, #32]
 80047e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e4:	492e      	ldr	r1, [pc, #184]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80047e6:	2601      	movs	r6, #1
 80047e8:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ea:	2600      	movs	r6, #0
 80047ec:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ee:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f0:	f013 0f01 	tst.w	r3, #1
 80047f4:	d137      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f6:	4a28      	ldr	r2, [pc, #160]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80047f8:	6a13      	ldr	r3, [r2, #32]
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	6861      	ldr	r1, [r4, #4]
 8004800:	430b      	orrs	r3, r1
 8004802:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004804:	2d00      	cmp	r5, #0
 8004806:	d13f      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f013 0f02 	tst.w	r3, #2
 800480e:	d006      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004812:	6853      	ldr	r3, [r2, #4]
 8004814:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004818:	68a1      	ldr	r1, [r4, #8]
 800481a:	430b      	orrs	r3, r1
 800481c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	f013 0f10 	tst.w	r3, #16
 8004824:	d035      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004828:	6853      	ldr	r3, [r2, #4]
 800482a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800482e:	68e1      	ldr	r1, [r4, #12]
 8004830:	430b      	orrs	r3, r1
 8004832:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004834:	2000      	movs	r0, #0
}
 8004836:	b002      	add	sp, #8
 8004838:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2500      	movs	r5, #0
 800483c:	e7bf      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004848:	f7fd f9c8 	bl	8001bdc <HAL_GetTick>
 800484c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004856:	d1b7      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004858:	f7fd f9c0 	bl	8001bdc <HAL_GetTick>
 800485c:	1b80      	subs	r0, r0, r6
 800485e:	2864      	cmp	r0, #100	; 0x64
 8004860:	d9f5      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8004862:	2003      	movs	r0, #3
 8004864:	e7e7      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8004866:	f7fd f9b9 	bl	8001bdc <HAL_GetTick>
 800486a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f013 0f02 	tst.w	r3, #2
 8004874:	d1bf      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd f9b1 	bl	8001bdc <HAL_GetTick>
 800487a:	1b80      	subs	r0, r0, r6
 800487c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004880:	4298      	cmp	r0, r3
 8004882:	d9f3      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8004884:	2003      	movs	r0, #3
 8004886:	e7d6      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004888:	69d3      	ldr	r3, [r2, #28]
 800488a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488e:	61d3      	str	r3, [r2, #28]
 8004890:	e7ba      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8004892:	2000      	movs	r0, #0
 8004894:	e7cf      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	42420440 	.word	0x42420440

080048a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048a4:	b530      	push	{r4, r5, lr}
 80048a6:	b087      	sub	sp, #28
 80048a8:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048aa:	4c38      	ldr	r4, [pc, #224]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 80048ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048b0:	f10d 0c18 	add.w	ip, sp, #24
 80048b4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048b8:	8a23      	ldrh	r3, [r4, #16]
 80048ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048be:	2d02      	cmp	r5, #2
 80048c0:	d050      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80048c2:	2d10      	cmp	r5, #16
 80048c4:	d003      	beq.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 80048c6:	2d01      	cmp	r5, #1
 80048c8:	d02b      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 80048ca:	2000      	movs	r0, #0
 80048cc:	e054      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80048d0:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80048d8:	d050      	beq.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048da:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80048de:	a906      	add	r1, sp, #24
 80048e0:	440b      	add	r3, r1
 80048e2:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80048ea:	d016      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80048f4:	440b      	add	r3, r1
 80048f6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 80048fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004900:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004904:	4b22      	ldr	r3, [pc, #136]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800490c:	d134      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 800490e:	0040      	lsls	r0, r0, #1
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8004912:	fba3 3000 	umull	r3, r0, r3, r0
 8004916:	0840      	lsrs	r0, r0, #1
 8004918:	e02e      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800491c:	fb03 f000 	mul.w	r0, r3, r0
 8004920:	e7f0      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004924:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004926:	f240 3202 	movw	r2, #770	; 0x302
 800492a:	401a      	ands	r2, r3
 800492c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004930:	d026      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493a:	d004      	beq.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800493c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004942:	2000      	movs	r0, #0
 8004944:	e018      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800494a:	f012 0f02 	tst.w	r2, #2
 800494e:	d0f5      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 8004950:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004954:	e010      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800495e:	d112      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004960:	2000      	movs	r0, #0
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004964:	f7ff ff04 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004970:	3301      	adds	r3, #1
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return (frequency);
}
 8004978:	b007      	add	sp, #28
 800497a:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 800497c:	2000      	movs	r0, #0
 800497e:	e7fb      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 8004980:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004984:	e7f8      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 8004986:	4806      	ldr	r0, [pc, #24]	; (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
  return (frequency);
 8004988:	e7f6      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800498a:	bf00      	nop
 800498c:	0800886c 	.word	0x0800886c
 8004990:	40021000 	.word	0x40021000
 8004994:	00f42400 	.word	0x00f42400
 8004998:	aaaaaaab 	.word	0xaaaaaaab
 800499c:	003d0900 	.word	0x003d0900
 80049a0:	0001e848 	.word	0x0001e848

080049a4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80049a4:	b430      	push	{r4, r5}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80049a6:	6802      	ldr	r2, [r0, #0]
 80049a8:	6994      	ldr	r4, [r2, #24]
 80049aa:	b2a5      	uxth	r5, r4
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80049ac:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80049ae:	6991      	ldr	r1, [r2, #24]
 80049b0:	b288      	uxth	r0, r1

  if (high1 != high2)
 80049b2:	4285      	cmp	r5, r0
 80049b4:	d005      	beq.n	80049c2 <RTC_ReadTimeCounter+0x1e>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80049b6:	69d0      	ldr	r0, [r2, #28]
 80049b8:	b280      	uxth	r0, r0
 80049ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 80049be:	bc30      	pop	{r4, r5}
 80049c0:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 80049c2:	b298      	uxth	r0, r3
 80049c4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 80049c8:	e7f9      	b.n	80049be <RTC_ReadTimeCounter+0x1a>

080049ca <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80049ca:	6803      	ldr	r3, [r0, #0]
 80049cc:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80049d0:	b29b      	uxth	r3, r3
}
 80049d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80049d6:	4770      	bx	lr

080049d8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80049d8:	0903      	lsrs	r3, r0, #4
 80049da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049de:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80049e0:	f000 000f 	and.w	r0, r0, #15
 80049e4:	4410      	add	r0, r2
}
 80049e6:	b2c0      	uxtb	r0, r0
 80049e8:	4770      	bx	lr
	...

080049ec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80049ec:	b410      	push	{r4}
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 80049ee:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 80049f2:	2902      	cmp	r1, #2
 80049f4:	d920      	bls.n	8004a38 <RTC_WeekDayNum+0x4c>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80049f6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80049fa:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <RTC_WeekDayNum+0x90>)
 8004a00:	fba3 1301 	umull	r1, r3, r3, r1
 8004a04:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8004a08:	4423      	add	r3, r4
 8004a0a:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <RTC_WeekDayNum+0x94>)
 8004a10:	fba2 2404 	umull	r2, r4, r2, r4
 8004a14:	eba3 1354 	sub.w	r3, r3, r4, lsr #5
 8004a18:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	4819      	ldr	r0, [pc, #100]	; (8004a84 <RTC_WeekDayNum+0x98>)
 8004a20:	fba0 2003 	umull	r2, r0, r0, r3
 8004a24:	1a1a      	subs	r2, r3, r0
 8004a26:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8004a2a:	0880      	lsrs	r0, r0, #2
 8004a2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004a30:	1a18      	subs	r0, r3, r0
  }

  return (uint8_t)weekday;
}
 8004a32:	b2c0      	uxtb	r0, r0
 8004a34:	bc10      	pop	{r4}
 8004a36:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004a38:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8004a3c:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <RTC_WeekDayNum+0x90>)
 8004a42:	fba3 1301 	umull	r1, r3, r3, r1
 8004a46:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8004a4a:	4423      	add	r3, r4
 8004a4c:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8004a50:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <RTC_WeekDayNum+0x94>)
 8004a56:	fba2 2000 	umull	r2, r0, r2, r0
 8004a5a:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8004a5e:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8004a62:	3304      	adds	r3, #4
 8004a64:	4807      	ldr	r0, [pc, #28]	; (8004a84 <RTC_WeekDayNum+0x98>)
 8004a66:	fba0 2003 	umull	r2, r0, r0, r3
 8004a6a:	1a1a      	subs	r2, r3, r0
 8004a6c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8004a70:	0880      	lsrs	r0, r0, #2
 8004a72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004a76:	1a18      	subs	r0, r3, r0
 8004a78:	e7db      	b.n	8004a32 <RTC_WeekDayNum+0x46>
 8004a7a:	bf00      	nop
 8004a7c:	38e38e39 	.word	0x38e38e39
 8004a80:	51eb851f 	.word	0x51eb851f
 8004a84:	24924925 	.word	0x24924925

08004a88 <RTC_EnterInitMode>:
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8004a8c:	f7fd f8a6 	bl	8001bdc <HAL_GetTick>
 8004a90:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	f012 0f20 	tst.w	r2, #32
 8004a9a:	d107      	bne.n	8004aac <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a9c:	f7fd f89e 	bl	8001bdc <HAL_GetTick>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004aa6:	d9f4      	bls.n	8004a92 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8004aa8:	2003      	movs	r0, #3
 8004aaa:	e004      	b.n	8004ab6 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	f042 0210 	orr.w	r2, r2, #16
 8004ab2:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8004ab4:	2000      	movs	r0, #0
}
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}

08004ab8 <RTC_ExitInitMode>:
{
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004abc:	6802      	ldr	r2, [r0, #0]
 8004abe:	6853      	ldr	r3, [r2, #4]
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004ac6:	f7fd f889 	bl	8001bdc <HAL_GetTick>
 8004aca:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f013 0f20 	tst.w	r3, #32
 8004ad4:	d107      	bne.n	8004ae6 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ad6:	f7fd f881 	bl	8001bdc <HAL_GetTick>
 8004ada:	1b40      	subs	r0, r0, r5
 8004adc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ae0:	d9f4      	bls.n	8004acc <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8004ae2:	2003      	movs	r0, #3
 8004ae4:	e000      	b.n	8004ae8 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8004ae6:	2000      	movs	r0, #0
}
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}

08004aea <RTC_WriteTimeCounter>:
{
 8004aea:	b538      	push	{r3, r4, r5, lr}
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004af0:	f7ff ffca 	bl	8004a88 <RTC_EnterInitMode>
 8004af4:	b110      	cbz	r0, 8004afc <RTC_WriteTimeCounter+0x12>
    status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	0c22      	lsrs	r2, r4, #16
 8004b00:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	b2a4      	uxth	r4, r4
 8004b06:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f7ff ffd5 	bl	8004ab8 <RTC_ExitInitMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d0f1      	beq.n	8004af8 <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e7ef      	b.n	8004af8 <RTC_WriteTimeCounter+0xe>

08004b18 <RTC_WriteAlarmCounter>:
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b1e:	f7ff ffb3 	bl	8004a88 <RTC_EnterInitMode>
 8004b22:	b110      	cbz	r0, 8004b2a <RTC_WriteAlarmCounter+0x12>
    status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	0c22      	lsrs	r2, r4, #16
 8004b2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b2a4      	uxth	r4, r4
 8004b34:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7ff ffbe 	bl	8004ab8 <RTC_ExitInitMode>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d0f1      	beq.n	8004b26 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7ef      	b.n	8004b26 <RTC_WriteAlarmCounter+0xe>

08004b46 <HAL_RTC_SetTime>:
{
 8004b46:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d057      	beq.n	8004bfc <HAL_RTC_SetTime+0xb6>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d056      	beq.n	8004c00 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 8004b52:	7c03      	ldrb	r3, [r0, #16]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d055      	beq.n	8004c04 <HAL_RTC_SetTime+0xbe>
 8004b58:	460e      	mov	r6, r1
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8004b62:	b9ba      	cbnz	r2, 8004b94 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b64:	780d      	ldrb	r5, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004b66:	784b      	ldrb	r3, [r1, #1]
 8004b68:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004b6c:	009a      	lsls	r2, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b72:	fb03 2505 	mla	r5, r3, r5, r2
                              ((uint32_t)sTime->Seconds));
 8004b76:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b78:	441d      	add	r5, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7ff ffb4 	bl	8004aea <RTC_WriteTimeCounter>
 8004b82:	4606      	mov	r6, r0
 8004b84:	b1c8      	cbz	r0, 8004bba <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b86:	2304      	movs	r3, #4
 8004b88:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8004b8e:	2601      	movs	r6, #1
}
 8004b90:	4630      	mov	r0, r6
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b94:	7808      	ldrb	r0, [r1, #0]
 8004b96:	f7ff ff1f 	bl	80049d8 <RTC_Bcd2ToByte>
 8004b9a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8004b9e:	fb05 f500 	mul.w	r5, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004ba2:	7870      	ldrb	r0, [r6, #1]
 8004ba4:	f7ff ff18 	bl	80049d8 <RTC_Bcd2ToByte>
 8004ba8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8004bac:	0083      	lsls	r3, r0, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004bae:	441d      	add	r5, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004bb0:	78b0      	ldrb	r0, [r6, #2]
 8004bb2:	f7ff ff11 	bl	80049d8 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004bb6:	4405      	add	r5, r0
 8004bb8:	e7df      	b.n	8004b7a <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	6853      	ldr	r3, [r2, #4]
 8004bbe:	f023 0305 	bic.w	r3, r3, #5
 8004bc2:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff ff00 	bl	80049ca <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bce:	d001      	beq.n	8004bd4 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 8004bd0:	4285      	cmp	r5, r0
 8004bd2:	d804      	bhi.n	8004bde <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	7423      	strb	r3, [r4, #16]
    return HAL_OK;
 8004bdc:	e7d8      	b.n	8004b90 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004bde:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004be2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7ff ff96 	bl	8004b18 <RTC_WriteAlarmCounter>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0f1      	beq.n	8004bd4 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8004bf8:	2601      	movs	r6, #1
 8004bfa:	e7c9      	b.n	8004b90 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8004bfc:	2601      	movs	r6, #1
 8004bfe:	e7c7      	b.n	8004b90 <HAL_RTC_SetTime+0x4a>
 8004c00:	2601      	movs	r6, #1
 8004c02:	e7c5      	b.n	8004b90 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 8004c04:	2602      	movs	r6, #2
 8004c06:	e7c3      	b.n	8004b90 <HAL_RTC_SetTime+0x4a>

08004c08 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d05d      	beq.n	8004cc8 <HAL_RTC_SetDate+0xc0>
{
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d05b      	beq.n	8004ccc <HAL_RTC_SetDate+0xc4>
  __HAL_LOCK(hrtc);
 8004c14:	7c03      	ldrb	r3, [r0, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d05a      	beq.n	8004cd0 <HAL_RTC_SetDate+0xc8>
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c20:	2302      	movs	r3, #2
 8004c22:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8004c24:	b9d2      	cbnz	r2, 8004c5c <HAL_RTC_SetDate+0x54>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004c26:	78cb      	ldrb	r3, [r1, #3]
 8004c28:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004c2a:	784b      	ldrb	r3, [r1, #1]
 8004c2c:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004c2e:	788b      	ldrb	r3, [r1, #2]
 8004c30:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004c32:	7ba2      	ldrb	r2, [r4, #14]
 8004c34:	7b61      	ldrb	r1, [r4, #13]
 8004c36:	7be0      	ldrb	r0, [r4, #15]
 8004c38:	f7ff fed8 	bl	80049ec <RTC_WeekDayNum>
 8004c3c:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004c3e:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff feaf 	bl	80049a4 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RTC_SetDate+0xcc>)
 8004c48:	fba3 2300 	umull	r2, r3, r3, r0
  if (hours > 24U)
 8004c4c:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8004c50:	d211      	bcs.n	8004c76 <HAL_RTC_SetDate+0x6e>
  hrtc->State = HAL_RTC_STATE_READY ;
 8004c52:	2301      	movs	r3, #1
 8004c54:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004c56:	2000      	movs	r0, #0
 8004c58:	7420      	strb	r0, [r4, #16]
}
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004c5c:	78c8      	ldrb	r0, [r1, #3]
 8004c5e:	f7ff febb 	bl	80049d8 <RTC_Bcd2ToByte>
 8004c62:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004c64:	7868      	ldrb	r0, [r5, #1]
 8004c66:	f7ff feb7 	bl	80049d8 <RTC_Bcd2ToByte>
 8004c6a:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004c6c:	78a8      	ldrb	r0, [r5, #2]
 8004c6e:	f7ff feb3 	bl	80049d8 <RTC_Bcd2ToByte>
 8004c72:	73a0      	strb	r0, [r4, #14]
 8004c74:	e7dd      	b.n	8004c32 <HAL_RTC_SetDate+0x2a>
 8004c76:	4d18      	ldr	r5, [pc, #96]	; (8004cd8 <HAL_RTC_SetDate+0xd0>)
 8004c78:	fba5 3500 	umull	r3, r5, r5, r0
 8004c7c:	0c2d      	lsrs	r5, r5, #16
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RTC_SetDate+0xd4>)
 8004c80:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c84:	4629      	mov	r1, r5
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff ff2f 	bl	8004aea <RTC_WriteTimeCounter>
 8004c8c:	b128      	cbz	r0, 8004c9a <HAL_RTC_SetDate+0x92>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8004c92:	2300      	movs	r3, #0
 8004c94:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8004c96:	2001      	movs	r0, #1
 8004c98:	e7df      	b.n	8004c5a <HAL_RTC_SetDate+0x52>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7ff fe95 	bl	80049ca <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ca4:	d0d5      	beq.n	8004c52 <HAL_RTC_SetDate+0x4a>
      if (counter_alarm < counter_time)
 8004ca6:	4285      	cmp	r5, r0
 8004ca8:	d9d3      	bls.n	8004c52 <HAL_RTC_SetDate+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004caa:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004cae:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f7ff ff30 	bl	8004b18 <RTC_WriteAlarmCounter>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d0ca      	beq.n	8004c52 <HAL_RTC_SetDate+0x4a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	e7c8      	b.n	8004c5a <HAL_RTC_SetDate+0x52>
    return HAL_ERROR;
 8004cc8:	2001      	movs	r0, #1
}
 8004cca:	4770      	bx	lr
    return HAL_ERROR;
 8004ccc:	2001      	movs	r0, #1
 8004cce:	e7c4      	b.n	8004c5a <HAL_RTC_SetDate+0x52>
  __HAL_LOCK(hrtc);
 8004cd0:	2002      	movs	r0, #2
 8004cd2:	e7c2      	b.n	8004c5a <HAL_RTC_SetDate+0x52>
 8004cd4:	91a2b3c5 	.word	0x91a2b3c5
 8004cd8:	c22e4507 	.word	0xc22e4507
 8004cdc:	00015180 	.word	0x00015180

08004ce0 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8004ce0:	b1c0      	cbz	r0, 8004d14 <HAL_RTC_WaitForSynchro+0x34>
{
 8004ce2:	b538      	push	{r3, r4, r5, lr}
 8004ce4:	4604      	mov	r4, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004ce6:	6802      	ldr	r2, [r0, #0]
 8004ce8:	6853      	ldr	r3, [r2, #4]
 8004cea:	f023 0308 	bic.w	r3, r3, #8
 8004cee:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004cf0:	f7fc ff74 	bl	8001bdc <HAL_GetTick>
 8004cf4:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f013 0f08 	tst.w	r3, #8
 8004cfe:	d107      	bne.n	8004d10 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004d00:	f7fc ff6c 	bl	8001bdc <HAL_GetTick>
 8004d04:	1b40      	subs	r0, r0, r5
 8004d06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d0a:	d9f4      	bls.n	8004cf6 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	e000      	b.n	8004d12 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8004d10:	2000      	movs	r0, #0
}
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
}
 8004d16:	4770      	bx	lr

08004d18 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d05a      	beq.n	8004dd2 <HAL_RTC_Init+0xba>
{
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d20:	7c43      	ldrb	r3, [r0, #17]
 8004d22:	b153      	cbz	r3, 8004d3a <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d24:	2302      	movs	r3, #2
 8004d26:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f7ff ffd9 	bl	8004ce0 <HAL_RTC_WaitForSynchro>
 8004d2e:	b140      	cbz	r0, 8004d42 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d30:	2304      	movs	r3, #4
 8004d32:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004d3a:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8004d3c:	f001 f970 	bl	8006020 <HAL_RTC_MspInit>
 8004d40:	e7f0      	b.n	8004d24 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff fea0 	bl	8004a88 <RTC_EnterInitMode>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d130      	bne.n	8004dae <HAL_RTC_Init+0x96>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	6853      	ldr	r3, [r2, #4]
 8004d50:	f023 0307 	bic.w	r3, r3, #7
 8004d54:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	b123      	cbz	r3, 8004d64 <HAL_RTC_Init+0x4c>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004d5a:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_RTC_Init+0xc0>)
 8004d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <HAL_RTC_Init+0xc0>)
 8004d66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d68:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004d6c:	68a1      	ldr	r1, [r4, #8]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004d78:	d01d      	beq.n	8004db6 <HAL_RTC_Init+0x9e>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004d7a:	6821      	ldr	r1, [r4, #0]
 8004d7c:	688b      	ldr	r3, [r1, #8]
 8004d7e:	f023 030f 	bic.w	r3, r3, #15
 8004d82:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8004d86:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004d88:	6821      	ldr	r1, [r4, #0]
 8004d8a:	68cb      	ldr	r3, [r1, #12]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	b292      	uxth	r2, r2
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60cb      	str	r3, [r1, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff fe8e 	bl	8004ab8 <RTC_ExitInitMode>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	b9a0      	cbnz	r0, 8004dca <HAL_RTC_Init+0xb2>
    hrtc->DateToUpdate.Year = 0x00U;
 8004da0:	2200      	movs	r2, #0
 8004da2:	73e2      	strb	r2, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004da4:	2201      	movs	r2, #1
 8004da6:	7362      	strb	r2, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004da8:	73a2      	strb	r2, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8004daa:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8004dac:	e7c3      	b.n	8004d36 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dae:	2304      	movs	r3, #4
 8004db0:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e7bf      	b.n	8004d36 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7ff fd74 	bl	80048a4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8004dbc:	b108      	cbz	r0, 8004dc2 <HAL_RTC_Init+0xaa>
        prescaler = prescaler - 1U;
 8004dbe:	1e42      	subs	r2, r0, #1
 8004dc0:	e7db      	b.n	8004d7a <HAL_RTC_Init+0x62>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e7b5      	b.n	8004d36 <HAL_RTC_Init+0x1e>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dca:	2304      	movs	r3, #4
 8004dcc:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7b1      	b.n	8004d36 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4770      	bx	lr
 8004dd8:	40006c00 	.word	0x40006c00

08004ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	6a03      	ldr	r3, [r0, #32]
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dea:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	680d      	ldr	r5, [r1, #0]
 8004df2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfa:	688b      	ldr	r3, [r1, #8]
 8004dfc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <TIM_OC1_SetConfig+0x58>)
 8004e00:	42a8      	cmp	r0, r5
 8004e02:	d009      	beq.n	8004e18 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	4d0b      	ldr	r5, [pc, #44]	; (8004e34 <TIM_OC1_SetConfig+0x58>)
 8004e06:	42a8      	cmp	r0, r5
 8004e08:	d00d      	beq.n	8004e26 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e0c:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0e:	684a      	ldr	r2, [r1, #4]
 8004e10:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	6203      	str	r3, [r0, #32]
}
 8004e14:	bc70      	pop	{r4, r5, r6}
 8004e16:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004e1c:	68cc      	ldr	r4, [r1, #12]
 8004e1e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	e7ee      	b.n	8004e04 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004e2a:	694c      	ldr	r4, [r1, #20]
 8004e2c:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e2e:	698a      	ldr	r2, [r1, #24]
 8004e30:	4322      	orrs	r2, r4
 8004e32:	e7ea      	b.n	8004e0a <TIM_OC1_SetConfig+0x2e>
 8004e34:	40012c00 	.word	0x40012c00

08004e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e3a:	6a03      	ldr	r3, [r0, #32]
 8004e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e48:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	680d      	ldr	r5, [r1, #0]
 8004e4e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e54:	688d      	ldr	r5, [r1, #8]
 8004e56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e5a:	4d0f      	ldr	r5, [pc, #60]	; (8004e98 <TIM_OC3_SetConfig+0x60>)
 8004e5c:	42a8      	cmp	r0, r5
 8004e5e:	d009      	beq.n	8004e74 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e60:	4d0d      	ldr	r5, [pc, #52]	; (8004e98 <TIM_OC3_SetConfig+0x60>)
 8004e62:	42a8      	cmp	r0, r5
 8004e64:	d00e      	beq.n	8004e84 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e68:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e6a:	684a      	ldr	r2, [r1, #4]
 8004e6c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	6203      	str	r3, [r0, #32]
}
 8004e70:	bc30      	pop	{r4, r5}
 8004e72:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e78:	68cd      	ldr	r5, [r1, #12]
 8004e7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e82:	e7ed      	b.n	8004e60 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e88:	694d      	ldr	r5, [r1, #20]
 8004e8a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8e:	698d      	ldr	r5, [r1, #24]
 8004e90:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004e94:	e7e7      	b.n	8004e66 <TIM_OC3_SetConfig+0x2e>
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00

08004e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e9e:	6a03      	ldr	r3, [r0, #32]
 8004ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eaa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	680d      	ldr	r5, [r1, #0]
 8004eb2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eba:	688d      	ldr	r5, [r1, #8]
 8004ebc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec0:	4d07      	ldr	r5, [pc, #28]	; (8004ee0 <TIM_OC4_SetConfig+0x44>)
 8004ec2:	42a8      	cmp	r0, r5
 8004ec4:	d006      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eca:	684a      	ldr	r2, [r1, #4]
 8004ecc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	6203      	str	r3, [r0, #32]
}
 8004ed0:	bc30      	pop	{r4, r5}
 8004ed2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed8:	694d      	ldr	r5, [r1, #20]
 8004eda:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004ede:	e7f2      	b.n	8004ec6 <TIM_OC4_SetConfig+0x2a>
 8004ee0:	40012c00 	.word	0x40012c00

08004ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee8:	6a04      	ldr	r4, [r0, #32]
 8004eea:	f024 0401 	bic.w	r4, r4, #1
 8004eee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004efe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f02:	6203      	str	r3, [r0, #32]
}
 8004f04:	bc10      	pop	{r4}
 8004f06:	4770      	bx	lr

08004f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0a:	6a03      	ldr	r3, [r0, #32]
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004f14:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f16:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f22:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f26:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f28:	6203      	str	r3, [r0, #32]
}
 8004f2a:	bc10      	pop	{r4}
 8004f2c:	4770      	bx	lr

08004f2e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f2e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f34:	4319      	orrs	r1, r3
 8004f36:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	6081      	str	r1, [r0, #8]
}
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004f40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_Base_Start+0xe>
    return HAL_ERROR;
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	6803      	ldr	r3, [r0, #0]
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <HAL_TIM_Base_Start+0x58>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d010      	beq.n	8004f7e <HAL_TIM_Base_Start+0x3e>
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d00d      	beq.n	8004f7e <HAL_TIM_Base_Start+0x3e>
 8004f62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_TIM_Base_Start+0x3e>
 8004f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d005      	beq.n	8004f7e <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	2a06      	cmp	r2, #6
 8004f86:	d005      	beq.n	8004f94 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f90:	2000      	movs	r0, #0
 8004f92:	4770      	bx	lr
 8004f94:	2000      	movs	r0, #0
}
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00

08004f9c <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8004f9c:	6803      	ldr	r3, [r0, #0]
 8004f9e:	6a19      	ldr	r1, [r3, #32]
 8004fa0:	f241 1211 	movw	r2, #4369	; 0x1111
 8004fa4:	4211      	tst	r1, r2
 8004fa6:	d108      	bne.n	8004fba <HAL_TIM_Base_Stop+0x1e>
 8004fa8:	6a19      	ldr	r1, [r3, #32]
 8004faa:	f240 4244 	movw	r2, #1092	; 0x444
 8004fae:	4211      	tst	r1, r2
 8004fb0:	d103      	bne.n	8004fba <HAL_TIM_Base_Stop+0x1e>
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004fc4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <TIM_Base_SetConfig+0x70>)
 8004fc8:	4290      	cmp	r0, r2
 8004fca:	d00a      	beq.n	8004fe2 <TIM_Base_SetConfig+0x1e>
 8004fcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004fd0:	d007      	beq.n	8004fe2 <TIM_Base_SetConfig+0x1e>
 8004fd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004fd6:	4290      	cmp	r0, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_Base_SetConfig+0x1e>
 8004fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fde:	4290      	cmp	r0, r2
 8004fe0:	d103      	bne.n	8004fea <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fe6:	684a      	ldr	r2, [r1, #4]
 8004fe8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <TIM_Base_SetConfig+0x70>)
 8004fec:	4290      	cmp	r0, r2
 8004fee:	d00a      	beq.n	8005006 <TIM_Base_SetConfig+0x42>
 8004ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x42>
 8004ff6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x42>
 8004ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005002:	4290      	cmp	r0, r2
 8005004:	d103      	bne.n	800500e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	68ca      	ldr	r2, [r1, #12]
 800500c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800500e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005012:	694a      	ldr	r2, [r1, #20]
 8005014:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005016:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	688b      	ldr	r3, [r1, #8]
 800501a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800501c:	680b      	ldr	r3, [r1, #0]
 800501e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <TIM_Base_SetConfig+0x70>)
 8005022:	4298      	cmp	r0, r3
 8005024:	d002      	beq.n	800502c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8005026:	2301      	movs	r3, #1
 8005028:	6143      	str	r3, [r0, #20]
}
 800502a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800502c:	690b      	ldr	r3, [r1, #16]
 800502e:	6303      	str	r3, [r0, #48]	; 0x30
 8005030:	e7f9      	b.n	8005026 <TIM_Base_SetConfig+0x62>
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00

08005038 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005038:	b338      	cbz	r0, 800508a <HAL_TIM_Base_Init+0x52>
{
 800503a:	b510      	push	{r4, lr}
 800503c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005042:	b1eb      	cbz	r3, 8005080 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	2302      	movs	r3, #2
 8005046:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	1d21      	adds	r1, r4, #4
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	f7ff ffb9 	bl	8004fc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	2301      	movs	r3, #1
 8005054:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800505c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005060:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005064:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800506c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005078:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800507c:	2000      	movs	r0, #0
}
 800507e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005080:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005084:	f001 f8b2 	bl	80061ec <HAL_TIM_Base_MspInit>
 8005088:	e7dc      	b.n	8005044 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800508a:	2001      	movs	r0, #1
}
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800508e:	b338      	cbz	r0, 80050e0 <HAL_TIM_PWM_Init+0x52>
{
 8005090:	b510      	push	{r4, lr}
 8005092:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005094:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005098:	b1eb      	cbz	r3, 80050d6 <HAL_TIM_PWM_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800509a:	2302      	movs	r3, #2
 800509c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	1d21      	adds	r1, r4, #4
 80050a2:	6820      	ldr	r0, [r4, #0]
 80050a4:	f7ff ff8e 	bl	8004fc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80050ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80050d2:	2000      	movs	r0, #0
}
 80050d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80050d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80050da:	f001 f89d 	bl	8006218 <HAL_TIM_PWM_MspInit>
 80050de:	e7dc      	b.n	800509a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
}
 80050e2:	4770      	bx	lr

080050e4 <TIM_OC2_SetConfig>:
{
 80050e4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e6:	6a03      	ldr	r3, [r0, #32]
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80050ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80050f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80050f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	680d      	ldr	r5, [r1, #0]
 80050fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80050fe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005102:	688d      	ldr	r5, [r1, #8]
 8005104:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005108:	4d0e      	ldr	r5, [pc, #56]	; (8005144 <TIM_OC2_SetConfig+0x60>)
 800510a:	42a8      	cmp	r0, r5
 800510c:	d009      	beq.n	8005122 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	4d0d      	ldr	r5, [pc, #52]	; (8005144 <TIM_OC2_SetConfig+0x60>)
 8005110:	42a8      	cmp	r0, r5
 8005112:	d00e      	beq.n	8005132 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005114:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005116:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005118:	684a      	ldr	r2, [r1, #4]
 800511a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800511c:	6203      	str	r3, [r0, #32]
}
 800511e:	bc30      	pop	{r4, r5}
 8005120:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005126:	68cd      	ldr	r5, [r1, #12]
 8005128:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005130:	e7ed      	b.n	800510e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005132:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005136:	694d      	ldr	r5, [r1, #20]
 8005138:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800513c:	698d      	ldr	r5, [r1, #24]
 800513e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005142:	e7e7      	b.n	8005114 <TIM_OC2_SetConfig+0x30>
 8005144:	40012c00 	.word	0x40012c00

08005148 <HAL_TIM_PWM_ConfigChannel>:
{
 8005148:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800514a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d060      	beq.n	8005214 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8005152:	460d      	mov	r5, r1
 8005154:	4604      	mov	r4, r0
 8005156:	2301      	movs	r3, #1
 8005158:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800515c:	2a0c      	cmp	r2, #12
 800515e:	d81a      	bhi.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005160:	e8df f002 	tbb	[pc, r2]
 8005164:	19191907 	.word	0x19191907
 8005168:	1919191d 	.word	0x1919191d
 800516c:	19191931 	.word	0x19191931
 8005170:	44          	.byte	0x44
 8005171:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005172:	6800      	ldr	r0, [r0, #0]
 8005174:	f7ff fe32 	bl	8004ddc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	6993      	ldr	r3, [r2, #24]
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	6993      	ldr	r3, [r2, #24]
 8005186:	f023 0304 	bic.w	r3, r3, #4
 800518a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	6993      	ldr	r3, [r2, #24]
 8005190:	6929      	ldr	r1, [r5, #16]
 8005192:	430b      	orrs	r3, r1
 8005194:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8005196:	2000      	movs	r0, #0
 8005198:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800519c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800519e:	6800      	ldr	r0, [r0, #0]
 80051a0:	f7ff ffa0 	bl	80050e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	6993      	ldr	r3, [r2, #24]
 80051a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	6993      	ldr	r3, [r2, #24]
 80051b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	6993      	ldr	r3, [r2, #24]
 80051bc:	6929      	ldr	r1, [r5, #16]
 80051be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051c2:	6193      	str	r3, [r2, #24]
      break;
 80051c4:	e7e7      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051c6:	6800      	ldr	r0, [r0, #0]
 80051c8:	f7ff fe36 	bl	8004e38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	69d3      	ldr	r3, [r2, #28]
 80051d0:	f043 0308 	orr.w	r3, r3, #8
 80051d4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	69d3      	ldr	r3, [r2, #28]
 80051da:	f023 0304 	bic.w	r3, r3, #4
 80051de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051e0:	6822      	ldr	r2, [r4, #0]
 80051e2:	69d3      	ldr	r3, [r2, #28]
 80051e4:	6929      	ldr	r1, [r5, #16]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	61d3      	str	r3, [r2, #28]
      break;
 80051ea:	e7d4      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f7ff fe55 	bl	8004e9c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	69d3      	ldr	r3, [r2, #28]
 80051f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fc:	6822      	ldr	r2, [r4, #0]
 80051fe:	69d3      	ldr	r3, [r2, #28]
 8005200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005204:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	69d3      	ldr	r3, [r2, #28]
 800520a:	6929      	ldr	r1, [r5, #16]
 800520c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005210:	61d3      	str	r3, [r2, #28]
      break;
 8005212:	e7c0      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8005214:	2002      	movs	r0, #2
 8005216:	e7c1      	b.n	800519c <HAL_TIM_PWM_ConfigChannel+0x54>

08005218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005218:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005224:	430b      	orrs	r3, r1
 8005226:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005228:	6083      	str	r3, [r0, #8]
}
 800522a:	bc10      	pop	{r4}
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800522e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d066      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0xd6>
{
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800523a:	2301      	movs	r3, #1
 800523c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	2302      	movs	r3, #2
 8005242:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005246:	6802      	ldr	r2, [r0, #0]
 8005248:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005252:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005254:	680b      	ldr	r3, [r1, #0]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d04a      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xc2>
 800525a:	d913      	bls.n	8005284 <HAL_TIM_ConfigClockSource+0x56>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d03d      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0xae>
 8005260:	d91e      	bls.n	80052a0 <HAL_TIM_ConfigClockSource+0x72>
 8005262:	2b70      	cmp	r3, #112	; 0x70
 8005264:	d028      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x8a>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d130      	bne.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	68cb      	ldr	r3, [r1, #12]
 800526e:	684a      	ldr	r2, [r1, #4]
 8005270:	6889      	ldr	r1, [r1, #8]
 8005272:	6800      	ldr	r0, [r0, #0]
 8005274:	f7ff ffd0 	bl	8005218 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	6893      	ldr	r3, [r2, #8]
 800527c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005280:	6093      	str	r3, [r2, #8]
      break;
 8005282:	e024      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8005284:	2b10      	cmp	r3, #16
 8005286:	d006      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x68>
 8005288:	d904      	bls.n	8005294 <HAL_TIM_ConfigClockSource+0x66>
 800528a:	2b20      	cmp	r3, #32
 800528c:	d003      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x68>
 800528e:	2b30      	cmp	r3, #48	; 0x30
 8005290:	d001      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x68>
 8005292:	e01c      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
 8005294:	b9db      	cbnz	r3, 80052ce <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005296:	4619      	mov	r1, r3
 8005298:	6820      	ldr	r0, [r4, #0]
 800529a:	f7ff fe48 	bl	8004f2e <TIM_ITRx_SetConfig>
        break;
 800529e:	e016      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80052a0:	2b50      	cmp	r3, #80	; 0x50
 80052a2:	d114      	bne.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a4:	68ca      	ldr	r2, [r1, #12]
 80052a6:	6849      	ldr	r1, [r1, #4]
 80052a8:	6800      	ldr	r0, [r0, #0]
 80052aa:	f7ff fe1b 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ae:	2150      	movs	r1, #80	; 0x50
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	f7ff fe3c 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80052b6:	e00a      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	68cb      	ldr	r3, [r1, #12]
 80052ba:	684a      	ldr	r2, [r1, #4]
 80052bc:	6889      	ldr	r1, [r1, #8]
 80052be:	6800      	ldr	r0, [r0, #0]
 80052c0:	f7ff ffaa 	bl	8005218 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80052cc:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80052da:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052dc:	68ca      	ldr	r2, [r1, #12]
 80052de:	6849      	ldr	r1, [r1, #4]
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f7ff fe11 	bl	8004f08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e6:	2160      	movs	r1, #96	; 0x60
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	f7ff fe20 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80052ee:	e7ee      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f0:	68ca      	ldr	r2, [r1, #12]
 80052f2:	6849      	ldr	r1, [r1, #4]
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	f7ff fdf5 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052fa:	2140      	movs	r1, #64	; 0x40
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	f7ff fe16 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8005302:	e7e4      	b.n	80052ce <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8005304:	2002      	movs	r0, #2
}
 8005306:	4770      	bx	lr

08005308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005308:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530a:	f001 011f 	and.w	r1, r1, #31
 800530e:	2301      	movs	r3, #1
 8005310:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005314:	6a03      	ldr	r3, [r0, #32]
 8005316:	ea23 0304 	bic.w	r3, r3, r4
 800531a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800531c:	6a03      	ldr	r3, [r0, #32]
 800531e:	408a      	lsls	r2, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	6203      	str	r3, [r0, #32]
}
 8005324:	bc10      	pop	{r4}
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005328:	460a      	mov	r2, r1
 800532a:	bb69      	cbnz	r1, 8005388 <HAL_TIM_PWM_Start+0x60>
 800532c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005336:	bf18      	it	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d160      	bne.n	8005400 <HAL_TIM_PWM_Start+0xd8>
{
 800533e:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005340:	2a00      	cmp	r2, #0
 8005342:	d13d      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x98>
 8005344:	2302      	movs	r3, #2
 8005346:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800534a:	4611      	mov	r1, r2
 800534c:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534e:	2201      	movs	r2, #1
 8005350:	6800      	ldr	r0, [r0, #0]
 8005352:	f7ff ffd9 	bl	8005308 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <HAL_TIM_PWM_Start+0xe0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_TIM_PWM_Start+0xe0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d041      	beq.n	80053ea <HAL_TIM_PWM_Start+0xc2>
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d03e      	beq.n	80053ea <HAL_TIM_PWM_Start+0xc2>
 800536c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005370:	4293      	cmp	r3, r2
 8005372:	d03a      	beq.n	80053ea <HAL_TIM_PWM_Start+0xc2>
 8005374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005378:	4293      	cmp	r3, r2
 800537a:	d036      	beq.n	80053ea <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005384:	2000      	movs	r0, #0
 8005386:	e03a      	b.n	80053fe <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005388:	2904      	cmp	r1, #4
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x78>
 800538c:	2908      	cmp	r1, #8
 800538e:	d00f      	beq.n	80053b0 <HAL_TIM_PWM_Start+0x88>
 8005390:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f113 33ff 	adds.w	r3, r3, #4294967295
 800539a:	bf18      	it	ne
 800539c:	2301      	movne	r3, #1
 800539e:	e7cc      	b.n	800533a <HAL_TIM_PWM_Start+0x12>
 80053a0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80053aa:	bf18      	it	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	e7c4      	b.n	800533a <HAL_TIM_PWM_Start+0x12>
 80053b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80053ba:	bf18      	it	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	e7bc      	b.n	800533a <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c0:	2a04      	cmp	r2, #4
 80053c2:	d005      	beq.n	80053d0 <HAL_TIM_PWM_Start+0xa8>
 80053c4:	2a08      	cmp	r2, #8
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_PWM_Start+0xb0>
 80053c8:	2302      	movs	r3, #2
 80053ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80053ce:	e7bc      	b.n	800534a <HAL_TIM_PWM_Start+0x22>
 80053d0:	2302      	movs	r3, #2
 80053d2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80053d6:	e7b8      	b.n	800534a <HAL_TIM_PWM_Start+0x22>
 80053d8:	2302      	movs	r3, #2
 80053da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80053de:	e7b4      	b.n	800534a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80053e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44
 80053e8:	e7b9      	b.n	800535e <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	2a06      	cmp	r2, #6
 80053f2:	d007      	beq.n	8005404 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80053fc:	2000      	movs	r0, #0
}
 80053fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005400:	2001      	movs	r0, #1
}
 8005402:	4770      	bx	lr
  return HAL_OK;
 8005404:	2000      	movs	r0, #0
 8005406:	e7fa      	b.n	80053fe <HAL_TIM_PWM_Start+0xd6>
 8005408:	40012c00 	.word	0x40012c00

0800540c <HAL_TIM_PWM_Stop>:
{
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4604      	mov	r4, r0
 8005410:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005412:	2200      	movs	r2, #0
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f7ff ff77 	bl	8005308 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_TIM_PWM_Stop+0x80>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d017      	beq.n	8005452 <HAL_TIM_PWM_Stop+0x46>
  __HAL_TIM_DISABLE(htim);
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	6a19      	ldr	r1, [r3, #32]
 8005426:	f241 1211 	movw	r2, #4369	; 0x1111
 800542a:	4211      	tst	r1, r2
 800542c:	d108      	bne.n	8005440 <HAL_TIM_PWM_Stop+0x34>
 800542e:	6a19      	ldr	r1, [r3, #32]
 8005430:	f240 4244 	movw	r2, #1092	; 0x444
 8005434:	4211      	tst	r1, r2
 8005436:	d103      	bne.n	8005440 <HAL_TIM_PWM_Stop+0x34>
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	b1b5      	cbz	r5, 8005470 <HAL_TIM_PWM_Stop+0x64>
 8005442:	2d04      	cmp	r5, #4
 8005444:	d019      	beq.n	800547a <HAL_TIM_PWM_Stop+0x6e>
 8005446:	2d08      	cmp	r5, #8
 8005448:	d01b      	beq.n	8005482 <HAL_TIM_PWM_Stop+0x76>
 800544a:	2301      	movs	r3, #1
 800544c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005450:	e011      	b.n	8005476 <HAL_TIM_PWM_Stop+0x6a>
    __HAL_TIM_MOE_DISABLE(htim);
 8005452:	6a19      	ldr	r1, [r3, #32]
 8005454:	f241 1211 	movw	r2, #4369	; 0x1111
 8005458:	4211      	tst	r1, r2
 800545a:	d1e2      	bne.n	8005422 <HAL_TIM_PWM_Stop+0x16>
 800545c:	6a19      	ldr	r1, [r3, #32]
 800545e:	f240 4244 	movw	r2, #1092	; 0x444
 8005462:	4211      	tst	r1, r2
 8005464:	d1dd      	bne.n	8005422 <HAL_TIM_PWM_Stop+0x16>
 8005466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
 800546e:	e7d8      	b.n	8005422 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	2301      	movs	r3, #1
 8005472:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005476:	2000      	movs	r0, #0
 8005478:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	2301      	movs	r3, #1
 800547c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005480:	e7f9      	b.n	8005476 <HAL_TIM_PWM_Stop+0x6a>
 8005482:	2301      	movs	r3, #1
 8005484:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005488:	e7f5      	b.n	8005476 <HAL_TIM_PWM_Stop+0x6a>
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00

08005490 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005490:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005492:	f001 011f 	and.w	r1, r1, #31
 8005496:	2304      	movs	r3, #4
 8005498:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800549c:	6a03      	ldr	r3, [r0, #32]
 800549e:	ea23 0304 	bic.w	r3, r3, r4
 80054a2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	408a      	lsls	r2, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	6203      	str	r3, [r0, #32]
}
 80054ac:	bc10      	pop	{r4}
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_PWMN_Start>:
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054b0:	460a      	mov	r2, r1
 80054b2:	bb71      	cbnz	r1, 8005512 <HAL_TIMEx_PWMN_Start+0x62>
 80054b4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f113 33ff 	adds.w	r3, r3, #4294967295
 80054be:	bf18      	it	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d15c      	bne.n	8005580 <HAL_TIMEx_PWMN_Start+0xd0>
{
 80054c6:	b510      	push	{r4, lr}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	d13e      	bne.n	800554a <HAL_TIMEx_PWMN_Start+0x9a>
 80054cc:	2302      	movs	r3, #2
 80054ce:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80054d2:	4611      	mov	r1, r2
 80054d4:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80054d6:	2204      	movs	r2, #4
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	f7ff ffd9 	bl	8005490 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	4a27      	ldr	r2, [pc, #156]	; (8005588 <HAL_TIMEx_PWMN_Start+0xd8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d03c      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0xba>
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d039      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0xba>
 80054f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d035      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0xba>
 80054fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005502:	4293      	cmp	r3, r2
 8005504:	d031      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800550e:	2000      	movs	r0, #0
 8005510:	e035      	b.n	800557e <HAL_TIMEx_PWMN_Start+0xce>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005512:	2904      	cmp	r1, #4
 8005514:	d009      	beq.n	800552a <HAL_TIMEx_PWMN_Start+0x7a>
 8005516:	2908      	cmp	r1, #8
 8005518:	d00f      	beq.n	800553a <HAL_TIMEx_PWMN_Start+0x8a>
 800551a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005524:	bf18      	it	ne
 8005526:	2301      	movne	r3, #1
 8005528:	e7cb      	b.n	80054c2 <HAL_TIMEx_PWMN_Start+0x12>
 800552a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005534:	bf18      	it	ne
 8005536:	2301      	movne	r3, #1
 8005538:	e7c3      	b.n	80054c2 <HAL_TIMEx_PWMN_Start+0x12>
 800553a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005544:	bf18      	it	ne
 8005546:	2301      	movne	r3, #1
 8005548:	e7bb      	b.n	80054c2 <HAL_TIMEx_PWMN_Start+0x12>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	2a04      	cmp	r2, #4
 800554c:	d005      	beq.n	800555a <HAL_TIMEx_PWMN_Start+0xaa>
 800554e:	2a08      	cmp	r2, #8
 8005550:	d007      	beq.n	8005562 <HAL_TIMEx_PWMN_Start+0xb2>
 8005552:	2302      	movs	r3, #2
 8005554:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8005558:	e7bb      	b.n	80054d2 <HAL_TIMEx_PWMN_Start+0x22>
 800555a:	2302      	movs	r3, #2
 800555c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8005560:	e7b7      	b.n	80054d2 <HAL_TIMEx_PWMN_Start+0x22>
 8005562:	2302      	movs	r3, #2
 8005564:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8005568:	e7b3      	b.n	80054d2 <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	2a06      	cmp	r2, #6
 8005572:	d007      	beq.n	8005584 <HAL_TIMEx_PWMN_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800557c:	2000      	movs	r0, #0
}
 800557e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005580:	2001      	movs	r0, #1
}
 8005582:	4770      	bx	lr
  return HAL_OK;
 8005584:	2000      	movs	r0, #0
 8005586:	e7fa      	b.n	800557e <HAL_TIMEx_PWMN_Start+0xce>
 8005588:	40012c00 	.word	0x40012c00

0800558c <HAL_TIMEx_PWMN_Stop>:
{
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4604      	mov	r4, r0
 8005590:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005592:	2200      	movs	r2, #0
 8005594:	6800      	ldr	r0, [r0, #0]
 8005596:	f7ff ff7b 	bl	8005490 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6a19      	ldr	r1, [r3, #32]
 800559e:	f241 1211 	movw	r2, #4369	; 0x1111
 80055a2:	4211      	tst	r1, r2
 80055a4:	d108      	bne.n	80055b8 <HAL_TIMEx_PWMN_Stop+0x2c>
 80055a6:	6a19      	ldr	r1, [r3, #32]
 80055a8:	f240 4244 	movw	r2, #1092	; 0x444
 80055ac:	4211      	tst	r1, r2
 80055ae:	d103      	bne.n	80055b8 <HAL_TIMEx_PWMN_Stop+0x2c>
 80055b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	6a19      	ldr	r1, [r3, #32]
 80055bc:	f241 1211 	movw	r2, #4369	; 0x1111
 80055c0:	4211      	tst	r1, r2
 80055c2:	d108      	bne.n	80055d6 <HAL_TIMEx_PWMN_Stop+0x4a>
 80055c4:	6a19      	ldr	r1, [r3, #32]
 80055c6:	f240 4244 	movw	r2, #1092	; 0x444
 80055ca:	4211      	tst	r1, r2
 80055cc:	d103      	bne.n	80055d6 <HAL_TIMEx_PWMN_Stop+0x4a>
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	b13d      	cbz	r5, 80055e8 <HAL_TIMEx_PWMN_Stop+0x5c>
 80055d8:	2d04      	cmp	r5, #4
 80055da:	d00a      	beq.n	80055f2 <HAL_TIMEx_PWMN_Stop+0x66>
 80055dc:	2d08      	cmp	r5, #8
 80055de:	d00c      	beq.n	80055fa <HAL_TIMEx_PWMN_Stop+0x6e>
 80055e0:	2301      	movs	r3, #1
 80055e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055e6:	e002      	b.n	80055ee <HAL_TIMEx_PWMN_Stop+0x62>
 80055e8:	2301      	movs	r3, #1
 80055ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80055ee:	2000      	movs	r0, #0
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	2301      	movs	r3, #1
 80055f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f8:	e7f9      	b.n	80055ee <HAL_TIMEx_PWMN_Stop+0x62>
 80055fa:	2301      	movs	r3, #1
 80055fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005600:	e7f5      	b.n	80055ee <HAL_TIMEx_PWMN_Stop+0x62>
	...

08005604 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8005604:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d02b      	beq.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800560c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800560e:	2301      	movs	r3, #1
 8005610:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	2302      	movs	r3, #2
 8005616:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800561a:	6803      	ldr	r3, [r0, #0]
 800561c:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800561e:	689d      	ldr	r5, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005620:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005624:	680a      	ldr	r2, [r1, #0]
 8005626:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8005628:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	6803      	ldr	r3, [r0, #0]
 800562c:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00a      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d007      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005638:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005640:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005644:	4293      	cmp	r3, r2
 8005646:	d104      	bne.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005648:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564c:	684a      	ldr	r2, [r1, #4]
 800564e:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 8005650:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005652:	2301      	movs	r3, #1
 8005654:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005658:	2300      	movs	r3, #0
 800565a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800565e:	4618      	mov	r0, r3
}
 8005660:	bc30      	pop	{r4, r5}
 8005662:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005664:	2002      	movs	r0, #2
}
 8005666:	4770      	bx	lr
 8005668:	40012c00 	.word	0x40012c00

0800566c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800566c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d022      	beq.n	80056ba <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005674:	2301      	movs	r3, #1
 8005676:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800567a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	688a      	ldr	r2, [r1, #8]
 8005682:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005688:	684a      	ldr	r2, [r1, #4]
 800568a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800568c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005690:	680a      	ldr	r2, [r1, #0]
 8005692:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005698:	690a      	ldr	r2, [r1, #16]
 800569a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800569c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a0:	694a      	ldr	r2, [r1, #20]
 80056a2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a8:	69ca      	ldr	r2, [r1, #28]
 80056aa:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 80056ac:	6802      	ldr	r2, [r0, #0]
 80056ae:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80056b0:	2300      	movs	r3, #0
 80056b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80056b6:	4618      	mov	r0, r3
 80056b8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80056ba:	2002      	movs	r0, #2
}
 80056bc:	4770      	bx	lr
	...

080056c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80056c0:	b500      	push	{lr}
 80056c2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80056c4:	2300      	movs	r3, #0
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	9303      	str	r3, [sp, #12]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80056cc:	481e      	ldr	r0, [pc, #120]	; (8005748 <MX_ADC1_Init+0x88>)
 80056ce:	4a1f      	ldr	r2, [pc, #124]	; (800574c <MX_ADC1_Init+0x8c>)
 80056d0:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80056d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d6:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80056d8:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80056da:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80056dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056e0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056e2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80056e4:	2303      	movs	r3, #3
 80056e6:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056e8:	f7fc fcf0 	bl	80020cc <HAL_ADC_Init>
 80056ec:	bb00      	cbnz	r0, 8005730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80056f2:	2201      	movs	r2, #1
 80056f4:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80056f6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056f8:	a901      	add	r1, sp, #4
 80056fa:	4813      	ldr	r0, [pc, #76]	; (8005748 <MX_ADC1_Init+0x88>)
 80056fc:	f7fc fb4c 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8005700:	b9c8      	cbnz	r0, 8005736 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005702:	2301      	movs	r3, #1
 8005704:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005706:	2302      	movs	r3, #2
 8005708:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800570a:	a901      	add	r1, sp, #4
 800570c:	480e      	ldr	r0, [pc, #56]	; (8005748 <MX_ADC1_Init+0x88>)
 800570e:	f7fc fb43 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8005712:	b998      	cbnz	r0, 800573c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005714:	2310      	movs	r3, #16
 8005716:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005718:	2303      	movs	r3, #3
 800571a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800571c:	2307      	movs	r3, #7
 800571e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005720:	a901      	add	r1, sp, #4
 8005722:	4809      	ldr	r0, [pc, #36]	; (8005748 <MX_ADC1_Init+0x88>)
 8005724:	f7fc fb38 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8005728:	b958      	cbnz	r0, 8005742 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
  }

}
 800572a:	b005      	add	sp, #20
 800572c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005730:	f000 fc34 	bl	8005f9c <Error_Handler>
 8005734:	e7db      	b.n	80056ee <MX_ADC1_Init+0x2e>
    Error_Handler();
 8005736:	f000 fc31 	bl	8005f9c <Error_Handler>
 800573a:	e7e2      	b.n	8005702 <MX_ADC1_Init+0x42>
    Error_Handler();
 800573c:	f000 fc2e 	bl	8005f9c <Error_Handler>
 8005740:	e7e8      	b.n	8005714 <MX_ADC1_Init+0x54>
    Error_Handler();
 8005742:	f000 fc2b 	bl	8005f9c <Error_Handler>
}
 8005746:	e7f0      	b.n	800572a <MX_ADC1_Init+0x6a>
 8005748:	200004e8 	.word	0x200004e8
 800574c:	40012400 	.word	0x40012400

08005750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005750:	b510      	push	{r4, lr}
 8005752:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	2300      	movs	r3, #0
 8005756:	9302      	str	r3, [sp, #8]
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 800575e:	6802      	ldr	r2, [r0, #0]
 8005760:	4b22      	ldr	r3, [pc, #136]	; (80057ec <HAL_ADC_MspInit+0x9c>)
 8005762:	429a      	cmp	r2, r3
 8005764:	d001      	beq.n	800576a <HAL_ADC_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005766:	b006      	add	sp, #24
 8005768:	bd10      	pop	{r4, pc}
 800576a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800576c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005776:	619a      	str	r2, [r3, #24]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800577e:	9200      	str	r2, [sp, #0]
 8005780:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	f042 0204 	orr.w	r2, r2, #4
 8005788:	619a      	str	r2, [r3, #24]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VM_Pin|IM_Pin;
 8005794:	2303      	movs	r3, #3
 8005796:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005798:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579a:	a902      	add	r1, sp, #8
 800579c:	4814      	ldr	r0, [pc, #80]	; (80057f0 <HAL_ADC_MspInit+0xa0>)
 800579e:	f7fc ff77 	bl	8002690 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80057a2:	4814      	ldr	r0, [pc, #80]	; (80057f4 <HAL_ADC_MspInit+0xa4>)
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_ADC_MspInit+0xa8>)
 80057a6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057a8:	2300      	movs	r3, #0
 80057aa:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ac:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057bc:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80057be:	2320      	movs	r3, #32
 80057c0:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80057c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057c6:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80057c8:	f7fc fe00 	bl	80023cc <HAL_DMA_Init>
 80057cc:	b958      	cbnz	r0, 80057e6 <HAL_ADC_MspInit+0x96>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_ADC_MspInit+0xa4>)
 80057d0:	6223      	str	r3, [r4, #32]
 80057d2:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80057d4:	2200      	movs	r2, #0
 80057d6:	2101      	movs	r1, #1
 80057d8:	2012      	movs	r0, #18
 80057da:	f7fc fd89 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80057de:	2012      	movs	r0, #18
 80057e0:	f7fc fdba 	bl	8002358 <HAL_NVIC_EnableIRQ>
}
 80057e4:	e7bf      	b.n	8005766 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80057e6:	f000 fbd9 	bl	8005f9c <Error_Handler>
 80057ea:	e7f0      	b.n	80057ce <HAL_ADC_MspInit+0x7e>
 80057ec:	40012400 	.word	0x40012400
 80057f0:	40010800 	.word	0x40010800
 80057f4:	20000518 	.word	0x20000518
 80057f8:	40020008 	.word	0x40020008

080057fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80057fc:	b500      	push	{lr}
 80057fe:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005800:	4b0e      	ldr	r3, [pc, #56]	; (800583c <MX_DMA_Init+0x40>)
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	2101      	movs	r1, #1
 8005818:	200b      	movs	r0, #11
 800581a:	f7fc fd69 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800581e:	200b      	movs	r0, #11
 8005820:	f7fc fd9a 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	4611      	mov	r1, r2
 8005828:	2010      	movs	r0, #16
 800582a:	f7fc fd61 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800582e:	2010      	movs	r0, #16
 8005830:	f7fc fd92 	bl	8002358 <HAL_NVIC_EnableIRQ>

}
 8005834:	b003      	add	sp, #12
 8005836:	f85d fb04 	ldr.w	pc, [sp], #4
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000

08005840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005844:	2400      	movs	r4, #0
 8005846:	9404      	str	r4, [sp, #16]
 8005848:	9405      	str	r4, [sp, #20]
 800584a:	9406      	str	r4, [sp, #24]
 800584c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800584e:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <MX_GPIO_Init+0x80>)
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	f042 0220 	orr.w	r2, r2, #32
 8005856:	619a      	str	r2, [r3, #24]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	f002 0220 	and.w	r2, r2, #32
 800585e:	9201      	str	r2, [sp, #4]
 8005860:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	f042 0204 	orr.w	r2, r2, #4
 8005868:	619a      	str	r2, [r3, #24]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	f002 0204 	and.w	r2, r2, #4
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	f042 0208 	orr.w	r2, r2, #8
 800587a:	619a      	str	r2, [r3, #24]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	9303      	str	r3, [sp, #12]
 8005884:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYSCLK_Pin|TEST1_Pin|TEST_Pin, GPIO_PIN_RESET);
 8005886:	4d0f      	ldr	r5, [pc, #60]	; (80058c4 <MX_GPIO_Init+0x84>)
 8005888:	4622      	mov	r2, r4
 800588a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800588e:	4628      	mov	r0, r5
 8005890:	f7fc ffea 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BPUSH_Pin|BPULL_Pin|BCFG_Pin;
 8005894:	231c      	movs	r3, #28
 8005896:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005898:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800589a:	2601      	movs	r6, #1
 800589c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589e:	a904      	add	r1, sp, #16
 80058a0:	4628      	mov	r0, r5
 80058a2:	f7fc fef5 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SYSCLK_Pin|TEST1_Pin|TEST_Pin;
 80058a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80058aa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058ac:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058b0:	2303      	movs	r3, #3
 80058b2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b4:	a904      	add	r1, sp, #16
 80058b6:	4628      	mov	r0, r5
 80058b8:	f7fc feea 	bl	8002690 <HAL_GPIO_Init>

}
 80058bc:	b008      	add	sp, #32
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40010800 	.word	0x40010800

080058c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80058c8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80058ca:	480b      	ldr	r0, [pc, #44]	; (80058f8 <MX_I2C1_Init+0x30>)
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <MX_I2C1_Init+0x34>)
 80058ce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <MX_I2C1_Init+0x38>)
 80058d2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80058d4:	2300      	movs	r3, #0
 80058d6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80058d8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058de:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058e0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80058e2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058e4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058e6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058e8:	f7fd fafa 	bl	8002ee0 <HAL_I2C_Init>
 80058ec:	b900      	cbnz	r0, 80058f0 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }

}
 80058ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80058f0:	f000 fb54 	bl	8005f9c <Error_Handler>
}
 80058f4:	e7fb      	b.n	80058ee <MX_I2C1_Init+0x26>
 80058f6:	bf00      	nop
 80058f8:	200005a0 	.word	0x200005a0
 80058fc:	40005400 	.word	0x40005400
 8005900:	00061a80 	.word	0x00061a80

08005904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005904:	b530      	push	{r4, r5, lr}
 8005906:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005908:	2300      	movs	r3, #0
 800590a:	9302      	str	r3, [sp, #8]
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 8005912:	6802      	ldr	r2, [r0, #0]
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_I2C_MspInit+0x98>)
 8005916:	429a      	cmp	r2, r3
 8005918:	d001      	beq.n	800591e <HAL_I2C_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800591a:	b007      	add	sp, #28
 800591c:	bd30      	pop	{r4, r5, pc}
 800591e:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005920:	4d1f      	ldr	r5, [pc, #124]	; (80059a0 <HAL_I2C_MspInit+0x9c>)
 8005922:	69ab      	ldr	r3, [r5, #24]
 8005924:	f043 0308 	orr.w	r3, r3, #8
 8005928:	61ab      	str	r3, [r5, #24]
 800592a:	69ab      	ldr	r3, [r5, #24]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005934:	23c0      	movs	r3, #192	; 0xc0
 8005936:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005938:	2312      	movs	r3, #18
 800593a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800593c:	2303      	movs	r3, #3
 800593e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005940:	a902      	add	r1, sp, #8
 8005942:	4818      	ldr	r0, [pc, #96]	; (80059a4 <HAL_I2C_MspInit+0xa0>)
 8005944:	f7fc fea4 	bl	8002690 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005948:	69eb      	ldr	r3, [r5, #28]
 800594a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800594e:	61eb      	str	r3, [r5, #28]
 8005950:	69eb      	ldr	r3, [r5, #28]
 8005952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800595a:	4813      	ldr	r0, [pc, #76]	; (80059a8 <HAL_I2C_MspInit+0xa4>)
 800595c:	4b13      	ldr	r3, [pc, #76]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 800595e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005960:	2310      	movs	r3, #16
 8005962:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005964:	2300      	movs	r3, #0
 8005966:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005968:	2280      	movs	r2, #128	; 0x80
 800596a:	60c2      	str	r2, [r0, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800596c:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800596e:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005970:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005976:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005978:	f7fc fd28 	bl	80023cc <HAL_DMA_Init>
 800597c:	b958      	cbnz	r0, 8005996 <HAL_I2C_MspInit+0x92>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_I2C_MspInit+0xa4>)
 8005980:	6363      	str	r3, [r4, #52]	; 0x34
 8005982:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8005984:	2200      	movs	r2, #0
 8005986:	2101      	movs	r1, #1
 8005988:	201f      	movs	r0, #31
 800598a:	f7fc fcb1 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800598e:	201f      	movs	r0, #31
 8005990:	f7fc fce2 	bl	8002358 <HAL_NVIC_EnableIRQ>
}
 8005994:	e7c1      	b.n	800591a <HAL_I2C_MspInit+0x16>
      Error_Handler();
 8005996:	f000 fb01 	bl	8005f9c <Error_Handler>
 800599a:	e7f0      	b.n	800597e <HAL_I2C_MspInit+0x7a>
 800599c:	40005400 	.word	0x40005400
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40010c00 	.word	0x40010c00
 80059a8:	2000055c 	.word	0x2000055c
 80059ac:	4002006c 	.word	0x4002006c

080059b0 <StopWaitingDueToPushBtnRelease>:
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}
uint8_t StopWaitingDueToPushBtnRelease(void){
 80059b0:	b500      	push	{lr}
 80059b2:	b083      	sub	sp, #12
	uint8_t PushBtnState;
	bbb_GetBtnStates(&PushBtnState, 0, 0);
 80059b4:	2200      	movs	r2, #0
 80059b6:	4611      	mov	r1, r2
 80059b8:	f10d 0007 	add.w	r0, sp, #7
 80059bc:	f7fb fbe0 	bl	8001180 <bbb_GetBtnStates>

	return !PushBtnState;
 80059c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80059c4:	fab0 f080 	clz	r0, r0
 80059c8:	0940      	lsrs	r0, r0, #5
 80059ca:	b003      	add	sp, #12
 80059cc:	f85d fb04 	ldr.w	pc, [sp], #4

080059d0 <StopWaitingDueToPullBtnRelease>:


uint8_t StopWaitingDueToPullBtnRelease(void){
 80059d0:	b500      	push	{lr}
 80059d2:	b083      	sub	sp, #12
	uint8_t PullBtnState;
	bbb_GetBtnStates(0, &PullBtnState, 0);
 80059d4:	2200      	movs	r2, #0
 80059d6:	f10d 0107 	add.w	r1, sp, #7
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fb fbd0 	bl	8001180 <bbb_GetBtnStates>

	return !PullBtnState;
 80059e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80059e4:	fab0 f080 	clz	r0, r0
 80059e8:	0940      	lsrs	r0, r0, #5
 80059ea:	b003      	add	sp, #12
 80059ec:	f85d fb04 	ldr.w	pc, [sp], #4

080059f0 <StopWaitingDueToAnyBtnPressed>:


uint8_t StopWaitingDueToAnyBtnPressed(void){
 80059f0:	b500      	push	{lr}
 80059f2:	b083      	sub	sp, #12
	uint8_t PushBtnState, PullBtnState, CfgBtnState;
	bbb_GetBtnStates(&PushBtnState, &PullBtnState, &CfgBtnState);
 80059f4:	f10d 0205 	add.w	r2, sp, #5
 80059f8:	f10d 0106 	add.w	r1, sp, #6
 80059fc:	f10d 0007 	add.w	r0, sp, #7
 8005a00:	f7fb fbbe 	bl	8001180 <bbb_GetBtnStates>
	return ( PushBtnState || PullBtnState || CfgBtnState);
 8005a04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a08:	b94b      	cbnz	r3, 8005a1e <StopWaitingDueToAnyBtnPressed+0x2e>
 8005a0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a0e:	b953      	cbnz	r3, 8005a26 <StopWaitingDueToAnyBtnPressed+0x36>
 8005a10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005a14:	b90b      	cbnz	r3, 8005a1a <StopWaitingDueToAnyBtnPressed+0x2a>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e002      	b.n	8005a20 <StopWaitingDueToAnyBtnPressed+0x30>
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	e000      	b.n	8005a20 <StopWaitingDueToAnyBtnPressed+0x30>
 8005a1e:	2001      	movs	r0, #1
}
 8005a20:	b003      	add	sp, #12
 8005a22:	f85d fb04 	ldr.w	pc, [sp], #4
	return ( PushBtnState || PullBtnState || CfgBtnState);
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7fa      	b.n	8005a20 <StopWaitingDueToAnyBtnPressed+0x30>

08005a2a <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a2e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005a32:	f013 0f01 	tst.w	r3, #1
 8005a36:	d011      	beq.n	8005a5c <__io_putchar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005a38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005a40:	f013 0f01 	tst.w	r3, #1
 8005a44:	d101      	bne.n	8005a4a <__io_putchar+0x20>
 8005a46:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8005a48:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005a4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f9      	beq.n	8005a48 <__io_putchar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005a54:	b2c3      	uxtb	r3, r0
 8005a56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a5a:	7013      	strb	r3, [r2, #0]
}
 8005a5c:	4770      	bx	lr
	...

08005a60 <InitTimers>:
/* The number of user timers is limited by the parent interrupt period.
   Optimally do not exceed 5% of the interruption period for operating
   the number of timers. */
void InitTimers()
{
	Timers[OneSec].Time = 1000; //Uses the named Timer in the timers field this is OneSec Timer
 8005a60:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <InitTimers+0x24>)
 8005a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a66:	801a      	strh	r2, [r3, #0]
	Timers[OneSec].Tick = 1000;
 8005a68:	805a      	strh	r2, [r3, #2]
	Timers[OneSec].Flag.Reload = 1;
 8005a6a:	791a      	ldrb	r2, [r3, #4]
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a70:	711a      	strb	r2, [r3, #4]
	Timers[Milis40].Time = 40;//Uses the named Timer in the timers field this is Milis40 Timer
 8005a72:	2228      	movs	r2, #40	; 0x28
 8005a74:	80da      	strh	r2, [r3, #6]
	Timers[Milis40].Tick = 40;
 8005a76:	811a      	strh	r2, [r3, #8]
	Timers[Milis40].Flag.Reload = 1;
 8005a78:	7a9a      	ldrb	r2, [r3, #10]
 8005a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a7e:	729a      	strb	r2, [r3, #10]
}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	200005f4 	.word	0x200005f4

08005a88 <TimerAction>:
/* Is called ideally in SysTick_Handler interrupt set to 1ms,
   but it can also be called by another periodic routine with a different period.
   Then it is necessary to set the correct value "Time" and "Tick" in "InitTimers()" */
void TimerAction(void)
{
	for(uint8_t i=0;i<(CountTimers);i++) //number of Timers is correct for this code implementation C
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d841      	bhi.n	8005b12 <TimerAction+0x8a>
{
 8005a8e:	b430      	push	{r4, r5}
 8005a90:	e01d      	b.n	8005ace <TimerAction+0x46>
	{
	   if(Timers[i].Time==0) continue;  //Time = 0 -> Timer is OFF
	   if(--Timers[i].Tick>0) continue;

	   if(Timers[i].Flag.Reload) Timers[i].Tick = Timers[i].Time; //reload timer count end refresh value
	   else Timers[i].Time=0; // Timer OFF
 8005a92:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005a96:	0042      	lsls	r2, r0, #1
 8005a98:	481e      	ldr	r0, [pc, #120]	; (8005b14 <TimerAction+0x8c>)
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	5284      	strh	r4, [r0, r2]

	   Timers[i].Flag.Over = 1; //Set Over
 8005a9e:	481d      	ldr	r0, [pc, #116]	; (8005b14 <TimerAction+0x8c>)
 8005aa0:	004d      	lsls	r5, r1, #1
 8005aa2:	186c      	adds	r4, r5, r1
 8005aa4:	0062      	lsls	r2, r4, #1
 8005aa6:	4402      	add	r2, r0
 8005aa8:	7914      	ldrb	r4, [r2, #4]
 8005aaa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8005aae:	7114      	strb	r4, [r2, #4]
	   Timers[i].Flag.OverCount++; //INC OverCount
 8005ab0:	7914      	ldrb	r4, [r2, #4]
 8005ab2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	4429      	add	r1, r5
 8005aba:	004a      	lsls	r2, r1, #1
 8005abc:	4402      	add	r2, r0
 8005abe:	7911      	ldrb	r1, [r2, #4]
 8005ac0:	f364 0105 	bfi	r1, r4, #0, #6
 8005ac4:	7111      	strb	r1, [r2, #4]
	for(uint8_t i=0;i<(CountTimers);i++) //number of Timers is correct for this code implementation C
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d81f      	bhi.n	8005b0e <TimerAction+0x86>
	   if(Timers[i].Time==0) continue;  //Time = 0 -> Timer is OFF
 8005ace:	4619      	mov	r1, r3
 8005ad0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8005ad4:	0042      	lsls	r2, r0, #1
 8005ad6:	480f      	ldr	r0, [pc, #60]	; (8005b14 <TimerAction+0x8c>)
 8005ad8:	5a82      	ldrh	r2, [r0, r2]
 8005ada:	b292      	uxth	r2, r2
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d0f2      	beq.n	8005ac6 <TimerAction+0x3e>
	   if(--Timers[i].Tick>0) continue;
 8005ae0:	005a      	lsls	r2, r3, #1
 8005ae2:	441a      	add	r2, r3
 8005ae4:	0054      	lsls	r4, r2, #1
 8005ae6:	4420      	add	r0, r4
 8005ae8:	8842      	ldrh	r2, [r0, #2]
 8005aea:	3a01      	subs	r2, #1
 8005aec:	b292      	uxth	r2, r2
 8005aee:	8042      	strh	r2, [r0, #2]
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	d1e8      	bne.n	8005ac6 <TimerAction+0x3e>
	   if(Timers[i].Flag.Reload) Timers[i].Tick = Timers[i].Time; //reload timer count end refresh value
 8005af4:	4620      	mov	r0, r4
 8005af6:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <TimerAction+0x8c>)
 8005af8:	4422      	add	r2, r4
 8005afa:	7912      	ldrb	r2, [r2, #4]
 8005afc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b00:	d0c7      	beq.n	8005a92 <TimerAction+0xa>
 8005b02:	4c04      	ldr	r4, [pc, #16]	; (8005b14 <TimerAction+0x8c>)
 8005b04:	1825      	adds	r5, r4, r0
 8005b06:	5a22      	ldrh	r2, [r4, r0]
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	806a      	strh	r2, [r5, #2]
 8005b0c:	e7c7      	b.n	8005a9e <TimerAction+0x16>
	}
}
 8005b0e:	bc30      	pop	{r4, r5}
 8005b10:	4770      	bx	lr
 8005b12:	4770      	bx	lr
 8005b14:	200005f4 	.word	0x200005f4

08005b18 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  I2C_DMA_Completed = 1;
 8005b18:	4b01      	ldr	r3, [pc, #4]	; (8005b20 <HAL_I2C_MemTxCpltCallback+0x8>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b1e:	4770      	bx	lr
 8005b20:	20000070 	.word	0x20000070

08005b24 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	uint32_t Error = hi2c->ErrorCode;
 8005b24:	6c03      	ldr	r3, [r0, #64]	; 0x40
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b26:	4770      	bx	lr

08005b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b28:	b530      	push	{r4, r5, lr}
 8005b2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b2c:	2400      	movs	r4, #0
 8005b2e:	940d      	str	r4, [sp, #52]	; 0x34
 8005b30:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b32:	9405      	str	r4, [sp, #20]
 8005b34:	9406      	str	r4, [sp, #24]
 8005b36:	9407      	str	r4, [sp, #28]
 8005b38:	9408      	str	r4, [sp, #32]
 8005b3a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b3c:	9401      	str	r4, [sp, #4]
 8005b3e:	9402      	str	r4, [sp, #8]
 8005b40:	9403      	str	r4, [sp, #12]
 8005b42:	9404      	str	r4, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005b44:	2309      	movs	r3, #9
 8005b46:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b4c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8005b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b52:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b54:	2201      	movs	r2, #1
 8005b56:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005b58:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b5a:	2502      	movs	r5, #2
 8005b5c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b5e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005b60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005b64:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b66:	a80a      	add	r0, sp, #40	; 0x28
 8005b68:	f7fe faf2 	bl	8004150 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b6c:	230f      	movs	r3, #15
 8005b6e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b70:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b72:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b78:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b7a:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	a805      	add	r0, sp, #20
 8005b80:	f7fe fd2c 	bl	80045dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8005b84:	2303      	movs	r3, #3
 8005b86:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b8c:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b94:	a801      	add	r0, sp, #4
 8005b96:	f7fe fdfb 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005b9a:	b015      	add	sp, #84	; 0x54
 8005b9c:	bd30      	pop	{r4, r5, pc}
	...

08005ba0 <main>:
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b083      	sub	sp, #12
  HAL_Init();
 8005ba4:	f7fb fffc 	bl	8001ba0 <HAL_Init>
  SystemClock_Config();
 8005ba8:	f7ff ffbe 	bl	8005b28 <SystemClock_Config>
  MX_GPIO_Init();
 8005bac:	f7ff fe48 	bl	8005840 <MX_GPIO_Init>
  MX_DMA_Init();
 8005bb0:	f7ff fe24 	bl	80057fc <MX_DMA_Init>
  MX_ADC1_Init();
 8005bb4:	f7ff fd84 	bl	80056c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005bb8:	f7ff fe86 	bl	80058c8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005bbc:	f000 fb90 	bl	80062e0 <MX_TIM3_Init>
  MX_RTC_Init();
 8005bc0:	f000 f9ee 	bl	8005fa0 <MX_RTC_Init>
  MX_TIM1_Init();
 8005bc4:	f000 fbea 	bl	800639c <MX_TIM1_Init>
  InitTimers();
 8005bc8:	f7ff ff4a 	bl	8005a60 <InitTimers>
  meas_Init();
 8005bcc:	f7fb fd5a 	bl	8001684 <meas_Init>
  bbb_Init();
 8005bd0:	f7fb fa54 	bl	800107c <bbb_Init>
  SSD1306_Init();  // initialise
 8005bd4:	f7fb ff1a 	bl	8001a0c <SSD1306_Init>
  disp_DrawInitScreen();
 8005bd8:	f7fb fba2 	bl	8001320 <disp_DrawInitScreen>
  mo_SetSpeed(PWMPulse(29.6)); //set speed 35.6%
 8005bdc:	48b7      	ldr	r0, [pc, #732]	; (8005ebc <main+0x31c>)
 8005bde:	f000 faeb 	bl	80061b8 <PWMPulse>
 8005be2:	f7fb fdc3 	bl	800176c <mo_SetSpeed>
  HAL_Delay(3000);
 8005be6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005bea:	f7fb fffd 	bl	8001be8 <HAL_Delay>
  bbb_Melody3(bbb_ToneTd_Low, bbb_ToneTd_Med, bbb_ToneTd_High, 2*BEEPDUR);
 8005bee:	2364      	movs	r3, #100	; 0x64
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	f7fb fb3f 	bl	8001278 <bbb_Melody3>
  bbb_WaitSync(900);
 8005bfa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005bfe:	f7fb faf5 	bl	80011ec <bbb_WaitSync>
	uint32_t ConfigWindowTimestamp = 0;
 8005c02:	2400      	movs	r4, #0
	  HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
 8005c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c08:	48ad      	ldr	r0, [pc, #692]	; (8005ec0 <main+0x320>)
 8005c0a:	f7fc fe33 	bl	8002874 <HAL_GPIO_TogglePin>
		if(Timers[OneSec].Flag.Over) Timers[OneSec].Flag.Over = 0; //ReSet Over
 8005c0e:	4bad      	ldr	r3, [pc, #692]	; (8005ec4 <main+0x324>)
 8005c10:	791b      	ldrb	r3, [r3, #4]
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	d004      	beq.n	8005c20 <main+0x80>
 8005c16:	4aab      	ldr	r2, [pc, #684]	; (8005ec4 <main+0x324>)
 8005c18:	7913      	ldrb	r3, [r2, #4]
 8005c1a:	f36f 13c7 	bfc	r3, #7, #1
 8005c1e:	7113      	strb	r3, [r2, #4]
		if(Timers[Milis40].Flag.Over) {
 8005c20:	4ba8      	ldr	r3, [pc, #672]	; (8005ec4 <main+0x324>)
 8005c22:	7a9b      	ldrb	r3, [r3, #10]
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	d139      	bne.n	8005c9c <main+0xfc>
		if(Speed==0)//Motor off, measure IM not need, but VBat+CPUTemp is need start manually
 8005c28:	4ba7      	ldr	r3, [pc, #668]	; (8005ec8 <main+0x328>)
 8005c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03f      	beq.n	8005cb2 <main+0x112>
		if(CountMeasure>=AVGLOOPMAX) // calculate all thermo an print them
 8005c32:	4ba6      	ldr	r3, [pc, #664]	; (8005ecc <main+0x32c>)
 8005c34:	7818      	ldrb	r0, [r3, #0]
 8005c36:	2809      	cmp	r0, #9
 8005c38:	d919      	bls.n	8005c6e <main+0xce>
			VBat = AvVBat/CountMeasure;
 8005c3a:	f7fa ffdf 	bl	8000bfc <__aeabi_i2f>
 8005c3e:	4607      	mov	r7, r0
 8005c40:	4ea3      	ldr	r6, [pc, #652]	; (8005ed0 <main+0x330>)
 8005c42:	4601      	mov	r1, r0
 8005c44:	6830      	ldr	r0, [r6, #0]
 8005c46:	f7fb f8e1 	bl	8000e0c <__aeabi_fdiv>
 8005c4a:	4ba2      	ldr	r3, [pc, #648]	; (8005ed4 <main+0x334>)
 8005c4c:	6018      	str	r0, [r3, #0]
			Temp = AvTemp/CountMeasure;
 8005c4e:	4da2      	ldr	r5, [pc, #648]	; (8005ed8 <main+0x338>)
 8005c50:	4639      	mov	r1, r7
 8005c52:	6828      	ldr	r0, [r5, #0]
 8005c54:	f7fb f8da 	bl	8000e0c <__aeabi_fdiv>
 8005c58:	4ba0      	ldr	r3, [pc, #640]	; (8005edc <main+0x33c>)
 8005c5a:	6018      	str	r0, [r3, #0]
			CountMeasure = 0;
 8005c5c:	4b9b      	ldr	r3, [pc, #620]	; (8005ecc <main+0x32c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
			RedrawRequested=1; AvVBat=0;AvTemp=0;
 8005c62:	4b9f      	ldr	r3, [pc, #636]	; (8005ee0 <main+0x340>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	602b      	str	r3, [r5, #0]
		if(RedrawRequested && I2C_DMA_Completed){
 8005c6e:	4b9c      	ldr	r3, [pc, #624]	; (8005ee0 <main+0x340>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b113      	cbz	r3, 8005c7a <main+0xda>
 8005c74:	4b9b      	ldr	r3, [pc, #620]	; (8005ee4 <main+0x344>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	bb0b      	cbnz	r3, 8005cbe <main+0x11e>
		  if(bbb_Update()){																	//Check whether any button has been pressed or released
 8005c7a:	f7fb fa01 	bl	8001080 <bbb_Update>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d147      	bne.n	8005d12 <main+0x172>
		  if(ConfigWindowTimestamp && HAL_GetTick() > ConfigWindowTimestamp){
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d0be      	beq.n	8005c04 <main+0x64>
 8005c86:	f7fb ffa9 	bl	8001bdc <HAL_GetTick>
 8005c8a:	42a0      	cmp	r0, r4
 8005c8c:	d9ba      	bls.n	8005c04 <main+0x64>
			  CfgMode = disp_CfgModeTd_None;
 8005c8e:	2400      	movs	r4, #0
 8005c90:	4b95      	ldr	r3, [pc, #596]	; (8005ee8 <main+0x348>)
 8005c92:	701c      	strb	r4, [r3, #0]
			  RedrawRequested = 1;
 8005c94:	4b92      	ldr	r3, [pc, #584]	; (8005ee0 <main+0x340>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e7b3      	b.n	8005c04 <main+0x64>
			Timers[Milis40].Flag.Over = 0; //ReSet Over
 8005c9c:	4a89      	ldr	r2, [pc, #548]	; (8005ec4 <main+0x324>)
 8005c9e:	7a93      	ldrb	r3, [r2, #10]
 8005ca0:	f36f 13c7 	bfc	r3, #7, #1
 8005ca4:	7293      	strb	r3, [r2, #10]
			HAL_GPIO_TogglePin(GPIOA,TEST_Pin);
 8005ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005caa:	4885      	ldr	r0, [pc, #532]	; (8005ec0 <main+0x320>)
 8005cac:	f7fc fde2 	bl	8002874 <HAL_GPIO_TogglePin>
 8005cb0:	e7ba      	b.n	8005c28 <main+0x88>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCBuffer[0], (uint32_t)ADCCHANNELS);
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	498d      	ldr	r1, [pc, #564]	; (8005eec <main+0x34c>)
 8005cb6:	488e      	ldr	r0, [pc, #568]	; (8005ef0 <main+0x350>)
 8005cb8:	f7fc f94a 	bl	8001f50 <HAL_ADC_Start_DMA>
 8005cbc:	e7b9      	b.n	8005c32 <main+0x92>
			I2C_DMA_Completed = 0;
 8005cbe:	2500      	movs	r5, #0
 8005cc0:	4b88      	ldr	r3, [pc, #544]	; (8005ee4 <main+0x344>)
 8005cc2:	701d      	strb	r5, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,TEST1_Pin,GPIO_PIN_SET);
 8005cc4:	4e7e      	ldr	r6, [pc, #504]	; (8005ec0 <main+0x320>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f7fc fdcb 	bl	8002868 <HAL_GPIO_WritePin>
		    disp_DrawScreen(CfgMode, SpeedModeDesc[SpeedMode], RetractDurationDesc[RetractDuration], VBat, 0, Temp);
 8005cd2:	4b80      	ldr	r3, [pc, #512]	; (8005ed4 <main+0x334>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a87      	ldr	r2, [pc, #540]	; (8005ef4 <main+0x354>)
 8005cd8:	f992 1000 	ldrsb.w	r1, [r2]
 8005cdc:	4a86      	ldr	r2, [pc, #536]	; (8005ef8 <main+0x358>)
 8005cde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005ce2:	4986      	ldr	r1, [pc, #536]	; (8005efc <main+0x35c>)
 8005ce4:	f991 0000 	ldrsb.w	r0, [r1]
 8005ce8:	4985      	ldr	r1, [pc, #532]	; (8005f00 <main+0x360>)
 8005cea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005cee:	487e      	ldr	r0, [pc, #504]	; (8005ee8 <main+0x348>)
 8005cf0:	7800      	ldrb	r0, [r0, #0]
 8005cf2:	4f7a      	ldr	r7, [pc, #488]	; (8005edc <main+0x33c>)
 8005cf4:	683f      	ldr	r7, [r7, #0]
 8005cf6:	9701      	str	r7, [sp, #4]
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	9700      	str	r7, [sp, #0]
 8005cfc:	f7fb fc2c 	bl	8001558 <disp_DrawScreen>
			HAL_GPIO_WritePin(GPIOA,TEST1_Pin,GPIO_PIN_RESET);
 8005d00:	462a      	mov	r2, r5
 8005d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7fc fdae 	bl	8002868 <HAL_GPIO_WritePin>
		  RedrawRequested = 0;
 8005d0c:	4b74      	ldr	r3, [pc, #464]	; (8005ee0 <main+0x340>)
 8005d0e:	701d      	strb	r5, [r3, #0]
 8005d10:	e7b3      	b.n	8005c7a <main+0xda>
			  PushBtn = bbb_GetPushBtnState();
 8005d12:	f7fb fa5f 	bl	80011d4 <bbb_GetPushBtnState>
 8005d16:	4b7b      	ldr	r3, [pc, #492]	; (8005f04 <main+0x364>)
 8005d18:	6018      	str	r0, [r3, #0]
			  PullBtn = bbb_GetPullBtnState();
 8005d1a:	f7fb fa5f 	bl	80011dc <bbb_GetPullBtnState>
 8005d1e:	4b7a      	ldr	r3, [pc, #488]	; (8005f08 <main+0x368>)
 8005d20:	6018      	str	r0, [r3, #0]
			  CfgBtn = bbb_GetCfgBtnState();
 8005d22:	f7fb fa5f 	bl	80011e4 <bbb_GetCfgBtnState>
 8005d26:	4b79      	ldr	r3, [pc, #484]	; (8005f0c <main+0x36c>)
 8005d28:	6018      	str	r0, [r3, #0]
			  if(CfgMode == disp_CfgModeTd_None){											//NORMAL PUSH/PULL OPERATION
 8005d2a:	4b6f      	ldr	r3, [pc, #444]	; (8005ee8 <main+0x348>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d16a      	bne.n	8005e08 <main+0x268>
				  if(PushBtn->PrevBtnEvt == bbb_EvtTd_Pressed){
 8005d32:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <main+0x364>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d013      	beq.n	8005d66 <main+0x1c6>
				  else if(PushBtn->PrevBtnEvt == bbb_EvtTd_Released || PushBtn->PrevBtnEvt == bbb_EvtTd_LongReleased){
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d03a      	beq.n	8005db8 <main+0x218>
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d038      	beq.n	8005db8 <main+0x218>
				  if(PullBtn->PrevBtnEvt == bbb_EvtTd_Pressed){								//When pull button is pressed start motor in reverse max speed
 8005d46:	4b70      	ldr	r3, [pc, #448]	; (8005f08 <main+0x368>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d04f      	beq.n	8005df2 <main+0x252>
				  else if(PullBtn->PrevBtnEvt == bbb_EvtTd_Released || PullBtn->PrevBtnEvt == bbb_EvtTd_LongReleased){						//When the button is released
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d001      	beq.n	8005d5a <main+0x1ba>
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d175      	bne.n	8005e46 <main+0x2a6>
					  mo_SetSpeed(PWMPulse(0));
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f000 fa2c 	bl	80061b8 <PWMPulse>
 8005d60:	f7fb fd04 	bl	800176c <mo_SetSpeed>
 8005d64:	e06f      	b.n	8005e46 <main+0x2a6>
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8005d66:	2000      	movs	r0, #0
 8005d68:	f000 fa26 	bl	80061b8 <PWMPulse>
 8005d6c:	f7fb fcfe 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSync(10);														//Wait a moment to stop the movements
 8005d70:	200a      	movs	r0, #10
 8005d72:	f7fb fa3b 	bl	80011ec <bbb_WaitSync>
					  mo_SetSpeed(PWMPulse(99.9));														//Start push with max speed to null the retraction effect
 8005d76:	4866      	ldr	r0, [pc, #408]	; (8005f10 <main+0x370>)
 8005d78:	f000 fa1e 	bl	80061b8 <PWMPulse>
 8005d7c:	f7fb fcf6 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSyncCond(RetractDurationList[RetractDuration], StopWaitingDueToPushBtnRelease);
 8005d80:	4d64      	ldr	r5, [pc, #400]	; (8005f14 <main+0x374>)
 8005d82:	4b5c      	ldr	r3, [pc, #368]	; (8005ef4 <main+0x354>)
 8005d84:	f993 2000 	ldrsb.w	r2, [r3]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4b63      	ldr	r3, [pc, #396]	; (8005f18 <main+0x378>)
 8005d8c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005d90:	f7fb fa36 	bl	8001200 <bbb_WaitSyncCond>
					  mo_SetSpeed(PWMPulse(SpeedModeList[SpeedMode]));								//Set speed according to settings
 8005d94:	4b59      	ldr	r3, [pc, #356]	; (8005efc <main+0x35c>)
 8005d96:	f993 2000 	ldrsb.w	r2, [r3]
 8005d9a:	4b60      	ldr	r3, [pc, #384]	; (8005f1c <main+0x37c>)
 8005d9c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005da0:	f7fa ff28 	bl	8000bf4 <__aeabi_ui2f>
 8005da4:	f000 fa08 	bl	80061b8 <PWMPulse>
 8005da8:	f7fb fce0 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSyncCond(UINT16_MAX, StopWaitingDueToPushBtnRelease);			//Just synchronously wait so the code does not do anything
 8005dac:	4629      	mov	r1, r5
 8005dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005db2:	f7fb fa25 	bl	8001200 <bbb_WaitSyncCond>
 8005db6:	e7c6      	b.n	8005d46 <main+0x1a6>
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8005db8:	2500      	movs	r5, #0
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f9fc 	bl	80061b8 <PWMPulse>
 8005dc0:	f7fb fcd4 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSync(10);														//Wait a moment to stop the movements
 8005dc4:	200a      	movs	r0, #10
 8005dc6:	f7fb fa11 	bl	80011ec <bbb_WaitSync>
					  mo_SetSpeed(PWMPulse(-99.9));													//Retract
 8005dca:	4855      	ldr	r0, [pc, #340]	; (8005f20 <main+0x380>)
 8005dcc:	f000 f9f4 	bl	80061b8 <PWMPulse>
 8005dd0:	f7fb fccc 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSyncCond(RetractDurationList[RetractDuration], StopWaitingDueToAnyBtnPressed);
 8005dd4:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <main+0x354>)
 8005dd6:	f993 2000 	ldrsb.w	r2, [r3]
 8005dda:	4952      	ldr	r1, [pc, #328]	; (8005f24 <main+0x384>)
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <main+0x378>)
 8005dde:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8005de2:	f7fb fa0d 	bl	8001200 <bbb_WaitSyncCond>
					  mo_SetSpeed(PWMPulse(0));
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f9e6 	bl	80061b8 <PWMPulse>
 8005dec:	f7fb fcbe 	bl	800176c <mo_SetSpeed>
 8005df0:	e7a9      	b.n	8005d46 <main+0x1a6>
					  mo_SetSpeed(PWMPulse(-99.9));
 8005df2:	484b      	ldr	r0, [pc, #300]	; (8005f20 <main+0x380>)
 8005df4:	f000 f9e0 	bl	80061b8 <PWMPulse>
 8005df8:	f7fb fcb8 	bl	800176c <mo_SetSpeed>
					  bbb_WaitSyncCond(UINT16_MAX, StopWaitingDueToPullBtnRelease);
 8005dfc:	494a      	ldr	r1, [pc, #296]	; (8005f28 <main+0x388>)
 8005dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005e02:	f7fb f9fd 	bl	8001200 <bbb_WaitSyncCond>
 8005e06:	e01e      	b.n	8005e46 <main+0x2a6>
				  if(PushBtn->PrevBtnEvt == bbb_EvtTd_Released){
 8005e08:	4a3e      	ldr	r2, [pc, #248]	; (8005f04 <main+0x364>)
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	f992 201c 	ldrsb.w	r2, [r2, #28]
 8005e10:	2a02      	cmp	r2, #2
 8005e12:	d03c      	beq.n	8005e8e <main+0x2ee>
				  if(PullBtn->PrevBtnEvt == bbb_EvtTd_Released){							//When the button is released
 8005e14:	4b3c      	ldr	r3, [pc, #240]	; (8005f08 <main+0x368>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	f000 808a 	beq.w	8005f36 <main+0x396>
				  UT_SATURATE(RetractDuration, 0, (int8_t)(UT_SIZEOFARRAY(RetractDurationList)-1));
 8005e22:	4b34      	ldr	r3, [pc, #208]	; (8005ef4 <main+0x354>)
 8005e24:	f993 3000 	ldrsb.w	r3, [r3]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	f340 80a1 	ble.w	8005f70 <main+0x3d0>
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <main+0x354>)
 8005e30:	2204      	movs	r2, #4
 8005e32:	701a      	strb	r2, [r3, #0]
				  UT_SATURATE(SpeedMode, 0, (int8_t)(UT_SIZEOFARRAY(SpeedModeList)-1));
 8005e34:	4b31      	ldr	r3, [pc, #196]	; (8005efc <main+0x35c>)
 8005e36:	f993 3000 	ldrsb.w	r3, [r3]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	f340 809f 	ble.w	8005f7e <main+0x3de>
 8005e40:	4b2e      	ldr	r3, [pc, #184]	; (8005efc <main+0x35c>)
 8005e42:	2204      	movs	r2, #4
 8005e44:	701a      	strb	r2, [r3, #0]
			  if(CfgBtn->PrevBtnEvt == bbb_EvtTd_Released){									//Config button always stops all movements and changes cfg mode
 8005e46:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <main+0x36c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	f47f af17 	bne.w	8005c82 <main+0xe2>
				  CfgMode += 1;
 8005e54:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <main+0x348>)
 8005e56:	7813      	ldrb	r3, [r2, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	7013      	strb	r3, [r2, #0]
				  if(CfgMode > disp_CfgModeTd_Ret) CfgMode = disp_CfgModeTd_None;
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <main+0x2c8>
 8005e62:	4613      	mov	r3, r2
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
				  mo_SetSpeed(PWMPulse(0));													//Stop
 8005e68:	2500      	movs	r5, #0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f9a4 	bl	80061b8 <PWMPulse>
 8005e70:	f7fb fc7c 	bl	800176c <mo_SetSpeed>
				  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 8005e74:	f7fb feb2 	bl	8001bdc <HAL_GetTick>
 8005e78:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
				  RedrawRequested = 1;
 8005e7c:	4b18      	ldr	r3, [pc, #96]	; (8005ee0 <main+0x340>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
				  mo_SetSpeed(PWMPulse(0));														//Stop
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f998 	bl	80061b8 <PWMPulse>
 8005e88:	f7fb fc70 	bl	800176c <mo_SetSpeed>
 8005e8c:	e6f9      	b.n	8005c82 <main+0xe2>
					  if(CfgMode == disp_CfgModeTd_Ret){
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d00e      	beq.n	8005eb0 <main+0x310>
					  else if(CfgMode == disp_CfgModeTd_Speed){
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d04a      	beq.n	8005f2c <main+0x38c>
					  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 8005e96:	f7fb fea1 	bl	8001bdc <HAL_GetTick>
 8005e9a:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
					  RedrawRequested = 1;
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <main+0x340>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f000 f987 	bl	80061b8 <PWMPulse>
 8005eaa:	f7fb fc5f 	bl	800176c <mo_SetSpeed>
 8005eae:	e7b1      	b.n	8005e14 <main+0x274>
						  RetractDuration++;
 8005eb0:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <main+0x354>)
 8005eb2:	7813      	ldrb	r3, [r2, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	7013      	strb	r3, [r2, #0]
 8005eb8:	e7ed      	b.n	8005e96 <main+0x2f6>
 8005eba:	bf00      	nop
 8005ebc:	41eccccd 	.word	0x41eccccd
 8005ec0:	40010800 	.word	0x40010800
 8005ec4:	200005f4 	.word	0x200005f4
 8005ec8:	200004e0 	.word	0x200004e0
 8005ecc:	20000270 	.word	0x20000270
 8005ed0:	2000026c 	.word	0x2000026c
 8005ed4:	200004d0 	.word	0x200004d0
 8005ed8:	20000268 	.word	0x20000268
 8005edc:	200004cc 	.word	0x200004cc
 8005ee0:	20000071 	.word	0x20000071
 8005ee4:	20000070 	.word	0x20000070
 8005ee8:	2000047c 	.word	0x2000047c
 8005eec:	200004d4 	.word	0x200004d4
 8005ef0:	200004e8 	.word	0x200004e8
 8005ef4:	20000072 	.word	0x20000072
 8005ef8:	08009080 	.word	0x08009080
 8005efc:	20000073 	.word	0x20000073
 8005f00:	080090a0 	.word	0x080090a0
 8005f04:	20000608 	.word	0x20000608
 8005f08:	20000604 	.word	0x20000604
 8005f0c:	20000600 	.word	0x20000600
 8005f10:	42c7cccd 	.word	0x42c7cccd
 8005f14:	080059b1 	.word	0x080059b1
 8005f18:	08009094 	.word	0x08009094
 8005f1c:	080090b4 	.word	0x080090b4
 8005f20:	c2c7cccd 	.word	0xc2c7cccd
 8005f24:	080059f1 	.word	0x080059f1
 8005f28:	080059d1 	.word	0x080059d1
						  SpeedMode++;
 8005f2c:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <main+0x3ec>)
 8005f2e:	7813      	ldrb	r3, [r2, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	7013      	strb	r3, [r2, #0]
 8005f34:	e7af      	b.n	8005e96 <main+0x2f6>
					  if(CfgMode == disp_CfgModeTd_Ret){
 8005f36:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <main+0x3f0>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d00e      	beq.n	8005f5c <main+0x3bc>
					  else if(CfgMode == disp_CfgModeTd_Speed){
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d011      	beq.n	8005f66 <main+0x3c6>
					  ConfigWindowTimestamp = HAL_GetTick() + CONFIGWINDOWDURATION_MS;
 8005f42:	f7fb fe4b 	bl	8001bdc <HAL_GetTick>
 8005f46:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
					  RedrawRequested = 1;
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <main+0x3f4>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
					  mo_SetSpeed(PWMPulse(0));														//Stop
 8005f50:	2000      	movs	r0, #0
 8005f52:	f000 f931 	bl	80061b8 <PWMPulse>
 8005f56:	f7fb fc09 	bl	800176c <mo_SetSpeed>
 8005f5a:	e762      	b.n	8005e22 <main+0x282>
						  RetractDuration--;
 8005f5c:	4a0e      	ldr	r2, [pc, #56]	; (8005f98 <main+0x3f8>)
 8005f5e:	7813      	ldrb	r3, [r2, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	7013      	strb	r3, [r2, #0]
 8005f64:	e7ed      	b.n	8005f42 <main+0x3a2>
						  SpeedMode--;
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <main+0x3ec>)
 8005f68:	7813      	ldrb	r3, [r2, #0]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	7013      	strb	r3, [r2, #0]
 8005f6e:	e7e8      	b.n	8005f42 <main+0x3a2>
				  UT_SATURATE(RetractDuration, 0, (int8_t)(UT_SIZEOFARRAY(RetractDurationList)-1));
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f6bf af5f 	bge.w	8005e34 <main+0x294>
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <main+0x3f8>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e75a      	b.n	8005e34 <main+0x294>
				  UT_SATURATE(SpeedMode, 0, (int8_t)(UT_SIZEOFARRAY(SpeedModeList)-1));
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f6bf af61 	bge.w	8005e46 <main+0x2a6>
 8005f84:	4b01      	ldr	r3, [pc, #4]	; (8005f8c <main+0x3ec>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e75c      	b.n	8005e46 <main+0x2a6>
 8005f8c:	20000073 	.word	0x20000073
 8005f90:	2000047c 	.word	0x2000047c
 8005f94:	20000071 	.word	0x20000071
 8005f98:	20000072 	.word	0x20000072

08005f9c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005f9c:	4770      	bx	lr
	...

08005fa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005fa0:	b500      	push	{lr}
 8005fa2:	b083      	sub	sp, #12
  RTC_TimeTypeDef sTime = {0};
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005faa:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8005fae:	9300      	str	r3, [sp, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005fb0:	4819      	ldr	r0, [pc, #100]	; (8006018 <MX_RTC_Init+0x78>)
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <MX_RTC_Init+0x7c>)
 8005fb4:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8005fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc0:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005fc2:	f7fe fea9 	bl	8004d18 <HAL_RTC_Init>
 8005fc6:	b9f0      	cbnz	r0, 8006006 <MX_RTC_Init+0x66>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8005fce:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8005fd2:	f88d 3006 	strb.w	r3, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	a901      	add	r1, sp, #4
 8005fda:	480f      	ldr	r0, [pc, #60]	; (8006018 <MX_RTC_Init+0x78>)
 8005fdc:	f7fe fdb3 	bl	8004b46 <HAL_RTC_SetTime>
 8005fe0:	b9a0      	cbnz	r0, 800600c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f88d 2000 	strb.w	r2, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005fe8:	f88d 2001 	strb.w	r2, [sp, #1]
  DateToUpdate.Date = 0x1;
 8005fec:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8005ff6:	4669      	mov	r1, sp
 8005ff8:	4807      	ldr	r0, [pc, #28]	; (8006018 <MX_RTC_Init+0x78>)
 8005ffa:	f7fe fe05 	bl	8004c08 <HAL_RTC_SetDate>
 8005ffe:	b940      	cbnz	r0, 8006012 <MX_RTC_Init+0x72>
  {
    Error_Handler();
  }

}
 8006000:	b003      	add	sp, #12
 8006002:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006006:	f7ff ffc9 	bl	8005f9c <Error_Handler>
 800600a:	e7dd      	b.n	8005fc8 <MX_RTC_Init+0x28>
    Error_Handler();
 800600c:	f7ff ffc6 	bl	8005f9c <Error_Handler>
 8006010:	e7e7      	b.n	8005fe2 <MX_RTC_Init+0x42>
    Error_Handler();
 8006012:	f7ff ffc3 	bl	8005f9c <Error_Handler>
}
 8006016:	e7f3      	b.n	8006000 <MX_RTC_Init+0x60>
 8006018:	2000060c 	.word	0x2000060c
 800601c:	40002800 	.word	0x40002800

08006020 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8006020:	6802      	ldr	r2, [r0, #0]
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_RTC_MspInit+0x34>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d000      	beq.n	800602a <HAL_RTC_MspInit+0xa>
 8006028:	4770      	bx	lr
{
 800602a:	b500      	push	{lr}
 800602c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800602e:	f7fe f873 	bl	8004118 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <HAL_RTC_MspInit+0x38>)
 8006034:	69da      	ldr	r2, [r3, #28]
 8006036:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800603a:	61da      	str	r2, [r3, #28]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_RTC_MspInit+0x3c>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800604c:	b003      	add	sp, #12
 800604e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006052:	bf00      	nop
 8006054:	40002800 	.word	0x40002800
 8006058:	40021000 	.word	0x40021000
 800605c:	4242043c 	.word	0x4242043c

08006060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006060:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <HAL_MspInit+0x3c>)
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	619a      	str	r2, [r3, #24]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	f002 0201 	and.w	r2, r2, #1
 8006072:	9200      	str	r2, [sp, #0]
 8006074:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800607c:	61da      	str	r2, [r3, #28]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <HAL_MspInit+0x40>)
 800608a:	6853      	ldr	r3, [r2, #4]
 800608c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006096:	b002      	add	sp, #8
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
 80060a0:	40010000 	.word	0x40010000

080060a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80060a4:	4770      	bx	lr

080060a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060a6:	e7fe      	b.n	80060a6 <HardFault_Handler>

080060a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060a8:	e7fe      	b.n	80060a8 <MemManage_Handler>

080060aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060aa:	e7fe      	b.n	80060aa <BusFault_Handler>

080060ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060ac:	e7fe      	b.n	80060ac <UsageFault_Handler>

080060ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060ae:	4770      	bx	lr

080060b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060b0:	4770      	bx	lr

080060b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060b2:	4770      	bx	lr

080060b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	TimerAction();
 80060b6:	f7ff fce7 	bl	8005a88 <TimerAction>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060ba:	f7fb fd83 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060be:	bd08      	pop	{r3, pc}

080060c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80060c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80060c2:	4802      	ldr	r0, [pc, #8]	; (80060cc <DMA1_Channel1_IRQHandler+0xc>)
 80060c4:	f7fc fa3e 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80060c8:	bd08      	pop	{r3, pc}
 80060ca:	bf00      	nop
 80060cc:	20000518 	.word	0x20000518

080060d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80060d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80060d2:	4802      	ldr	r0, [pc, #8]	; (80060dc <DMA1_Channel6_IRQHandler+0xc>)
 80060d4:	f7fc fa36 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80060d8:	bd08      	pop	{r3, pc}
 80060da:	bf00      	nop
 80060dc:	2000055c 	.word	0x2000055c

080060e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80060e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80060e2:	4802      	ldr	r0, [pc, #8]	; (80060ec <ADC1_2_IRQHandler+0xc>)
 80060e4:	f7fb fdc4 	bl	8001c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80060e8:	bd08      	pop	{r3, pc}
 80060ea:	bf00      	nop
 80060ec:	200004e8 	.word	0x200004e8

080060f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80060f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80060f2:	4802      	ldr	r0, [pc, #8]	; (80060fc <I2C1_EV_IRQHandler+0xc>)
 80060f4:	f7fd ff40 	bl	8003f78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80060f8:	bd08      	pop	{r3, pc}
 80060fa:	bf00      	nop
 80060fc:	200005a0 	.word	0x200005a0

08006100 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	460d      	mov	r5, r1
 8006104:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006106:	2400      	movs	r4, #0
 8006108:	e004      	b.n	8006114 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 800610a:	f3af 8000 	nop.w
 800610e:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006110:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8006112:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006114:	42b4      	cmp	r4, r6
 8006116:	dbf8      	blt.n	800610a <_read+0xa>
	}

return len;
}
 8006118:	4630      	mov	r0, r6
 800611a:	bd70      	pop	{r4, r5, r6, pc}

0800611c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006120:	2400      	movs	r4, #0
 8006122:	e005      	b.n	8006130 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8006124:	1c4d      	adds	r5, r1, #1
 8006126:	7808      	ldrb	r0, [r1, #0]
 8006128:	f7ff fc7f 	bl	8005a2a <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800612c:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800612e:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006130:	42b4      	cmp	r4, r6
 8006132:	dbf7      	blt.n	8006124 <_write+0x8>
	}
	return len;
}
 8006134:	4630      	mov	r0, r6
 8006136:	bd70      	pop	{r4, r5, r6, pc}

08006138 <_close>:

int _close(int file)
{
	return -1;
}
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	4770      	bx	lr

0800613e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800613e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006142:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006144:	2000      	movs	r0, #0
 8006146:	4770      	bx	lr

08006148 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006148:	2001      	movs	r0, #1
 800614a:	4770      	bx	lr

0800614c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800614c:	2000      	movs	r0, #0
 800614e:	4770      	bx	lr

08006150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006150:	b510      	push	{r4, lr}
 8006152:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006154:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <_sbrk+0x38>)
 8006156:	490d      	ldr	r1, [pc, #52]	; (800618c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006158:	480d      	ldr	r0, [pc, #52]	; (8006190 <_sbrk+0x40>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	b140      	cbz	r0, 8006170 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800615e:	480c      	ldr	r0, [pc, #48]	; (8006190 <_sbrk+0x40>)
 8006160:	6800      	ldr	r0, [r0, #0]
 8006162:	4403      	add	r3, r0
 8006164:	1a52      	subs	r2, r2, r1
 8006166:	4293      	cmp	r3, r2
 8006168:	d806      	bhi.n	8006178 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800616a:	4a09      	ldr	r2, [pc, #36]	; (8006190 <_sbrk+0x40>)
 800616c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800616e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006170:	4807      	ldr	r0, [pc, #28]	; (8006190 <_sbrk+0x40>)
 8006172:	4c08      	ldr	r4, [pc, #32]	; (8006194 <_sbrk+0x44>)
 8006174:	6004      	str	r4, [r0, #0]
 8006176:	e7f2      	b.n	800615e <_sbrk+0xe>
    errno = ENOMEM;
 8006178:	f000 f9b2 	bl	80064e0 <__errno>
 800617c:	230c      	movs	r3, #12
 800617e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e7f3      	b.n	800616e <_sbrk+0x1e>
 8006186:	bf00      	nop
 8006188:	20005000 	.word	0x20005000
 800618c:	00000400 	.word	0x00000400
 8006190:	20000480 	.word	0x20000480
 8006194:	200006b8 	.word	0x200006b8

08006198 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006198:	4770      	bx	lr
	...

0800619c <APB2TIM>:

  if(((uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1)) == 0) return (pclk1); // PCLK1 prescaler equal to 1 => TIMCLK = PCLK1
  else return (2 * pclk1); // PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1
}
uint32_t APB2TIM(void)
{
 800619c:	b508      	push	{r3, lr}
  /* Get PCLK2 frequency */
  uint32_t pclk2 =  HAL_RCC_GetPCLK2Freq();
 800619e:	f7fe fae7 	bl	8004770 <HAL_RCC_GetPCLK2Freq>

  if(((uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3)) == 0) return (pclk2); // PCLK2 prescaler equal to 1 => TIMCLK = PCLK2
 80061a2:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <APB2TIM+0x18>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 80061ac:	d000      	beq.n	80061b0 <APB2TIM+0x14>
  else return (2 * pclk2); // PCLK2 prescaler different from 1 => TIMCLK = 2 * PCLK2
 80061ae:	0040      	lsls	r0, r0, #1
}
 80061b0:	bd08      	pop	{r3, pc}
 80061b2:	bf00      	nop
 80061b4:	40021000 	.word	0x40021000

080061b8 <PWMPulse>:

#define PWMRESOLUTION 800U  // Pulse resolution 1-800 = 800 = STEPS 0.125%, 0.250%, 0.375%....99.75%, 99.875%, 100%
#define PWMFREQUENCE 10000U //hz

int16_t PWMPulse (float percent)
{
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4604      	mov	r4, r0
	if(percent>100) percent=100;
 80061bc:	4909      	ldr	r1, [pc, #36]	; (80061e4 <PWMPulse+0x2c>)
 80061be:	f7fa ff2d 	bl	800101c <__aeabi_fcmpgt>
 80061c2:	b100      	cbz	r0, 80061c6 <PWMPulse+0xe>
 80061c4:	4c07      	ldr	r4, [pc, #28]	; (80061e4 <PWMPulse+0x2c>)
	if(percent<-100) percent=-100;
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <PWMPulse+0x30>)
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7fa ff09 	bl	8000fe0 <__aeabi_fcmplt>
 80061ce:	b100      	cbz	r0, 80061d2 <PWMPulse+0x1a>
 80061d0:	4c05      	ldr	r4, [pc, #20]	; (80061e8 <PWMPulse+0x30>)
	return PWMRESOLUTION/100 * percent;
 80061d2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7fa fd64 	bl	8000ca4 <__aeabi_fmul>
 80061dc:	f7fa ff28 	bl	8001030 <__aeabi_f2iz>
}
 80061e0:	b200      	sxth	r0, r0
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	42c80000 	.word	0x42c80000
 80061e8:	c2c80000 	.word	0xc2c80000

080061ec <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80061ec:	6802      	ldr	r2, [r0, #0]
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <HAL_TIM_Base_MspInit+0x28>)
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d000      	beq.n	80061f6 <HAL_TIM_Base_MspInit+0xa>
 80061f4:	4770      	bx	lr
{
 80061f6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80061f8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006202:	619a      	str	r2, [r3, #24]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800620e:	b002      	add	sp, #8
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00

08006218 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8006218:	6802      	ldr	r2, [r0, #0]
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <HAL_TIM_PWM_MspInit+0x28>)
 800621c:	429a      	cmp	r2, r3
 800621e:	d000      	beq.n	8006222 <HAL_TIM_PWM_MspInit+0xa>
 8006220:	4770      	bx	lr
{
 8006222:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006224:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	f042 0202 	orr.w	r2, r2, #2
 800622e:	61da      	str	r2, [r3, #28]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800623a:	b002      	add	sp, #8
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40000400 	.word	0x40000400

08006244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006244:	b500      	push	{lr}
 8006246:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006248:	2300      	movs	r3, #0
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	9303      	str	r3, [sp, #12]
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_TIM_MspPostInit+0x84>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d005      	beq.n	8006266 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 800625a:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <HAL_TIM_MspPostInit+0x88>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01e      	beq.n	800629e <HAL_TIM_MspPostInit+0x5a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006260:	b007      	add	sp, #28
 8006262:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006266:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <HAL_TIM_MspPostInit+0x8c>)
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	f042 0208 	orr.w	r2, r2, #8
 800626e:	619a      	str	r2, [r3, #24]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800627a:	2302      	movs	r3, #2
 800627c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006280:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006282:	a902      	add	r1, sp, #8
 8006284:	4813      	ldr	r0, [pc, #76]	; (80062d4 <HAL_TIM_MspPostInit+0x90>)
 8006286:	f7fc fa03 	bl	8002690 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <HAL_TIM_MspPostInit+0x94>)
 800628c:	6853      	ldr	r3, [r2, #4]
 800628e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006292:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	e7e0      	b.n	8006260 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_TIM_MspPostInit+0x8c>)
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	f042 0204 	orr.w	r2, r2, #4
 80062a6:	619a      	str	r2, [r3, #24]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PB_Pin|PA_Pin;
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b6:	2302      	movs	r3, #2
 80062b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062ba:	2303      	movs	r3, #3
 80062bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062be:	a902      	add	r1, sp, #8
 80062c0:	4806      	ldr	r0, [pc, #24]	; (80062dc <HAL_TIM_MspPostInit+0x98>)
 80062c2:	f7fc f9e5 	bl	8002690 <HAL_GPIO_Init>
}
 80062c6:	e7cb      	b.n	8006260 <HAL_TIM_MspPostInit+0x1c>
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40010c00 	.word	0x40010c00
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010800 	.word	0x40010800

080062e0 <MX_TIM3_Init>:
{
 80062e0:	b500      	push	{lr}
 80062e2:	b08b      	sub	sp, #44	; 0x2c
	uint32_t Prescaler = (APB2TIM()/PWMRESOLUTION/PWMFREQUENCE)-1;
 80062e4:	f7ff ff5a 	bl	800619c <APB2TIM>
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <MX_TIM3_Init+0xb0>)
 80062ea:	fba2 3200 	umull	r3, r2, r2, r0
 80062ee:	0d52      	lsrs	r2, r2, #21
	if(Prescaler==0) Prescaler = 1;
 80062f0:	3a01      	subs	r2, #1
 80062f2:	d003      	beq.n	80062fc <MX_TIM3_Init+0x1c>
	if(Prescaler>128) Prescaler = 128;
 80062f4:	2a80      	cmp	r2, #128	; 0x80
 80062f6:	d902      	bls.n	80062fe <MX_TIM3_Init+0x1e>
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	e000      	b.n	80062fe <MX_TIM3_Init+0x1e>
	if(Prescaler==0) Prescaler = 1;
 80062fc:	2201      	movs	r2, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062fe:	2300      	movs	r3, #0
 8006300:	9308      	str	r3, [sp, #32]
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	9302      	str	r3, [sp, #8]
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	9306      	str	r3, [sp, #24]
 8006310:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8006312:	4820      	ldr	r0, [pc, #128]	; (8006394 <MX_TIM3_Init+0xb4>)
 8006314:	4920      	ldr	r1, [pc, #128]	; (8006398 <MX_TIM3_Init+0xb8>)
 8006316:	6001      	str	r1, [r0, #0]
  htim3.Init.Prescaler = Prescaler;//7;
 8006318:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800631a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = PWMRESOLUTION; //800;
 800631c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006320:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006322:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006328:	f7fe feb1 	bl	800508e <HAL_TIM_PWM_Init>
 800632c:	bb20      	cbnz	r0, 8006378 <MX_TIM3_Init+0x98>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;//TIM_TRGO_RESET;
 800632e:	2330      	movs	r3, #48	; 0x30
 8006330:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006332:	2300      	movs	r3, #0
 8006334:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006336:	a908      	add	r1, sp, #32
 8006338:	4816      	ldr	r0, [pc, #88]	; (8006394 <MX_TIM3_Init+0xb4>)
 800633a:	f7ff f963 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 800633e:	b9f0      	cbnz	r0, 800637e <MX_TIM3_Init+0x9e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006340:	2360      	movs	r3, #96	; 0x60
 8006342:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8006344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006348:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800634a:	2200      	movs	r2, #0
 800634c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800634e:	2304      	movs	r3, #4
 8006350:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006352:	eb0d 0103 	add.w	r1, sp, r3
 8006356:	480f      	ldr	r0, [pc, #60]	; (8006394 <MX_TIM3_Init+0xb4>)
 8006358:	f7fe fef6 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 800635c:	b990      	cbnz	r0, 8006384 <MX_TIM3_Init+0xa4>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800635e:	2204      	movs	r2, #4
 8006360:	eb0d 0102 	add.w	r1, sp, r2
 8006364:	480b      	ldr	r0, [pc, #44]	; (8006394 <MX_TIM3_Init+0xb4>)
 8006366:	f7fe feef 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 800636a:	b970      	cbnz	r0, 800638a <MX_TIM3_Init+0xaa>
  HAL_TIM_MspPostInit(&htim3);
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <MX_TIM3_Init+0xb4>)
 800636e:	f7ff ff69 	bl	8006244 <HAL_TIM_MspPostInit>
}
 8006372:	b00b      	add	sp, #44	; 0x2c
 8006374:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006378:	f7ff fe10 	bl	8005f9c <Error_Handler>
 800637c:	e7d7      	b.n	800632e <MX_TIM3_Init+0x4e>
    Error_Handler();
 800637e:	f7ff fe0d 	bl	8005f9c <Error_Handler>
 8006382:	e7dd      	b.n	8006340 <MX_TIM3_Init+0x60>
    Error_Handler();
 8006384:	f7ff fe0a 	bl	8005f9c <Error_Handler>
 8006388:	e7e9      	b.n	800635e <MX_TIM3_Init+0x7e>
    Error_Handler();
 800638a:	f7ff fe07 	bl	8005f9c <Error_Handler>
 800638e:	e7ed      	b.n	800636c <MX_TIM3_Init+0x8c>
 8006390:	431bde83 	.word	0x431bde83
 8006394:	20000620 	.word	0x20000620
 8006398:	40000400 	.word	0x40000400

0800639c <MX_TIM1_Init>:
{
 800639c:	b510      	push	{r4, lr}
 800639e:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063a0:	2400      	movs	r4, #0
 80063a2:	9412      	str	r4, [sp, #72]	; 0x48
 80063a4:	9413      	str	r4, [sp, #76]	; 0x4c
 80063a6:	9414      	str	r4, [sp, #80]	; 0x50
 80063a8:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063aa:	9410      	str	r4, [sp, #64]	; 0x40
 80063ac:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063ae:	9409      	str	r4, [sp, #36]	; 0x24
 80063b0:	940a      	str	r4, [sp, #40]	; 0x28
 80063b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80063b4:	940c      	str	r4, [sp, #48]	; 0x30
 80063b6:	940d      	str	r4, [sp, #52]	; 0x34
 80063b8:	940e      	str	r4, [sp, #56]	; 0x38
 80063ba:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063bc:	2220      	movs	r2, #32
 80063be:	4621      	mov	r1, r4
 80063c0:	a801      	add	r0, sp, #4
 80063c2:	f000 f8d1 	bl	8006568 <memset>
  htim1.Instance = TIM1;
 80063c6:	4831      	ldr	r0, [pc, #196]	; (800648c <MX_TIM1_Init+0xf0>)
 80063c8:	4b31      	ldr	r3, [pc, #196]	; (8006490 <MX_TIM1_Init+0xf4>)
 80063ca:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 71;
 80063cc:	2347      	movs	r3, #71	; 0x47
 80063ce:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063d0:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 80063d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80063d6:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063d8:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80063da:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80063e0:	f7fe fe2a 	bl	8005038 <HAL_TIM_Base_Init>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d13e      	bne.n	8006466 <MX_TIM1_Init+0xca>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063e8:	a916      	add	r1, sp, #88	; 0x58
 80063ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ee:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80063f2:	4826      	ldr	r0, [pc, #152]	; (800648c <MX_TIM1_Init+0xf0>)
 80063f4:	f7fe ff1b 	bl	800522e <HAL_TIM_ConfigClockSource>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d137      	bne.n	800646c <MX_TIM1_Init+0xd0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80063fc:	4823      	ldr	r0, [pc, #140]	; (800648c <MX_TIM1_Init+0xf0>)
 80063fe:	f7fe fe46 	bl	800508e <HAL_TIM_PWM_Init>
 8006402:	2800      	cmp	r0, #0
 8006404:	d135      	bne.n	8006472 <MX_TIM1_Init+0xd6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8006406:	2330      	movs	r3, #48	; 0x30
 8006408:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800640a:	2300      	movs	r3, #0
 800640c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800640e:	a910      	add	r1, sp, #64	; 0x40
 8006410:	481e      	ldr	r0, [pc, #120]	; (800648c <MX_TIM1_Init+0xf0>)
 8006412:	f7ff f8f7 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 8006416:	2800      	cmp	r0, #0
 8006418:	d12e      	bne.n	8006478 <MX_TIM1_Init+0xdc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800641a:	2360      	movs	r3, #96	; 0x60
 800641c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 499;
 800641e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006422:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006424:	2300      	movs	r3, #0
 8006426:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006428:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800642a:	2204      	movs	r2, #4
 800642c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800642e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006430:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006432:	2208      	movs	r2, #8
 8006434:	a909      	add	r1, sp, #36	; 0x24
 8006436:	4815      	ldr	r0, [pc, #84]	; (800648c <MX_TIM1_Init+0xf0>)
 8006438:	f7fe fe86 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 800643c:	b9f8      	cbnz	r0, 800647e <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800643e:	2300      	movs	r3, #0
 8006440:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006442:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006444:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006446:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006448:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800644a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800644e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006450:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006452:	a901      	add	r1, sp, #4
 8006454:	480d      	ldr	r0, [pc, #52]	; (800648c <MX_TIM1_Init+0xf0>)
 8006456:	f7ff f909 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 800645a:	b998      	cbnz	r0, 8006484 <MX_TIM1_Init+0xe8>
  HAL_TIM_MspPostInit(&htim1);
 800645c:	480b      	ldr	r0, [pc, #44]	; (800648c <MX_TIM1_Init+0xf0>)
 800645e:	f7ff fef1 	bl	8006244 <HAL_TIM_MspPostInit>
}
 8006462:	b016      	add	sp, #88	; 0x58
 8006464:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006466:	f7ff fd99 	bl	8005f9c <Error_Handler>
 800646a:	e7bd      	b.n	80063e8 <MX_TIM1_Init+0x4c>
    Error_Handler();
 800646c:	f7ff fd96 	bl	8005f9c <Error_Handler>
 8006470:	e7c4      	b.n	80063fc <MX_TIM1_Init+0x60>
    Error_Handler();
 8006472:	f7ff fd93 	bl	8005f9c <Error_Handler>
 8006476:	e7c6      	b.n	8006406 <MX_TIM1_Init+0x6a>
    Error_Handler();
 8006478:	f7ff fd90 	bl	8005f9c <Error_Handler>
 800647c:	e7cd      	b.n	800641a <MX_TIM1_Init+0x7e>
    Error_Handler();
 800647e:	f7ff fd8d 	bl	8005f9c <Error_Handler>
 8006482:	e7dc      	b.n	800643e <MX_TIM1_Init+0xa2>
    Error_Handler();
 8006484:	f7ff fd8a 	bl	8005f9c <Error_Handler>
 8006488:	e7e8      	b.n	800645c <MX_TIM1_Init+0xc0>
 800648a:	bf00      	nop
 800648c:	20000668 	.word	0x20000668
 8006490:	40012c00 	.word	0x40012c00

08006494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006494:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006496:	e003      	b.n	80064a0 <LoopCopyDataInit>

08006498 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006498:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800649a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800649c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800649e:	3104      	adds	r1, #4

080064a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80064a0:	480a      	ldr	r0, [pc, #40]	; (80064cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80064a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80064a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80064a8:	d3f6      	bcc.n	8006498 <CopyDataInit>
  ldr r2, =_sbss
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80064ac:	e002      	b.n	80064b4 <LoopFillZerobss>

080064ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80064ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80064b0:	f842 3b04 	str.w	r3, [r2], #4

080064b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80064b4:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80064b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80064b8:	d3f9      	bcc.n	80064ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064ba:	f7ff fe6d 	bl	8006198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064be:	f000 f815 	bl	80064ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064c2:	f7ff fb6d 	bl	8005ba0 <main>
  bx lr
 80064c6:	4770      	bx	lr
  ldr r3, =_sidata
 80064c8:	080093d0 	.word	0x080093d0
  ldr r0, =_sdata
 80064cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80064d0:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 80064d4:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 80064d8:	200006b4 	.word	0x200006b4

080064dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064dc:	e7fe      	b.n	80064dc <CAN1_RX1_IRQHandler>
	...

080064e0 <__errno>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <__errno+0x8>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000078 	.word	0x20000078

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	2500      	movs	r5, #0
 80064f0:	4e0c      	ldr	r6, [pc, #48]	; (8006524 <__libc_init_array+0x38>)
 80064f2:	4c0d      	ldr	r4, [pc, #52]	; (8006528 <__libc_init_array+0x3c>)
 80064f4:	1ba4      	subs	r4, r4, r6
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	42a5      	cmp	r5, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	f002 f99e 	bl	800883c <_init>
 8006500:	2500      	movs	r5, #0
 8006502:	4e0a      	ldr	r6, [pc, #40]	; (800652c <__libc_init_array+0x40>)
 8006504:	4c0a      	ldr	r4, [pc, #40]	; (8006530 <__libc_init_array+0x44>)
 8006506:	1ba4      	subs	r4, r4, r6
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	42a5      	cmp	r5, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006514:	4798      	blx	r3
 8006516:	3501      	adds	r5, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800651e:	4798      	blx	r3
 8006520:	3501      	adds	r5, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	080093c8 	.word	0x080093c8
 8006528:	080093c8 	.word	0x080093c8
 800652c:	080093c8 	.word	0x080093c8
 8006530:	080093cc 	.word	0x080093cc

08006534 <__itoa>:
 8006534:	1e93      	subs	r3, r2, #2
 8006536:	2b22      	cmp	r3, #34	; 0x22
 8006538:	b510      	push	{r4, lr}
 800653a:	460c      	mov	r4, r1
 800653c:	d904      	bls.n	8006548 <__itoa+0x14>
 800653e:	2300      	movs	r3, #0
 8006540:	461c      	mov	r4, r3
 8006542:	700b      	strb	r3, [r1, #0]
 8006544:	4620      	mov	r0, r4
 8006546:	bd10      	pop	{r4, pc}
 8006548:	2a0a      	cmp	r2, #10
 800654a:	d109      	bne.n	8006560 <__itoa+0x2c>
 800654c:	2800      	cmp	r0, #0
 800654e:	da07      	bge.n	8006560 <__itoa+0x2c>
 8006550:	232d      	movs	r3, #45	; 0x2d
 8006552:	700b      	strb	r3, [r1, #0]
 8006554:	2101      	movs	r1, #1
 8006556:	4240      	negs	r0, r0
 8006558:	4421      	add	r1, r4
 800655a:	f000 fbbf 	bl	8006cdc <__utoa>
 800655e:	e7f1      	b.n	8006544 <__itoa+0x10>
 8006560:	2100      	movs	r1, #0
 8006562:	e7f9      	b.n	8006558 <__itoa+0x24>

08006564 <itoa>:
 8006564:	f7ff bfe6 	b.w	8006534 <__itoa>

08006568 <memset>:
 8006568:	4603      	mov	r3, r0
 800656a:	4402      	add	r2, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <__cvt>:
 8006578:	2b00      	cmp	r3, #0
 800657a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657e:	461e      	mov	r6, r3
 8006580:	bfbb      	ittet	lt
 8006582:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006586:	461e      	movlt	r6, r3
 8006588:	2300      	movge	r3, #0
 800658a:	232d      	movlt	r3, #45	; 0x2d
 800658c:	b088      	sub	sp, #32
 800658e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006590:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006594:	f027 0720 	bic.w	r7, r7, #32
 8006598:	2f46      	cmp	r7, #70	; 0x46
 800659a:	4614      	mov	r4, r2
 800659c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800659e:	700b      	strb	r3, [r1, #0]
 80065a0:	d004      	beq.n	80065ac <__cvt+0x34>
 80065a2:	2f45      	cmp	r7, #69	; 0x45
 80065a4:	d100      	bne.n	80065a8 <__cvt+0x30>
 80065a6:	3501      	adds	r5, #1
 80065a8:	2302      	movs	r3, #2
 80065aa:	e000      	b.n	80065ae <__cvt+0x36>
 80065ac:	2303      	movs	r3, #3
 80065ae:	aa07      	add	r2, sp, #28
 80065b0:	9204      	str	r2, [sp, #16]
 80065b2:	aa06      	add	r2, sp, #24
 80065b4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065b8:	e9cd 3500 	strd	r3, r5, [sp]
 80065bc:	4622      	mov	r2, r4
 80065be:	4633      	mov	r3, r6
 80065c0:	f000 fd1a 	bl	8006ff8 <_dtoa_r>
 80065c4:	2f47      	cmp	r7, #71	; 0x47
 80065c6:	4680      	mov	r8, r0
 80065c8:	d102      	bne.n	80065d0 <__cvt+0x58>
 80065ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d526      	bpl.n	800661e <__cvt+0xa6>
 80065d0:	2f46      	cmp	r7, #70	; 0x46
 80065d2:	eb08 0905 	add.w	r9, r8, r5
 80065d6:	d111      	bne.n	80065fc <__cvt+0x84>
 80065d8:	f898 3000 	ldrb.w	r3, [r8]
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d10a      	bne.n	80065f6 <__cvt+0x7e>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4620      	mov	r0, r4
 80065e6:	4631      	mov	r1, r6
 80065e8:	f7fa f9de 	bl	80009a8 <__aeabi_dcmpeq>
 80065ec:	b918      	cbnz	r0, 80065f6 <__cvt+0x7e>
 80065ee:	f1c5 0501 	rsb	r5, r5, #1
 80065f2:	f8ca 5000 	str.w	r5, [sl]
 80065f6:	f8da 3000 	ldr.w	r3, [sl]
 80065fa:	4499      	add	r9, r3
 80065fc:	2200      	movs	r2, #0
 80065fe:	2300      	movs	r3, #0
 8006600:	4620      	mov	r0, r4
 8006602:	4631      	mov	r1, r6
 8006604:	f7fa f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006608:	b938      	cbnz	r0, 800661a <__cvt+0xa2>
 800660a:	2230      	movs	r2, #48	; 0x30
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	454b      	cmp	r3, r9
 8006610:	d205      	bcs.n	800661e <__cvt+0xa6>
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	9107      	str	r1, [sp, #28]
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e7f8      	b.n	800660c <__cvt+0x94>
 800661a:	f8cd 901c 	str.w	r9, [sp, #28]
 800661e:	4640      	mov	r0, r8
 8006620:	9b07      	ldr	r3, [sp, #28]
 8006622:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006624:	eba3 0308 	sub.w	r3, r3, r8
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	b008      	add	sp, #32
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006630 <__exponent>:
 8006630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006632:	2900      	cmp	r1, #0
 8006634:	bfb4      	ite	lt
 8006636:	232d      	movlt	r3, #45	; 0x2d
 8006638:	232b      	movge	r3, #43	; 0x2b
 800663a:	4604      	mov	r4, r0
 800663c:	bfb8      	it	lt
 800663e:	4249      	neglt	r1, r1
 8006640:	2909      	cmp	r1, #9
 8006642:	f804 2b02 	strb.w	r2, [r4], #2
 8006646:	7043      	strb	r3, [r0, #1]
 8006648:	dd21      	ble.n	800668e <__exponent+0x5e>
 800664a:	f10d 0307 	add.w	r3, sp, #7
 800664e:	461f      	mov	r7, r3
 8006650:	260a      	movs	r6, #10
 8006652:	fb91 f5f6 	sdiv	r5, r1, r6
 8006656:	fb06 1115 	mls	r1, r6, r5, r1
 800665a:	2d09      	cmp	r5, #9
 800665c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006660:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006664:	f103 32ff 	add.w	r2, r3, #4294967295
 8006668:	4629      	mov	r1, r5
 800666a:	dc09      	bgt.n	8006680 <__exponent+0x50>
 800666c:	3130      	adds	r1, #48	; 0x30
 800666e:	3b02      	subs	r3, #2
 8006670:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006674:	42bb      	cmp	r3, r7
 8006676:	4622      	mov	r2, r4
 8006678:	d304      	bcc.n	8006684 <__exponent+0x54>
 800667a:	1a10      	subs	r0, r2, r0
 800667c:	b003      	add	sp, #12
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	4613      	mov	r3, r2
 8006682:	e7e6      	b.n	8006652 <__exponent+0x22>
 8006684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006688:	f804 2b01 	strb.w	r2, [r4], #1
 800668c:	e7f2      	b.n	8006674 <__exponent+0x44>
 800668e:	2330      	movs	r3, #48	; 0x30
 8006690:	4419      	add	r1, r3
 8006692:	7083      	strb	r3, [r0, #2]
 8006694:	1d02      	adds	r2, r0, #4
 8006696:	70c1      	strb	r1, [r0, #3]
 8006698:	e7ef      	b.n	800667a <__exponent+0x4a>
	...

0800669c <_printf_float>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	b091      	sub	sp, #68	; 0x44
 80066a2:	460c      	mov	r4, r1
 80066a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80066a6:	4693      	mov	fp, r2
 80066a8:	461e      	mov	r6, r3
 80066aa:	4605      	mov	r5, r0
 80066ac:	f001 fbd2 	bl	8007e54 <_localeconv_r>
 80066b0:	6803      	ldr	r3, [r0, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	9309      	str	r3, [sp, #36]	; 0x24
 80066b6:	f7f9 fd4b 	bl	8000150 <strlen>
 80066ba:	2300      	movs	r3, #0
 80066bc:	930e      	str	r3, [sp, #56]	; 0x38
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	900a      	str	r0, [sp, #40]	; 0x28
 80066c2:	3307      	adds	r3, #7
 80066c4:	f023 0307 	bic.w	r3, r3, #7
 80066c8:	f103 0208 	add.w	r2, r3, #8
 80066cc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80066d0:	f8d4 a000 	ldr.w	sl, [r4]
 80066d4:	603a      	str	r2, [r7, #0]
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066de:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80066e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	4ba6      	ldr	r3, [pc, #664]	; (8006988 <_printf_float+0x2ec>)
 80066ee:	4638      	mov	r0, r7
 80066f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066f2:	f7fa f98b 	bl	8000a0c <__aeabi_dcmpun>
 80066f6:	bb68      	cbnz	r0, 8006754 <_printf_float+0xb8>
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	4ba2      	ldr	r3, [pc, #648]	; (8006988 <_printf_float+0x2ec>)
 80066fe:	4638      	mov	r0, r7
 8006700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006702:	f7fa f965 	bl	80009d0 <__aeabi_dcmple>
 8006706:	bb28      	cbnz	r0, 8006754 <_printf_float+0xb8>
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	4638      	mov	r0, r7
 800670e:	4649      	mov	r1, r9
 8006710:	f7fa f954 	bl	80009bc <__aeabi_dcmplt>
 8006714:	b110      	cbz	r0, 800671c <_printf_float+0x80>
 8006716:	232d      	movs	r3, #45	; 0x2d
 8006718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671c:	4f9b      	ldr	r7, [pc, #620]	; (800698c <_printf_float+0x2f0>)
 800671e:	4b9c      	ldr	r3, [pc, #624]	; (8006990 <_printf_float+0x2f4>)
 8006720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006724:	bf98      	it	ls
 8006726:	461f      	movls	r7, r3
 8006728:	2303      	movs	r3, #3
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	f02a 0304 	bic.w	r3, sl, #4
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	9600      	str	r6, [sp, #0]
 8006738:	465b      	mov	r3, fp
 800673a:	aa0f      	add	r2, sp, #60	; 0x3c
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f9e2 	bl	8006b08 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	f040 8090 	bne.w	800686a <_printf_float+0x1ce>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	b011      	add	sp, #68	; 0x44
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	463a      	mov	r2, r7
 8006756:	464b      	mov	r3, r9
 8006758:	4638      	mov	r0, r7
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa f956 	bl	8000a0c <__aeabi_dcmpun>
 8006760:	b110      	cbz	r0, 8006768 <_printf_float+0xcc>
 8006762:	4f8c      	ldr	r7, [pc, #560]	; (8006994 <_printf_float+0x2f8>)
 8006764:	4b8c      	ldr	r3, [pc, #560]	; (8006998 <_printf_float+0x2fc>)
 8006766:	e7db      	b.n	8006720 <_printf_float+0x84>
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	a80d      	add	r0, sp, #52	; 0x34
 8006772:	a90e      	add	r1, sp, #56	; 0x38
 8006774:	d140      	bne.n	80067f8 <_printf_float+0x15c>
 8006776:	2306      	movs	r3, #6
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	f04f 0c00 	mov.w	ip, #0
 800677e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006782:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	463a      	mov	r2, r7
 8006792:	464b      	mov	r3, r9
 8006794:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006798:	4628      	mov	r0, r5
 800679a:	f7ff feed 	bl	8006578 <__cvt>
 800679e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80067a2:	2b47      	cmp	r3, #71	; 0x47
 80067a4:	4607      	mov	r7, r0
 80067a6:	d109      	bne.n	80067bc <_printf_float+0x120>
 80067a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067aa:	1cd8      	adds	r0, r3, #3
 80067ac:	db02      	blt.n	80067b4 <_printf_float+0x118>
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	dd47      	ble.n	8006844 <_printf_float+0x1a8>
 80067b4:	f1a8 0802 	sub.w	r8, r8, #2
 80067b8:	fa5f f888 	uxtb.w	r8, r8
 80067bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80067c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067c2:	d824      	bhi.n	800680e <_printf_float+0x172>
 80067c4:	3901      	subs	r1, #1
 80067c6:	4642      	mov	r2, r8
 80067c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067cc:	910d      	str	r1, [sp, #52]	; 0x34
 80067ce:	f7ff ff2f 	bl	8006630 <__exponent>
 80067d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d4:	4681      	mov	r9, r0
 80067d6:	1813      	adds	r3, r2, r0
 80067d8:	2a01      	cmp	r2, #1
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	dc02      	bgt.n	80067e4 <_printf_float+0x148>
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	07d1      	lsls	r1, r2, #31
 80067e2:	d501      	bpl.n	80067e8 <_printf_float+0x14c>
 80067e4:	3301      	adds	r3, #1
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0a2      	beq.n	8006736 <_printf_float+0x9a>
 80067f0:	232d      	movs	r3, #45	; 0x2d
 80067f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f6:	e79e      	b.n	8006736 <_printf_float+0x9a>
 80067f8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80067fc:	f000 816e 	beq.w	8006adc <_printf_float+0x440>
 8006800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006804:	d1b9      	bne.n	800677a <_printf_float+0xde>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1b7      	bne.n	800677a <_printf_float+0xde>
 800680a:	2301      	movs	r3, #1
 800680c:	e7b4      	b.n	8006778 <_printf_float+0xdc>
 800680e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006812:	d119      	bne.n	8006848 <_printf_float+0x1ac>
 8006814:	2900      	cmp	r1, #0
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	dd0c      	ble.n	8006834 <_printf_float+0x198>
 800681a:	6121      	str	r1, [r4, #16]
 800681c:	b913      	cbnz	r3, 8006824 <_printf_float+0x188>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	07d2      	lsls	r2, r2, #31
 8006822:	d502      	bpl.n	800682a <_printf_float+0x18e>
 8006824:	3301      	adds	r3, #1
 8006826:	440b      	add	r3, r1
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682c:	f04f 0900 	mov.w	r9, #0
 8006830:	65a3      	str	r3, [r4, #88]	; 0x58
 8006832:	e7d9      	b.n	80067e8 <_printf_float+0x14c>
 8006834:	b913      	cbnz	r3, 800683c <_printf_float+0x1a0>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	07d0      	lsls	r0, r2, #31
 800683a:	d501      	bpl.n	8006840 <_printf_float+0x1a4>
 800683c:	3302      	adds	r3, #2
 800683e:	e7f3      	b.n	8006828 <_printf_float+0x18c>
 8006840:	2301      	movs	r3, #1
 8006842:	e7f1      	b.n	8006828 <_printf_float+0x18c>
 8006844:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006848:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800684c:	4293      	cmp	r3, r2
 800684e:	db05      	blt.n	800685c <_printf_float+0x1c0>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	07d1      	lsls	r1, r2, #31
 8006856:	d5e8      	bpl.n	800682a <_printf_float+0x18e>
 8006858:	3301      	adds	r3, #1
 800685a:	e7e5      	b.n	8006828 <_printf_float+0x18c>
 800685c:	2b00      	cmp	r3, #0
 800685e:	bfcc      	ite	gt
 8006860:	2301      	movgt	r3, #1
 8006862:	f1c3 0302 	rsble	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	e7de      	b.n	8006828 <_printf_float+0x18c>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	055a      	lsls	r2, r3, #21
 800686e:	d407      	bmi.n	8006880 <_printf_float+0x1e4>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	463a      	mov	r2, r7
 8006874:	4659      	mov	r1, fp
 8006876:	4628      	mov	r0, r5
 8006878:	47b0      	blx	r6
 800687a:	3001      	adds	r0, #1
 800687c:	d129      	bne.n	80068d2 <_printf_float+0x236>
 800687e:	e764      	b.n	800674a <_printf_float+0xae>
 8006880:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006884:	f240 80d7 	bls.w	8006a36 <_printf_float+0x39a>
 8006888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	f7fa f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8006894:	b388      	cbz	r0, 80068fa <_printf_float+0x25e>
 8006896:	2301      	movs	r3, #1
 8006898:	4a40      	ldr	r2, [pc, #256]	; (800699c <_printf_float+0x300>)
 800689a:	4659      	mov	r1, fp
 800689c:	4628      	mov	r0, r5
 800689e:	47b0      	blx	r6
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f af52 	beq.w	800674a <_printf_float+0xae>
 80068a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068aa:	429a      	cmp	r2, r3
 80068ac:	db02      	blt.n	80068b4 <_printf_float+0x218>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	07d8      	lsls	r0, r3, #31
 80068b2:	d50e      	bpl.n	80068d2 <_printf_float+0x236>
 80068b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b8:	4659      	mov	r1, fp
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b0      	blx	r6
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af43 	beq.w	800674a <_printf_float+0xae>
 80068c4:	2700      	movs	r7, #0
 80068c6:	f104 081a 	add.w	r8, r4, #26
 80068ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068cc:	3b01      	subs	r3, #1
 80068ce:	42bb      	cmp	r3, r7
 80068d0:	dc09      	bgt.n	80068e6 <_printf_float+0x24a>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	079f      	lsls	r7, r3, #30
 80068d6:	f100 80fd 	bmi.w	8006ad4 <_printf_float+0x438>
 80068da:	68e0      	ldr	r0, [r4, #12]
 80068dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068de:	4298      	cmp	r0, r3
 80068e0:	bfb8      	it	lt
 80068e2:	4618      	movlt	r0, r3
 80068e4:	e733      	b.n	800674e <_printf_float+0xb2>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4642      	mov	r2, r8
 80068ea:	4659      	mov	r1, fp
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b0      	blx	r6
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f af2a 	beq.w	800674a <_printf_float+0xae>
 80068f6:	3701      	adds	r7, #1
 80068f8:	e7e7      	b.n	80068ca <_printf_float+0x22e>
 80068fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dc2b      	bgt.n	8006958 <_printf_float+0x2bc>
 8006900:	2301      	movs	r3, #1
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <_printf_float+0x300>)
 8006904:	4659      	mov	r1, fp
 8006906:	4628      	mov	r0, r5
 8006908:	47b0      	blx	r6
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af1d 	beq.w	800674a <_printf_float+0xae>
 8006910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006912:	b923      	cbnz	r3, 800691e <_printf_float+0x282>
 8006914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006916:	b913      	cbnz	r3, 800691e <_printf_float+0x282>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07d9      	lsls	r1, r3, #31
 800691c:	d5d9      	bpl.n	80068d2 <_printf_float+0x236>
 800691e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006922:	4659      	mov	r1, fp
 8006924:	4628      	mov	r0, r5
 8006926:	47b0      	blx	r6
 8006928:	3001      	adds	r0, #1
 800692a:	f43f af0e 	beq.w	800674a <_printf_float+0xae>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	f104 091a 	add.w	r9, r4, #26
 8006936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006938:	425b      	negs	r3, r3
 800693a:	4543      	cmp	r3, r8
 800693c:	dc01      	bgt.n	8006942 <_printf_float+0x2a6>
 800693e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006940:	e797      	b.n	8006872 <_printf_float+0x1d6>
 8006942:	2301      	movs	r3, #1
 8006944:	464a      	mov	r2, r9
 8006946:	4659      	mov	r1, fp
 8006948:	4628      	mov	r0, r5
 800694a:	47b0      	blx	r6
 800694c:	3001      	adds	r0, #1
 800694e:	f43f aefc 	beq.w	800674a <_printf_float+0xae>
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	e7ee      	b.n	8006936 <_printf_float+0x29a>
 8006958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800695a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695c:	429a      	cmp	r2, r3
 800695e:	bfa8      	it	ge
 8006960:	461a      	movge	r2, r3
 8006962:	2a00      	cmp	r2, #0
 8006964:	4690      	mov	r8, r2
 8006966:	dd07      	ble.n	8006978 <_printf_float+0x2dc>
 8006968:	4613      	mov	r3, r2
 800696a:	4659      	mov	r1, fp
 800696c:	463a      	mov	r2, r7
 800696e:	4628      	mov	r0, r5
 8006970:	47b0      	blx	r6
 8006972:	3001      	adds	r0, #1
 8006974:	f43f aee9 	beq.w	800674a <_printf_float+0xae>
 8006978:	f104 031a 	add.w	r3, r4, #26
 800697c:	f04f 0a00 	mov.w	sl, #0
 8006980:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006984:	930b      	str	r3, [sp, #44]	; 0x2c
 8006986:	e015      	b.n	80069b4 <_printf_float+0x318>
 8006988:	7fefffff 	.word	0x7fefffff
 800698c:	0800911c 	.word	0x0800911c
 8006990:	08009118 	.word	0x08009118
 8006994:	08009124 	.word	0x08009124
 8006998:	08009120 	.word	0x08009120
 800699c:	08009128 	.word	0x08009128
 80069a0:	2301      	movs	r3, #1
 80069a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069a4:	4659      	mov	r1, fp
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b0      	blx	r6
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f aecd 	beq.w	800674a <_printf_float+0xae>
 80069b0:	f10a 0a01 	add.w	sl, sl, #1
 80069b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80069b8:	eba9 0308 	sub.w	r3, r9, r8
 80069bc:	4553      	cmp	r3, sl
 80069be:	dcef      	bgt.n	80069a0 <_printf_float+0x304>
 80069c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069c4:	429a      	cmp	r2, r3
 80069c6:	444f      	add	r7, r9
 80069c8:	db14      	blt.n	80069f4 <_printf_float+0x358>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	07da      	lsls	r2, r3, #31
 80069ce:	d411      	bmi.n	80069f4 <_printf_float+0x358>
 80069d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069d4:	eba3 0209 	sub.w	r2, r3, r9
 80069d8:	eba3 0901 	sub.w	r9, r3, r1
 80069dc:	4591      	cmp	r9, r2
 80069de:	bfa8      	it	ge
 80069e0:	4691      	movge	r9, r2
 80069e2:	f1b9 0f00 	cmp.w	r9, #0
 80069e6:	dc0d      	bgt.n	8006a04 <_printf_float+0x368>
 80069e8:	2700      	movs	r7, #0
 80069ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ee:	f104 081a 	add.w	r8, r4, #26
 80069f2:	e018      	b.n	8006a26 <_printf_float+0x38a>
 80069f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f8:	4659      	mov	r1, fp
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b0      	blx	r6
 80069fe:	3001      	adds	r0, #1
 8006a00:	d1e6      	bne.n	80069d0 <_printf_float+0x334>
 8006a02:	e6a2      	b.n	800674a <_printf_float+0xae>
 8006a04:	464b      	mov	r3, r9
 8006a06:	463a      	mov	r2, r7
 8006a08:	4659      	mov	r1, fp
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b0      	blx	r6
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d1ea      	bne.n	80069e8 <_printf_float+0x34c>
 8006a12:	e69a      	b.n	800674a <_printf_float+0xae>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4642      	mov	r2, r8
 8006a18:	4659      	mov	r1, fp
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b0      	blx	r6
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f ae93 	beq.w	800674a <_printf_float+0xae>
 8006a24:	3701      	adds	r7, #1
 8006a26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	eba3 0309 	sub.w	r3, r3, r9
 8006a30:	42bb      	cmp	r3, r7
 8006a32:	dcef      	bgt.n	8006a14 <_printf_float+0x378>
 8006a34:	e74d      	b.n	80068d2 <_printf_float+0x236>
 8006a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a38:	2a01      	cmp	r2, #1
 8006a3a:	dc01      	bgt.n	8006a40 <_printf_float+0x3a4>
 8006a3c:	07db      	lsls	r3, r3, #31
 8006a3e:	d538      	bpl.n	8006ab2 <_printf_float+0x416>
 8006a40:	2301      	movs	r3, #1
 8006a42:	463a      	mov	r2, r7
 8006a44:	4659      	mov	r1, fp
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b0      	blx	r6
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f ae7d 	beq.w	800674a <_printf_float+0xae>
 8006a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a54:	4659      	mov	r1, fp
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b0      	blx	r6
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f107 0701 	add.w	r7, r7, #1
 8006a60:	f43f ae73 	beq.w	800674a <_printf_float+0xae>
 8006a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a70:	2300      	movs	r3, #0
 8006a72:	f7f9 ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8006a76:	b9c0      	cbnz	r0, 8006aaa <_printf_float+0x40e>
 8006a78:	4643      	mov	r3, r8
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b0      	blx	r6
 8006a82:	3001      	adds	r0, #1
 8006a84:	d10d      	bne.n	8006aa2 <_printf_float+0x406>
 8006a86:	e660      	b.n	800674a <_printf_float+0xae>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b0      	blx	r6
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f ae59 	beq.w	800674a <_printf_float+0xae>
 8006a98:	3701      	adds	r7, #1
 8006a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	dcf2      	bgt.n	8006a88 <_printf_float+0x3ec>
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aa8:	e6e4      	b.n	8006874 <_printf_float+0x1d8>
 8006aaa:	2700      	movs	r7, #0
 8006aac:	f104 081a 	add.w	r8, r4, #26
 8006ab0:	e7f3      	b.n	8006a9a <_printf_float+0x3fe>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e7e1      	b.n	8006a7a <_printf_float+0x3de>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4642      	mov	r2, r8
 8006aba:	4659      	mov	r1, fp
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b0      	blx	r6
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae42 	beq.w	800674a <_printf_float+0xae>
 8006ac6:	3701      	adds	r7, #1
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	42bb      	cmp	r3, r7
 8006ad0:	dcf1      	bgt.n	8006ab6 <_printf_float+0x41a>
 8006ad2:	e702      	b.n	80068da <_printf_float+0x23e>
 8006ad4:	2700      	movs	r7, #0
 8006ad6:	f104 0819 	add.w	r8, r4, #25
 8006ada:	e7f5      	b.n	8006ac8 <_printf_float+0x42c>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f43f ae94 	beq.w	800680a <_printf_float+0x16e>
 8006ae2:	f04f 0c00 	mov.w	ip, #0
 8006ae6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006aea:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006af4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	463a      	mov	r2, r7
 8006afc:	464b      	mov	r3, r9
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7ff fd3a 	bl	8006578 <__cvt>
 8006b04:	4607      	mov	r7, r0
 8006b06:	e64f      	b.n	80067a8 <_printf_float+0x10c>

08006b08 <_printf_common>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	688a      	ldr	r2, [r1, #8]
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	4606      	mov	r6, r0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfb8      	it	lt
 8006b1a:	4613      	movlt	r3, r2
 8006b1c:	f8c9 3000 	str.w	r3, [r9]
 8006b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b24:	460c      	mov	r4, r1
 8006b26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2a:	b112      	cbz	r2, 8006b32 <_printf_common+0x2a>
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8c9 3000 	str.w	r3, [r9]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b3c:	3302      	addmi	r3, #2
 8006b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	f015 0506 	ands.w	r5, r5, #6
 8006b48:	d107      	bne.n	8006b5a <_printf_common+0x52>
 8006b4a:	f104 0a19 	add.w	sl, r4, #25
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	f8d9 2000 	ldr.w	r2, [r9]
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	42ab      	cmp	r3, r5
 8006b58:	dc29      	bgt.n	8006bae <_printf_common+0xa6>
 8006b5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	3300      	adds	r3, #0
 8006b62:	bf18      	it	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	0692      	lsls	r2, r2, #26
 8006b68:	d42e      	bmi.n	8006bc8 <_printf_common+0xc0>
 8006b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4630      	mov	r0, r6
 8006b72:	47c0      	blx	r8
 8006b74:	3001      	adds	r0, #1
 8006b76:	d021      	beq.n	8006bbc <_printf_common+0xb4>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	68e5      	ldr	r5, [r4, #12]
 8006b7c:	f003 0306 	and.w	r3, r3, #6
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	bf18      	it	ne
 8006b84:	2500      	movne	r5, #0
 8006b86:	f8d9 2000 	ldr.w	r2, [r9]
 8006b8a:	f04f 0900 	mov.w	r9, #0
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf08      	it	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfc4      	itt	gt
 8006ba0:	1a9b      	subgt	r3, r3, r2
 8006ba2:	18ed      	addgt	r5, r5, r3
 8006ba4:	341a      	adds	r4, #26
 8006ba6:	454d      	cmp	r5, r9
 8006ba8:	d11a      	bne.n	8006be0 <_printf_common+0xd8>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e008      	b.n	8006bc0 <_printf_common+0xb8>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	47c0      	blx	r8
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d103      	bne.n	8006bc4 <_printf_common+0xbc>
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	e7c2      	b.n	8006b4e <_printf_common+0x46>
 8006bc8:	2030      	movs	r0, #48	; 0x30
 8006bca:	18e1      	adds	r1, r4, r3
 8006bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd6:	4422      	add	r2, r4
 8006bd8:	3302      	adds	r3, #2
 8006bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bde:	e7c4      	b.n	8006b6a <_printf_common+0x62>
 8006be0:	2301      	movs	r3, #1
 8006be2:	4622      	mov	r2, r4
 8006be4:	4639      	mov	r1, r7
 8006be6:	4630      	mov	r0, r6
 8006be8:	47c0      	blx	r8
 8006bea:	3001      	adds	r0, #1
 8006bec:	d0e6      	beq.n	8006bbc <_printf_common+0xb4>
 8006bee:	f109 0901 	add.w	r9, r9, #1
 8006bf2:	e7d8      	b.n	8006ba6 <_printf_common+0x9e>

08006bf4 <_puts_r>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	b118      	cbz	r0, 8006c04 <_puts_r+0x10>
 8006bfc:	6983      	ldr	r3, [r0, #24]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <_puts_r+0x10>
 8006c00:	f001 f89e 	bl	8007d40 <__sinit>
 8006c04:	69ab      	ldr	r3, [r5, #24]
 8006c06:	68ac      	ldr	r4, [r5, #8]
 8006c08:	b913      	cbnz	r3, 8006c10 <_puts_r+0x1c>
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f001 f898 	bl	8007d40 <__sinit>
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <_puts_r+0xac>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d117      	bne.n	8006c46 <_puts_r+0x52>
 8006c16:	686c      	ldr	r4, [r5, #4]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	d51d      	bpl.n	8006c5a <_puts_r+0x66>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	b1db      	cbz	r3, 8006c5a <_puts_r+0x66>
 8006c22:	3e01      	subs	r6, #1
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60a3      	str	r3, [r4, #8]
 8006c2e:	b9e9      	cbnz	r1, 8006c6c <_puts_r+0x78>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da2e      	bge.n	8006c92 <_puts_r+0x9e>
 8006c34:	4622      	mov	r2, r4
 8006c36:	210a      	movs	r1, #10
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 f88d 	bl	8006d58 <__swbuf_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d011      	beq.n	8006c66 <_puts_r+0x72>
 8006c42:	200a      	movs	r0, #10
 8006c44:	e011      	b.n	8006c6a <_puts_r+0x76>
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <_puts_r+0xb0>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	d101      	bne.n	8006c50 <_puts_r+0x5c>
 8006c4c:	68ac      	ldr	r4, [r5, #8]
 8006c4e:	e7e3      	b.n	8006c18 <_puts_r+0x24>
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <_puts_r+0xb4>)
 8006c52:	429c      	cmp	r4, r3
 8006c54:	bf08      	it	eq
 8006c56:	68ec      	ldreq	r4, [r5, #12]
 8006c58:	e7de      	b.n	8006c18 <_puts_r+0x24>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f8cd 	bl	8006dfc <__swsetup_r>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d0dd      	beq.n	8006c22 <_puts_r+0x2e>
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da04      	bge.n	8006c7a <_puts_r+0x86>
 8006c70:	69a2      	ldr	r2, [r4, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	dc06      	bgt.n	8006c84 <_puts_r+0x90>
 8006c76:	290a      	cmp	r1, #10
 8006c78:	d004      	beq.n	8006c84 <_puts_r+0x90>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	6022      	str	r2, [r4, #0]
 8006c80:	7019      	strb	r1, [r3, #0]
 8006c82:	e7cf      	b.n	8006c24 <_puts_r+0x30>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f866 	bl	8006d58 <__swbuf_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1c9      	bne.n	8006c24 <_puts_r+0x30>
 8006c90:	e7e9      	b.n	8006c66 <_puts_r+0x72>
 8006c92:	200a      	movs	r0, #10
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	7018      	strb	r0, [r3, #0]
 8006c9c:	e7e5      	b.n	8006c6a <_puts_r+0x76>
 8006c9e:	bf00      	nop
 8006ca0:	0800917c 	.word	0x0800917c
 8006ca4:	0800919c 	.word	0x0800919c
 8006ca8:	0800915c 	.word	0x0800915c

08006cac <puts>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <puts+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f7ff bf9f 	b.w	8006bf4 <_puts_r>
 8006cb6:	bf00      	nop
 8006cb8:	20000078 	.word	0x20000078

08006cbc <strcat>:
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	1c5c      	adds	r4, r3, #1
 8006cc4:	b93a      	cbnz	r2, 8006cd6 <strcat+0x1a>
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ccc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d1f9      	bne.n	8006cc8 <strcat+0xc>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	e7f2      	b.n	8006cc0 <strcat+0x4>
	...

08006cdc <__utoa>:
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	b08b      	sub	sp, #44	; 0x2c
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	466e      	mov	r6, sp
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <__utoa+0x78>)
 8006ce8:	f103 0c20 	add.w	ip, r3, #32
 8006cec:	4637      	mov	r7, r6
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	6859      	ldr	r1, [r3, #4]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	c703      	stmia	r7!, {r0, r1}
 8006cf6:	4563      	cmp	r3, ip
 8006cf8:	463e      	mov	r6, r7
 8006cfa:	d1f7      	bne.n	8006cec <__utoa+0x10>
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	791b      	ldrb	r3, [r3, #4]
 8006d00:	6038      	str	r0, [r7, #0]
 8006d02:	713b      	strb	r3, [r7, #4]
 8006d04:	1e93      	subs	r3, r2, #2
 8006d06:	2b22      	cmp	r3, #34	; 0x22
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	d904      	bls.n	8006d18 <__utoa+0x3c>
 8006d0e:	7023      	strb	r3, [r4, #0]
 8006d10:	461c      	mov	r4, r3
 8006d12:	4620      	mov	r0, r4
 8006d14:	b00b      	add	sp, #44	; 0x2c
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d18:	1e66      	subs	r6, r4, #1
 8006d1a:	fbb5 f0f2 	udiv	r0, r5, r2
 8006d1e:	fb02 5510 	mls	r5, r2, r0, r5
 8006d22:	af0a      	add	r7, sp, #40	; 0x28
 8006d24:	443d      	add	r5, r7
 8006d26:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006d30:	4605      	mov	r5, r0
 8006d32:	b968      	cbnz	r0, 8006d50 <__utoa+0x74>
 8006d34:	4622      	mov	r2, r4
 8006d36:	5460      	strb	r0, [r4, r1]
 8006d38:	4423      	add	r3, r4
 8006d3a:	1b19      	subs	r1, r3, r4
 8006d3c:	1b10      	subs	r0, r2, r4
 8006d3e:	4281      	cmp	r1, r0
 8006d40:	dde7      	ble.n	8006d12 <__utoa+0x36>
 8006d42:	7811      	ldrb	r1, [r2, #0]
 8006d44:	7818      	ldrb	r0, [r3, #0]
 8006d46:	f802 0b01 	strb.w	r0, [r2], #1
 8006d4a:	f803 1901 	strb.w	r1, [r3], #-1
 8006d4e:	e7f4      	b.n	8006d3a <__utoa+0x5e>
 8006d50:	460b      	mov	r3, r1
 8006d52:	e7e2      	b.n	8006d1a <__utoa+0x3e>
 8006d54:	0800912a 	.word	0x0800912a

08006d58 <__swbuf_r>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	460e      	mov	r6, r1
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	4605      	mov	r5, r0
 8006d60:	b118      	cbz	r0, 8006d6a <__swbuf_r+0x12>
 8006d62:	6983      	ldr	r3, [r0, #24]
 8006d64:	b90b      	cbnz	r3, 8006d6a <__swbuf_r+0x12>
 8006d66:	f000 ffeb 	bl	8007d40 <__sinit>
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <__swbuf_r+0x98>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	d12a      	bne.n	8006dc6 <__swbuf_r+0x6e>
 8006d70:	686c      	ldr	r4, [r5, #4]
 8006d72:	69a3      	ldr	r3, [r4, #24]
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	071a      	lsls	r2, r3, #28
 8006d7a:	d52e      	bpl.n	8006dda <__swbuf_r+0x82>
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	b363      	cbz	r3, 8006dda <__swbuf_r+0x82>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	b2f6      	uxtb	r6, r6
 8006d86:	1ac0      	subs	r0, r0, r3
 8006d88:	6963      	ldr	r3, [r4, #20]
 8006d8a:	4637      	mov	r7, r6
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	dc04      	bgt.n	8006d9a <__swbuf_r+0x42>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 ff6a 	bl	8007c6c <_fflush_r>
 8006d98:	bb28      	cbnz	r0, 8006de6 <__swbuf_r+0x8e>
 8006d9a:	68a3      	ldr	r3, [r4, #8]
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	60a3      	str	r3, [r4, #8]
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	6022      	str	r2, [r4, #0]
 8006da8:	701e      	strb	r6, [r3, #0]
 8006daa:	6963      	ldr	r3, [r4, #20]
 8006dac:	4283      	cmp	r3, r0
 8006dae:	d004      	beq.n	8006dba <__swbuf_r+0x62>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	07db      	lsls	r3, r3, #31
 8006db4:	d519      	bpl.n	8006dea <__swbuf_r+0x92>
 8006db6:	2e0a      	cmp	r6, #10
 8006db8:	d117      	bne.n	8006dea <__swbuf_r+0x92>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 ff55 	bl	8007c6c <_fflush_r>
 8006dc2:	b190      	cbz	r0, 8006dea <__swbuf_r+0x92>
 8006dc4:	e00f      	b.n	8006de6 <__swbuf_r+0x8e>
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <__swbuf_r+0x9c>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d101      	bne.n	8006dd0 <__swbuf_r+0x78>
 8006dcc:	68ac      	ldr	r4, [r5, #8]
 8006dce:	e7d0      	b.n	8006d72 <__swbuf_r+0x1a>
 8006dd0:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <__swbuf_r+0xa0>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	bf08      	it	eq
 8006dd6:	68ec      	ldreq	r4, [r5, #12]
 8006dd8:	e7cb      	b.n	8006d72 <__swbuf_r+0x1a>
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 f80d 	bl	8006dfc <__swsetup_r>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d0cc      	beq.n	8006d80 <__swbuf_r+0x28>
 8006de6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dea:	4638      	mov	r0, r7
 8006dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dee:	bf00      	nop
 8006df0:	0800917c 	.word	0x0800917c
 8006df4:	0800919c 	.word	0x0800919c
 8006df8:	0800915c 	.word	0x0800915c

08006dfc <__swsetup_r>:
 8006dfc:	4b32      	ldr	r3, [pc, #200]	; (8006ec8 <__swsetup_r+0xcc>)
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	b125      	cbz	r5, 8006e12 <__swsetup_r+0x16>
 8006e08:	69ab      	ldr	r3, [r5, #24]
 8006e0a:	b913      	cbnz	r3, 8006e12 <__swsetup_r+0x16>
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 ff97 	bl	8007d40 <__sinit>
 8006e12:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <__swsetup_r+0xd0>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	d10f      	bne.n	8006e38 <__swsetup_r+0x3c>
 8006e18:	686c      	ldr	r4, [r5, #4]
 8006e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	0715      	lsls	r5, r2, #28
 8006e22:	d42c      	bmi.n	8006e7e <__swsetup_r+0x82>
 8006e24:	06d0      	lsls	r0, r2, #27
 8006e26:	d411      	bmi.n	8006e4c <__swsetup_r+0x50>
 8006e28:	2209      	movs	r2, #9
 8006e2a:	6032      	str	r2, [r6, #0]
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295
 8006e36:	e03e      	b.n	8006eb6 <__swsetup_r+0xba>
 8006e38:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <__swsetup_r+0xd4>)
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	d101      	bne.n	8006e42 <__swsetup_r+0x46>
 8006e3e:	68ac      	ldr	r4, [r5, #8]
 8006e40:	e7eb      	b.n	8006e1a <__swsetup_r+0x1e>
 8006e42:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <__swsetup_r+0xd8>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	bf08      	it	eq
 8006e48:	68ec      	ldreq	r4, [r5, #12]
 8006e4a:	e7e6      	b.n	8006e1a <__swsetup_r+0x1e>
 8006e4c:	0751      	lsls	r1, r2, #29
 8006e4e:	d512      	bpl.n	8006e76 <__swsetup_r+0x7a>
 8006e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e52:	b141      	cbz	r1, 8006e66 <__swsetup_r+0x6a>
 8006e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e58:	4299      	cmp	r1, r3
 8006e5a:	d002      	beq.n	8006e62 <__swsetup_r+0x66>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f001 fb69 	bl	8008534 <_free_r>
 8006e62:	2300      	movs	r3, #0
 8006e64:	6363      	str	r3, [r4, #52]	; 0x34
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f043 0308 	orr.w	r3, r3, #8
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	b94b      	cbnz	r3, 8006e96 <__swsetup_r+0x9a>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8c:	d003      	beq.n	8006e96 <__swsetup_r+0x9a>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4630      	mov	r0, r6
 8006e92:	f001 f811 	bl	8007eb8 <__smakebuf_r>
 8006e96:	89a2      	ldrh	r2, [r4, #12]
 8006e98:	f012 0301 	ands.w	r3, r2, #1
 8006e9c:	d00c      	beq.n	8006eb8 <__swsetup_r+0xbc>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	6963      	ldr	r3, [r4, #20]
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	61a3      	str	r3, [r4, #24]
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b953      	cbnz	r3, 8006ec2 <__swsetup_r+0xc6>
 8006eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006eb4:	d1ba      	bne.n	8006e2c <__swsetup_r+0x30>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	0792      	lsls	r2, r2, #30
 8006eba:	bf58      	it	pl
 8006ebc:	6963      	ldrpl	r3, [r4, #20]
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	e7f2      	b.n	8006ea8 <__swsetup_r+0xac>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	e7f7      	b.n	8006eb6 <__swsetup_r+0xba>
 8006ec6:	bf00      	nop
 8006ec8:	20000078 	.word	0x20000078
 8006ecc:	0800917c 	.word	0x0800917c
 8006ed0:	0800919c 	.word	0x0800919c
 8006ed4:	0800915c 	.word	0x0800915c

08006ed8 <quorem>:
 8006ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	6903      	ldr	r3, [r0, #16]
 8006ede:	690c      	ldr	r4, [r1, #16]
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	f2c0 8084 	blt.w	8006ff0 <quorem+0x118>
 8006ee8:	3c01      	subs	r4, #1
 8006eea:	f101 0714 	add.w	r7, r1, #20
 8006eee:	f100 0614 	add.w	r6, r0, #20
 8006ef2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006ef6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006efa:	3501      	adds	r5, #1
 8006efc:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006f04:	eb06 030c 	add.w	r3, r6, ip
 8006f08:	eb07 090c 	add.w	r9, r7, ip
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	b39d      	cbz	r5, 8006f78 <quorem+0xa0>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	4638      	mov	r0, r7
 8006f16:	46b6      	mov	lr, r6
 8006f18:	46d3      	mov	fp, sl
 8006f1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f1e:	b293      	uxth	r3, r2
 8006f20:	fb05 a303 	mla	r3, r5, r3, sl
 8006f24:	0c12      	lsrs	r2, r2, #16
 8006f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f2a:	fb05 a202 	mla	r2, r5, r2, sl
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ebab 0303 	sub.w	r3, fp, r3
 8006f34:	f8de b000 	ldr.w	fp, [lr]
 8006f38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006f3c:	fa1f fb8b 	uxth.w	fp, fp
 8006f40:	445b      	add	r3, fp
 8006f42:	fa1f fb82 	uxth.w	fp, r2
 8006f46:	f8de 2000 	ldr.w	r2, [lr]
 8006f4a:	4581      	cmp	r9, r0
 8006f4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f5e:	f84e 3b04 	str.w	r3, [lr], #4
 8006f62:	d2da      	bcs.n	8006f1a <quorem+0x42>
 8006f64:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f68:	b933      	cbnz	r3, 8006f78 <quorem+0xa0>
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	429e      	cmp	r6, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	d331      	bcc.n	8006fd8 <quorem+0x100>
 8006f74:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f78:	4640      	mov	r0, r8
 8006f7a:	f001 fa05 	bl	8008388 <__mcmp>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	db26      	blt.n	8006fd0 <quorem+0xf8>
 8006f82:	4630      	mov	r0, r6
 8006f84:	f04f 0c00 	mov.w	ip, #0
 8006f88:	3501      	adds	r5, #1
 8006f8a:	f857 1b04 	ldr.w	r1, [r7], #4
 8006f8e:	f8d0 e000 	ldr.w	lr, [r0]
 8006f92:	b28b      	uxth	r3, r1
 8006f94:	ebac 0303 	sub.w	r3, ip, r3
 8006f98:	fa1f f28e 	uxth.w	r2, lr
 8006f9c:	4413      	add	r3, r2
 8006f9e:	0c0a      	lsrs	r2, r1, #16
 8006fa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fae:	45b9      	cmp	r9, r7
 8006fb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fb4:	f840 3b04 	str.w	r3, [r0], #4
 8006fb8:	d2e7      	bcs.n	8006f8a <quorem+0xb2>
 8006fba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006fbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006fc2:	b92a      	cbnz	r2, 8006fd0 <quorem+0xf8>
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	d30b      	bcc.n	8006fe4 <quorem+0x10c>
 8006fcc:	f8c8 4010 	str.w	r4, [r8, #16]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	b003      	add	sp, #12
 8006fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d1c9      	bne.n	8006f74 <quorem+0x9c>
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	e7c4      	b.n	8006f6e <quorem+0x96>
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	3b04      	subs	r3, #4
 8006fe8:	2a00      	cmp	r2, #0
 8006fea:	d1ef      	bne.n	8006fcc <quorem+0xf4>
 8006fec:	3c01      	subs	r4, #1
 8006fee:	e7ea      	b.n	8006fc6 <quorem+0xee>
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e7ee      	b.n	8006fd2 <quorem+0xfa>
 8006ff4:	0000      	movs	r0, r0
	...

08006ff8 <_dtoa_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	461f      	mov	r7, r3
 8007000:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007002:	b095      	sub	sp, #84	; 0x54
 8007004:	4604      	mov	r4, r0
 8007006:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800700a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800700e:	b93d      	cbnz	r5, 8007020 <_dtoa_r+0x28>
 8007010:	2010      	movs	r0, #16
 8007012:	f000 ff91 	bl	8007f38 <malloc>
 8007016:	6260      	str	r0, [r4, #36]	; 0x24
 8007018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800701c:	6005      	str	r5, [r0, #0]
 800701e:	60c5      	str	r5, [r0, #12]
 8007020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	b151      	cbz	r1, 800703c <_dtoa_r+0x44>
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	2301      	movs	r3, #1
 800702a:	4093      	lsls	r3, r2
 800702c:	604a      	str	r2, [r1, #4]
 800702e:	608b      	str	r3, [r1, #8]
 8007030:	4620      	mov	r0, r4
 8007032:	f000 ffc8 	bl	8007fc6 <_Bfree>
 8007036:	2200      	movs	r2, #0
 8007038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	1e3b      	subs	r3, r7, #0
 800703e:	bfaf      	iteee	ge
 8007040:	2300      	movge	r3, #0
 8007042:	2201      	movlt	r2, #1
 8007044:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007048:	9303      	strlt	r3, [sp, #12]
 800704a:	bfac      	ite	ge
 800704c:	f8c8 3000 	strge.w	r3, [r8]
 8007050:	f8c8 2000 	strlt.w	r2, [r8]
 8007054:	4bae      	ldr	r3, [pc, #696]	; (8007310 <_dtoa_r+0x318>)
 8007056:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800705a:	ea33 0308 	bics.w	r3, r3, r8
 800705e:	d11b      	bne.n	8007098 <_dtoa_r+0xa0>
 8007060:	f242 730f 	movw	r3, #9999	; 0x270f
 8007064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	b923      	cbnz	r3, 8007076 <_dtoa_r+0x7e>
 800706c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007070:	2800      	cmp	r0, #0
 8007072:	f000 8545 	beq.w	8007b00 <_dtoa_r+0xb08>
 8007076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007078:	b953      	cbnz	r3, 8007090 <_dtoa_r+0x98>
 800707a:	4ba6      	ldr	r3, [pc, #664]	; (8007314 <_dtoa_r+0x31c>)
 800707c:	e021      	b.n	80070c2 <_dtoa_r+0xca>
 800707e:	4ba6      	ldr	r3, [pc, #664]	; (8007318 <_dtoa_r+0x320>)
 8007080:	9306      	str	r3, [sp, #24]
 8007082:	3308      	adds	r3, #8
 8007084:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	9806      	ldr	r0, [sp, #24]
 800708a:	b015      	add	sp, #84	; 0x54
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007090:	4ba0      	ldr	r3, [pc, #640]	; (8007314 <_dtoa_r+0x31c>)
 8007092:	9306      	str	r3, [sp, #24]
 8007094:	3303      	adds	r3, #3
 8007096:	e7f5      	b.n	8007084 <_dtoa_r+0x8c>
 8007098:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80070a8:	4682      	mov	sl, r0
 80070aa:	b160      	cbz	r0, 80070c6 <_dtoa_r+0xce>
 80070ac:	2301      	movs	r3, #1
 80070ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8520 	beq.w	8007afa <_dtoa_r+0xb02>
 80070ba:	4b98      	ldr	r3, [pc, #608]	; (800731c <_dtoa_r+0x324>)
 80070bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	9306      	str	r3, [sp, #24]
 80070c4:	e7e0      	b.n	8007088 <_dtoa_r+0x90>
 80070c6:	ab12      	add	r3, sp, #72	; 0x48
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	ab13      	add	r3, sp, #76	; 0x4c
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4632      	mov	r2, r6
 80070d0:	463b      	mov	r3, r7
 80070d2:	4620      	mov	r0, r4
 80070d4:	f001 f9d0 	bl	8008478 <__d2b>
 80070d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80070dc:	4683      	mov	fp, r0
 80070de:	2d00      	cmp	r5, #0
 80070e0:	d07d      	beq.n	80071de <_dtoa_r+0x1e6>
 80070e2:	46b0      	mov	r8, r6
 80070e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80070ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80070f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80070f8:	2200      	movs	r2, #0
 80070fa:	4b89      	ldr	r3, [pc, #548]	; (8007320 <_dtoa_r+0x328>)
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 f832 	bl	8000168 <__aeabi_dsub>
 8007104:	a37c      	add	r3, pc, #496	; (adr r3, 80072f8 <_dtoa_r+0x300>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 f9e5 	bl	80004d8 <__aeabi_dmul>
 800710e:	a37c      	add	r3, pc, #496	; (adr r3, 8007300 <_dtoa_r+0x308>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f7f9 f82a 	bl	800016c <__adddf3>
 8007118:	4606      	mov	r6, r0
 800711a:	4628      	mov	r0, r5
 800711c:	460f      	mov	r7, r1
 800711e:	f7f9 f971 	bl	8000404 <__aeabi_i2d>
 8007122:	a379      	add	r3, pc, #484	; (adr r3, 8007308 <_dtoa_r+0x310>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 f9d6 	bl	80004d8 <__aeabi_dmul>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 f81a 	bl	800016c <__adddf3>
 8007138:	4606      	mov	r6, r0
 800713a:	460f      	mov	r7, r1
 800713c:	f7f9 fc7c 	bl	8000a38 <__aeabi_d2iz>
 8007140:	2200      	movs	r2, #0
 8007142:	4682      	mov	sl, r0
 8007144:	2300      	movs	r3, #0
 8007146:	4630      	mov	r0, r6
 8007148:	4639      	mov	r1, r7
 800714a:	f7f9 fc37 	bl	80009bc <__aeabi_dcmplt>
 800714e:	b148      	cbz	r0, 8007164 <_dtoa_r+0x16c>
 8007150:	4650      	mov	r0, sl
 8007152:	f7f9 f957 	bl	8000404 <__aeabi_i2d>
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	f7f9 fc25 	bl	80009a8 <__aeabi_dcmpeq>
 800715e:	b908      	cbnz	r0, 8007164 <_dtoa_r+0x16c>
 8007160:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007164:	f1ba 0f16 	cmp.w	sl, #22
 8007168:	d85a      	bhi.n	8007220 <_dtoa_r+0x228>
 800716a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800716e:	496d      	ldr	r1, [pc, #436]	; (8007324 <_dtoa_r+0x32c>)
 8007170:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007178:	f7f9 fc3e 	bl	80009f8 <__aeabi_dcmpgt>
 800717c:	2800      	cmp	r0, #0
 800717e:	d051      	beq.n	8007224 <_dtoa_r+0x22c>
 8007180:	2300      	movs	r3, #0
 8007182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007186:	930d      	str	r3, [sp, #52]	; 0x34
 8007188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800718a:	1b5d      	subs	r5, r3, r5
 800718c:	1e6b      	subs	r3, r5, #1
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	bf43      	ittte	mi
 8007192:	2300      	movmi	r3, #0
 8007194:	f1c5 0901 	rsbmi	r9, r5, #1
 8007198:	9307      	strmi	r3, [sp, #28]
 800719a:	f04f 0900 	movpl.w	r9, #0
 800719e:	f1ba 0f00 	cmp.w	sl, #0
 80071a2:	db41      	blt.n	8007228 <_dtoa_r+0x230>
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80071aa:	4453      	add	r3, sl
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9308      	str	r3, [sp, #32]
 80071b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	f200 808f 	bhi.w	80072d8 <_dtoa_r+0x2e0>
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	bfc4      	itt	gt
 80071be:	3b04      	subgt	r3, #4
 80071c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80071c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071c4:	bfc8      	it	gt
 80071c6:	2500      	movgt	r5, #0
 80071c8:	f1a3 0302 	sub.w	r3, r3, #2
 80071cc:	bfd8      	it	le
 80071ce:	2501      	movle	r5, #1
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	f200 808d 	bhi.w	80072f0 <_dtoa_r+0x2f8>
 80071d6:	e8df f003 	tbb	[pc, r3]
 80071da:	7d7b      	.short	0x7d7b
 80071dc:	6f2f      	.short	0x6f2f
 80071de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071e2:	441d      	add	r5, r3
 80071e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80071e8:	2820      	cmp	r0, #32
 80071ea:	dd13      	ble.n	8007214 <_dtoa_r+0x21c>
 80071ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	fa08 f800 	lsl.w	r8, r8, r0
 80071f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80071fa:	fa23 f000 	lsr.w	r0, r3, r0
 80071fe:	ea48 0000 	orr.w	r0, r8, r0
 8007202:	f7f9 f8ef 	bl	80003e4 <__aeabi_ui2d>
 8007206:	2301      	movs	r3, #1
 8007208:	4680      	mov	r8, r0
 800720a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800720e:	3d01      	subs	r5, #1
 8007210:	9310      	str	r3, [sp, #64]	; 0x40
 8007212:	e771      	b.n	80070f8 <_dtoa_r+0x100>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	f1c0 0020 	rsb	r0, r0, #32
 800721a:	fa03 f000 	lsl.w	r0, r3, r0
 800721e:	e7f0      	b.n	8007202 <_dtoa_r+0x20a>
 8007220:	2301      	movs	r3, #1
 8007222:	e7b0      	b.n	8007186 <_dtoa_r+0x18e>
 8007224:	900d      	str	r0, [sp, #52]	; 0x34
 8007226:	e7af      	b.n	8007188 <_dtoa_r+0x190>
 8007228:	f1ca 0300 	rsb	r3, sl, #0
 800722c:	9308      	str	r3, [sp, #32]
 800722e:	2300      	movs	r3, #0
 8007230:	eba9 090a 	sub.w	r9, r9, sl
 8007234:	930c      	str	r3, [sp, #48]	; 0x30
 8007236:	e7bc      	b.n	80071b2 <_dtoa_r+0x1ba>
 8007238:	2301      	movs	r3, #1
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800723e:	2b00      	cmp	r3, #0
 8007240:	dd74      	ble.n	800732c <_dtoa_r+0x334>
 8007242:	4698      	mov	r8, r3
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	2200      	movs	r2, #0
 8007248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800724a:	6072      	str	r2, [r6, #4]
 800724c:	2204      	movs	r2, #4
 800724e:	f102 0014 	add.w	r0, r2, #20
 8007252:	4298      	cmp	r0, r3
 8007254:	6871      	ldr	r1, [r6, #4]
 8007256:	d96e      	bls.n	8007336 <_dtoa_r+0x33e>
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fe80 	bl	8007f5e <_Balloc>
 800725e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b8 0f0e 	cmp.w	r8, #14
 8007268:	9306      	str	r3, [sp, #24]
 800726a:	f200 80ed 	bhi.w	8007448 <_dtoa_r+0x450>
 800726e:	2d00      	cmp	r5, #0
 8007270:	f000 80ea 	beq.w	8007448 <_dtoa_r+0x450>
 8007274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007278:	f1ba 0f00 	cmp.w	sl, #0
 800727c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007280:	dd77      	ble.n	8007372 <_dtoa_r+0x37a>
 8007282:	4a28      	ldr	r2, [pc, #160]	; (8007324 <_dtoa_r+0x32c>)
 8007284:	f00a 030f 	and.w	r3, sl, #15
 8007288:	ea4f 162a 	mov.w	r6, sl, asr #4
 800728c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007290:	06f0      	lsls	r0, r6, #27
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800729a:	d568      	bpl.n	800736e <_dtoa_r+0x376>
 800729c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <_dtoa_r+0x330>)
 80072a2:	2503      	movs	r5, #3
 80072a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072a8:	f7f9 fa40 	bl	800072c <__aeabi_ddiv>
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	f006 060f 	and.w	r6, r6, #15
 80072b4:	4f1c      	ldr	r7, [pc, #112]	; (8007328 <_dtoa_r+0x330>)
 80072b6:	e04f      	b.n	8007358 <_dtoa_r+0x360>
 80072b8:	2301      	movs	r3, #1
 80072ba:	9309      	str	r3, [sp, #36]	; 0x24
 80072bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072be:	4453      	add	r3, sl
 80072c0:	f103 0801 	add.w	r8, r3, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	4643      	mov	r3, r8
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	bfb8      	it	lt
 80072cc:	2301      	movlt	r3, #1
 80072ce:	e7ba      	b.n	8007246 <_dtoa_r+0x24e>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e7b2      	b.n	800723a <_dtoa_r+0x242>
 80072d4:	2300      	movs	r3, #0
 80072d6:	e7f0      	b.n	80072ba <_dtoa_r+0x2c2>
 80072d8:	2501      	movs	r5, #1
 80072da:	2300      	movs	r3, #0
 80072dc:	9509      	str	r5, [sp, #36]	; 0x24
 80072de:	931e      	str	r3, [sp, #120]	; 0x78
 80072e0:	f04f 33ff 	mov.w	r3, #4294967295
 80072e4:	2200      	movs	r2, #0
 80072e6:	9304      	str	r3, [sp, #16]
 80072e8:	4698      	mov	r8, r3
 80072ea:	2312      	movs	r3, #18
 80072ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80072ee:	e7aa      	b.n	8007246 <_dtoa_r+0x24e>
 80072f0:	2301      	movs	r3, #1
 80072f2:	9309      	str	r3, [sp, #36]	; 0x24
 80072f4:	e7f4      	b.n	80072e0 <_dtoa_r+0x2e8>
 80072f6:	bf00      	nop
 80072f8:	636f4361 	.word	0x636f4361
 80072fc:	3fd287a7 	.word	0x3fd287a7
 8007300:	8b60c8b3 	.word	0x8b60c8b3
 8007304:	3fc68a28 	.word	0x3fc68a28
 8007308:	509f79fb 	.word	0x509f79fb
 800730c:	3fd34413 	.word	0x3fd34413
 8007310:	7ff00000 	.word	0x7ff00000
 8007314:	08009158 	.word	0x08009158
 8007318:	0800914f 	.word	0x0800914f
 800731c:	08009129 	.word	0x08009129
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	080091e8 	.word	0x080091e8
 8007328:	080091c0 	.word	0x080091c0
 800732c:	2301      	movs	r3, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	4698      	mov	r8, r3
 8007332:	461a      	mov	r2, r3
 8007334:	e7da      	b.n	80072ec <_dtoa_r+0x2f4>
 8007336:	3101      	adds	r1, #1
 8007338:	6071      	str	r1, [r6, #4]
 800733a:	0052      	lsls	r2, r2, #1
 800733c:	e787      	b.n	800724e <_dtoa_r+0x256>
 800733e:	07f1      	lsls	r1, r6, #31
 8007340:	d508      	bpl.n	8007354 <_dtoa_r+0x35c>
 8007342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007352:	3501      	adds	r5, #1
 8007354:	1076      	asrs	r6, r6, #1
 8007356:	3708      	adds	r7, #8
 8007358:	2e00      	cmp	r6, #0
 800735a:	d1f0      	bne.n	800733e <_dtoa_r+0x346>
 800735c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007364:	f7f9 f9e2 	bl	800072c <__aeabi_ddiv>
 8007368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736c:	e01b      	b.n	80073a6 <_dtoa_r+0x3ae>
 800736e:	2502      	movs	r5, #2
 8007370:	e7a0      	b.n	80072b4 <_dtoa_r+0x2bc>
 8007372:	f000 80a4 	beq.w	80074be <_dtoa_r+0x4c6>
 8007376:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800737a:	f1ca 0600 	rsb	r6, sl, #0
 800737e:	4ba0      	ldr	r3, [pc, #640]	; (8007600 <_dtoa_r+0x608>)
 8007380:	f006 020f 	and.w	r2, r6, #15
 8007384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	2502      	movs	r5, #2
 8007392:	2300      	movs	r3, #0
 8007394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007398:	4f9a      	ldr	r7, [pc, #616]	; (8007604 <_dtoa_r+0x60c>)
 800739a:	1136      	asrs	r6, r6, #4
 800739c:	2e00      	cmp	r6, #0
 800739e:	f040 8083 	bne.w	80074a8 <_dtoa_r+0x4b0>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e0      	bne.n	8007368 <_dtoa_r+0x370>
 80073a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 808a 	beq.w	80074c2 <_dtoa_r+0x4ca>
 80073ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80073b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b92      	ldr	r3, [pc, #584]	; (8007608 <_dtoa_r+0x610>)
 80073be:	f7f9 fafd 	bl	80009bc <__aeabi_dcmplt>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d07d      	beq.n	80074c2 <_dtoa_r+0x4ca>
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	d07a      	beq.n	80074c2 <_dtoa_r+0x4ca>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dd36      	ble.n	8007440 <_dtoa_r+0x448>
 80073d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073d6:	2200      	movs	r2, #0
 80073d8:	4b8c      	ldr	r3, [pc, #560]	; (800760c <_dtoa_r+0x614>)
 80073da:	f7f9 f87d 	bl	80004d8 <__aeabi_dmul>
 80073de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e2:	9e04      	ldr	r6, [sp, #16]
 80073e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80073e8:	3501      	adds	r5, #1
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7f9 f80a 	bl	8000404 <__aeabi_i2d>
 80073f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f4:	f7f9 f870 	bl	80004d8 <__aeabi_dmul>
 80073f8:	2200      	movs	r2, #0
 80073fa:	4b85      	ldr	r3, [pc, #532]	; (8007610 <_dtoa_r+0x618>)
 80073fc:	f7f8 feb6 	bl	800016c <__adddf3>
 8007400:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007404:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007408:	950b      	str	r5, [sp, #44]	; 0x2c
 800740a:	2e00      	cmp	r6, #0
 800740c:	d15c      	bne.n	80074c8 <_dtoa_r+0x4d0>
 800740e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	4b7f      	ldr	r3, [pc, #508]	; (8007614 <_dtoa_r+0x61c>)
 8007416:	f7f8 fea7 	bl	8000168 <__aeabi_dsub>
 800741a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741c:	462b      	mov	r3, r5
 800741e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007422:	f7f9 fae9 	bl	80009f8 <__aeabi_dcmpgt>
 8007426:	2800      	cmp	r0, #0
 8007428:	f040 8281 	bne.w	800792e <_dtoa_r+0x936>
 800742c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007432:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007436:	f7f9 fac1 	bl	80009bc <__aeabi_dcmplt>
 800743a:	2800      	cmp	r0, #0
 800743c:	f040 8275 	bne.w	800792a <_dtoa_r+0x932>
 8007440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800744a:	2b00      	cmp	r3, #0
 800744c:	f2c0 814b 	blt.w	80076e6 <_dtoa_r+0x6ee>
 8007450:	f1ba 0f0e 	cmp.w	sl, #14
 8007454:	f300 8147 	bgt.w	80076e6 <_dtoa_r+0x6ee>
 8007458:	4b69      	ldr	r3, [pc, #420]	; (8007600 <_dtoa_r+0x608>)
 800745a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007468:	2b00      	cmp	r3, #0
 800746a:	f280 80d7 	bge.w	800761c <_dtoa_r+0x624>
 800746e:	f1b8 0f00 	cmp.w	r8, #0
 8007472:	f300 80d3 	bgt.w	800761c <_dtoa_r+0x624>
 8007476:	f040 8257 	bne.w	8007928 <_dtoa_r+0x930>
 800747a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800747e:	2200      	movs	r2, #0
 8007480:	4b64      	ldr	r3, [pc, #400]	; (8007614 <_dtoa_r+0x61c>)
 8007482:	f7f9 f829 	bl	80004d8 <__aeabi_dmul>
 8007486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800748a:	f7f9 faab 	bl	80009e4 <__aeabi_dcmpge>
 800748e:	4646      	mov	r6, r8
 8007490:	4647      	mov	r7, r8
 8007492:	2800      	cmp	r0, #0
 8007494:	f040 822d 	bne.w	80078f2 <_dtoa_r+0x8fa>
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	9a06      	ldr	r2, [sp, #24]
 800749c:	1c5d      	adds	r5, r3, #1
 800749e:	2331      	movs	r3, #49	; 0x31
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	7013      	strb	r3, [r2, #0]
 80074a6:	e228      	b.n	80078fa <_dtoa_r+0x902>
 80074a8:	07f2      	lsls	r2, r6, #31
 80074aa:	d505      	bpl.n	80074b8 <_dtoa_r+0x4c0>
 80074ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b0:	f7f9 f812 	bl	80004d8 <__aeabi_dmul>
 80074b4:	2301      	movs	r3, #1
 80074b6:	3501      	adds	r5, #1
 80074b8:	1076      	asrs	r6, r6, #1
 80074ba:	3708      	adds	r7, #8
 80074bc:	e76e      	b.n	800739c <_dtoa_r+0x3a4>
 80074be:	2502      	movs	r5, #2
 80074c0:	e771      	b.n	80073a6 <_dtoa_r+0x3ae>
 80074c2:	4657      	mov	r7, sl
 80074c4:	4646      	mov	r6, r8
 80074c6:	e790      	b.n	80073ea <_dtoa_r+0x3f2>
 80074c8:	4b4d      	ldr	r3, [pc, #308]	; (8007600 <_dtoa_r+0x608>)
 80074ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80074d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d048      	beq.n	800756a <_dtoa_r+0x572>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	2000      	movs	r0, #0
 80074de:	494e      	ldr	r1, [pc, #312]	; (8007618 <_dtoa_r+0x620>)
 80074e0:	f7f9 f924 	bl	800072c <__aeabi_ddiv>
 80074e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074e8:	f7f8 fe3e 	bl	8000168 <__aeabi_dsub>
 80074ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074f0:	9d06      	ldr	r5, [sp, #24]
 80074f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f6:	f7f9 fa9f 	bl	8000a38 <__aeabi_d2iz>
 80074fa:	9011      	str	r0, [sp, #68]	; 0x44
 80074fc:	f7f8 ff82 	bl	8000404 <__aeabi_i2d>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007508:	f7f8 fe2e 	bl	8000168 <__aeabi_dsub>
 800750c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007512:	3330      	adds	r3, #48	; 0x30
 8007514:	f805 3b01 	strb.w	r3, [r5], #1
 8007518:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800751c:	f7f9 fa4e 	bl	80009bc <__aeabi_dcmplt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d163      	bne.n	80075ec <_dtoa_r+0x5f4>
 8007524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007528:	2000      	movs	r0, #0
 800752a:	4937      	ldr	r1, [pc, #220]	; (8007608 <_dtoa_r+0x610>)
 800752c:	f7f8 fe1c 	bl	8000168 <__aeabi_dsub>
 8007530:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007534:	f7f9 fa42 	bl	80009bc <__aeabi_dcmplt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 80b5 	bne.w	80076a8 <_dtoa_r+0x6b0>
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	1aeb      	subs	r3, r5, r3
 8007542:	429e      	cmp	r6, r3
 8007544:	f77f af7c 	ble.w	8007440 <_dtoa_r+0x448>
 8007548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800754c:	2200      	movs	r2, #0
 800754e:	4b2f      	ldr	r3, [pc, #188]	; (800760c <_dtoa_r+0x614>)
 8007550:	f7f8 ffc2 	bl	80004d8 <__aeabi_dmul>
 8007554:	2200      	movs	r2, #0
 8007556:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800755a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755e:	4b2b      	ldr	r3, [pc, #172]	; (800760c <_dtoa_r+0x614>)
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007568:	e7c3      	b.n	80074f2 <_dtoa_r+0x4fa>
 800756a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800756e:	f7f8 ffb3 	bl	80004d8 <__aeabi_dmul>
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007578:	199d      	adds	r5, r3, r6
 800757a:	461e      	mov	r6, r3
 800757c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007580:	f7f9 fa5a 	bl	8000a38 <__aeabi_d2iz>
 8007584:	9011      	str	r0, [sp, #68]	; 0x44
 8007586:	f7f8 ff3d 	bl	8000404 <__aeabi_i2d>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007592:	f7f8 fde9 	bl	8000168 <__aeabi_dsub>
 8007596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800759c:	3330      	adds	r3, #48	; 0x30
 800759e:	f806 3b01 	strb.w	r3, [r6], #1
 80075a2:	42ae      	cmp	r6, r5
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	d124      	bne.n	80075f4 <_dtoa_r+0x5fc>
 80075aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <_dtoa_r+0x620>)
 80075b0:	f7f8 fddc 	bl	800016c <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075bc:	f7f9 fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d171      	bne.n	80076a8 <_dtoa_r+0x6b0>
 80075c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075c8:	2000      	movs	r0, #0
 80075ca:	4913      	ldr	r1, [pc, #76]	; (8007618 <_dtoa_r+0x620>)
 80075cc:	f7f8 fdcc 	bl	8000168 <__aeabi_dsub>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d8:	f7f9 f9f0 	bl	80009bc <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f af2f 	beq.w	8007440 <_dtoa_r+0x448>
 80075e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075e6:	1e6a      	subs	r2, r5, #1
 80075e8:	2b30      	cmp	r3, #48	; 0x30
 80075ea:	d001      	beq.n	80075f0 <_dtoa_r+0x5f8>
 80075ec:	46ba      	mov	sl, r7
 80075ee:	e04a      	b.n	8007686 <_dtoa_r+0x68e>
 80075f0:	4615      	mov	r5, r2
 80075f2:	e7f6      	b.n	80075e2 <_dtoa_r+0x5ea>
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <_dtoa_r+0x614>)
 80075f6:	f7f8 ff6f 	bl	80004d8 <__aeabi_dmul>
 80075fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fe:	e7bd      	b.n	800757c <_dtoa_r+0x584>
 8007600:	080091e8 	.word	0x080091e8
 8007604:	080091c0 	.word	0x080091c0
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	40240000 	.word	0x40240000
 8007610:	401c0000 	.word	0x401c0000
 8007614:	40140000 	.word	0x40140000
 8007618:	3fe00000 	.word	0x3fe00000
 800761c:	9d06      	ldr	r5, [sp, #24]
 800761e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f9 f87f 	bl	800072c <__aeabi_ddiv>
 800762e:	f7f9 fa03 	bl	8000a38 <__aeabi_d2iz>
 8007632:	4681      	mov	r9, r0
 8007634:	f7f8 fee6 	bl	8000404 <__aeabi_i2d>
 8007638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800763c:	f7f8 ff4c 	bl	80004d8 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	f7f8 fd8e 	bl	8000168 <__aeabi_dsub>
 800764c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007650:	f805 6b01 	strb.w	r6, [r5], #1
 8007654:	9e06      	ldr	r6, [sp, #24]
 8007656:	4602      	mov	r2, r0
 8007658:	1bae      	subs	r6, r5, r6
 800765a:	45b0      	cmp	r8, r6
 800765c:	460b      	mov	r3, r1
 800765e:	d135      	bne.n	80076cc <_dtoa_r+0x6d4>
 8007660:	f7f8 fd84 	bl	800016c <__adddf3>
 8007664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	f7f9 f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8007670:	b9c8      	cbnz	r0, 80076a6 <_dtoa_r+0x6ae>
 8007672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f9 f995 	bl	80009a8 <__aeabi_dcmpeq>
 800767e:	b110      	cbz	r0, 8007686 <_dtoa_r+0x68e>
 8007680:	f019 0f01 	tst.w	r9, #1
 8007684:	d10f      	bne.n	80076a6 <_dtoa_r+0x6ae>
 8007686:	4659      	mov	r1, fp
 8007688:	4620      	mov	r0, r4
 800768a:	f000 fc9c 	bl	8007fc6 <_Bfree>
 800768e:	2300      	movs	r3, #0
 8007690:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007692:	702b      	strb	r3, [r5, #0]
 8007694:	f10a 0301 	add.w	r3, sl, #1
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800769c:	2b00      	cmp	r3, #0
 800769e:	f43f acf3 	beq.w	8007088 <_dtoa_r+0x90>
 80076a2:	601d      	str	r5, [r3, #0]
 80076a4:	e4f0      	b.n	8007088 <_dtoa_r+0x90>
 80076a6:	4657      	mov	r7, sl
 80076a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ac:	1e6b      	subs	r3, r5, #1
 80076ae:	2a39      	cmp	r2, #57	; 0x39
 80076b0:	d106      	bne.n	80076c0 <_dtoa_r+0x6c8>
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d107      	bne.n	80076c8 <_dtoa_r+0x6d0>
 80076b8:	2330      	movs	r3, #48	; 0x30
 80076ba:	7013      	strb	r3, [r2, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	3701      	adds	r7, #1
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	3201      	adds	r2, #1
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e791      	b.n	80075ec <_dtoa_r+0x5f4>
 80076c8:	461d      	mov	r5, r3
 80076ca:	e7ed      	b.n	80076a8 <_dtoa_r+0x6b0>
 80076cc:	2200      	movs	r2, #0
 80076ce:	4b99      	ldr	r3, [pc, #612]	; (8007934 <_dtoa_r+0x93c>)
 80076d0:	f7f8 ff02 	bl	80004d8 <__aeabi_dmul>
 80076d4:	2200      	movs	r2, #0
 80076d6:	2300      	movs	r3, #0
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	f7f9 f964 	bl	80009a8 <__aeabi_dcmpeq>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d09e      	beq.n	8007622 <_dtoa_r+0x62a>
 80076e4:	e7cf      	b.n	8007686 <_dtoa_r+0x68e>
 80076e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	f000 8088 	beq.w	80077fe <_dtoa_r+0x806>
 80076ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076f0:	2a01      	cmp	r2, #1
 80076f2:	dc6d      	bgt.n	80077d0 <_dtoa_r+0x7d8>
 80076f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d066      	beq.n	80077c8 <_dtoa_r+0x7d0>
 80076fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076fe:	464d      	mov	r5, r9
 8007700:	9e08      	ldr	r6, [sp, #32]
 8007702:	9a07      	ldr	r2, [sp, #28]
 8007704:	2101      	movs	r1, #1
 8007706:	441a      	add	r2, r3
 8007708:	4620      	mov	r0, r4
 800770a:	4499      	add	r9, r3
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	f000 fcfa 	bl	8008106 <__i2b>
 8007712:	4607      	mov	r7, r0
 8007714:	2d00      	cmp	r5, #0
 8007716:	dd0b      	ble.n	8007730 <_dtoa_r+0x738>
 8007718:	9b07      	ldr	r3, [sp, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd08      	ble.n	8007730 <_dtoa_r+0x738>
 800771e:	42ab      	cmp	r3, r5
 8007720:	bfa8      	it	ge
 8007722:	462b      	movge	r3, r5
 8007724:	9a07      	ldr	r2, [sp, #28]
 8007726:	eba9 0903 	sub.w	r9, r9, r3
 800772a:	1aed      	subs	r5, r5, r3
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	b1eb      	cbz	r3, 8007770 <_dtoa_r+0x778>
 8007734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d065      	beq.n	8007806 <_dtoa_r+0x80e>
 800773a:	b18e      	cbz	r6, 8007760 <_dtoa_r+0x768>
 800773c:	4639      	mov	r1, r7
 800773e:	4632      	mov	r2, r6
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fd7f 	bl	8008244 <__pow5mult>
 8007746:	465a      	mov	r2, fp
 8007748:	4601      	mov	r1, r0
 800774a:	4607      	mov	r7, r0
 800774c:	4620      	mov	r0, r4
 800774e:	f000 fce3 	bl	8008118 <__multiply>
 8007752:	4659      	mov	r1, fp
 8007754:	900a      	str	r0, [sp, #40]	; 0x28
 8007756:	4620      	mov	r0, r4
 8007758:	f000 fc35 	bl	8007fc6 <_Bfree>
 800775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775e:	469b      	mov	fp, r3
 8007760:	9b08      	ldr	r3, [sp, #32]
 8007762:	1b9a      	subs	r2, r3, r6
 8007764:	d004      	beq.n	8007770 <_dtoa_r+0x778>
 8007766:	4659      	mov	r1, fp
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fd6b 	bl	8008244 <__pow5mult>
 800776e:	4683      	mov	fp, r0
 8007770:	2101      	movs	r1, #1
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fcc7 	bl	8008106 <__i2b>
 8007778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777a:	4606      	mov	r6, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 81c6 	beq.w	8007b0e <_dtoa_r+0xb16>
 8007782:	461a      	mov	r2, r3
 8007784:	4601      	mov	r1, r0
 8007786:	4620      	mov	r0, r4
 8007788:	f000 fd5c 	bl	8008244 <__pow5mult>
 800778c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800778e:	4606      	mov	r6, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	dc3e      	bgt.n	8007812 <_dtoa_r+0x81a>
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d137      	bne.n	800780a <_dtoa_r+0x812>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d134      	bne.n	800780e <_dtoa_r+0x816>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077aa:	0d1b      	lsrs	r3, r3, #20
 80077ac:	051b      	lsls	r3, r3, #20
 80077ae:	b12b      	cbz	r3, 80077bc <_dtoa_r+0x7c4>
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	f109 0901 	add.w	r9, r9, #1
 80077b6:	3301      	adds	r3, #1
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	2301      	movs	r3, #1
 80077bc:	9308      	str	r3, [sp, #32]
 80077be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d128      	bne.n	8007816 <_dtoa_r+0x81e>
 80077c4:	2001      	movs	r0, #1
 80077c6:	e02e      	b.n	8007826 <_dtoa_r+0x82e>
 80077c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077ce:	e796      	b.n	80076fe <_dtoa_r+0x706>
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	f108 36ff 	add.w	r6, r8, #4294967295
 80077d6:	42b3      	cmp	r3, r6
 80077d8:	bfb7      	itett	lt
 80077da:	9b08      	ldrlt	r3, [sp, #32]
 80077dc:	1b9e      	subge	r6, r3, r6
 80077de:	1af2      	sublt	r2, r6, r3
 80077e0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80077e2:	bfbf      	itttt	lt
 80077e4:	9608      	strlt	r6, [sp, #32]
 80077e6:	189b      	addlt	r3, r3, r2
 80077e8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80077ea:	2600      	movlt	r6, #0
 80077ec:	f1b8 0f00 	cmp.w	r8, #0
 80077f0:	bfb9      	ittee	lt
 80077f2:	eba9 0508 	sublt.w	r5, r9, r8
 80077f6:	2300      	movlt	r3, #0
 80077f8:	464d      	movge	r5, r9
 80077fa:	4643      	movge	r3, r8
 80077fc:	e781      	b.n	8007702 <_dtoa_r+0x70a>
 80077fe:	9e08      	ldr	r6, [sp, #32]
 8007800:	464d      	mov	r5, r9
 8007802:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007804:	e786      	b.n	8007714 <_dtoa_r+0x71c>
 8007806:	9a08      	ldr	r2, [sp, #32]
 8007808:	e7ad      	b.n	8007766 <_dtoa_r+0x76e>
 800780a:	2300      	movs	r3, #0
 800780c:	e7d6      	b.n	80077bc <_dtoa_r+0x7c4>
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	e7d4      	b.n	80077bc <_dtoa_r+0x7c4>
 8007812:	2300      	movs	r3, #0
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	6933      	ldr	r3, [r6, #16]
 8007818:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800781c:	6918      	ldr	r0, [r3, #16]
 800781e:	f000 fc24 	bl	800806a <__hi0bits>
 8007822:	f1c0 0020 	rsb	r0, r0, #32
 8007826:	9b07      	ldr	r3, [sp, #28]
 8007828:	4418      	add	r0, r3
 800782a:	f010 001f 	ands.w	r0, r0, #31
 800782e:	d047      	beq.n	80078c0 <_dtoa_r+0x8c8>
 8007830:	f1c0 0320 	rsb	r3, r0, #32
 8007834:	2b04      	cmp	r3, #4
 8007836:	dd3b      	ble.n	80078b0 <_dtoa_r+0x8b8>
 8007838:	9b07      	ldr	r3, [sp, #28]
 800783a:	f1c0 001c 	rsb	r0, r0, #28
 800783e:	4481      	add	r9, r0
 8007840:	4405      	add	r5, r0
 8007842:	4403      	add	r3, r0
 8007844:	9307      	str	r3, [sp, #28]
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	dd05      	ble.n	8007858 <_dtoa_r+0x860>
 800784c:	4659      	mov	r1, fp
 800784e:	464a      	mov	r2, r9
 8007850:	4620      	mov	r0, r4
 8007852:	f000 fd45 	bl	80082e0 <__lshift>
 8007856:	4683      	mov	fp, r0
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd05      	ble.n	800786a <_dtoa_r+0x872>
 800785e:	4631      	mov	r1, r6
 8007860:	461a      	mov	r2, r3
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fd3c 	bl	80082e0 <__lshift>
 8007868:	4606      	mov	r6, r0
 800786a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786c:	b353      	cbz	r3, 80078c4 <_dtoa_r+0x8cc>
 800786e:	4631      	mov	r1, r6
 8007870:	4658      	mov	r0, fp
 8007872:	f000 fd89 	bl	8008388 <__mcmp>
 8007876:	2800      	cmp	r0, #0
 8007878:	da24      	bge.n	80078c4 <_dtoa_r+0x8cc>
 800787a:	2300      	movs	r3, #0
 800787c:	4659      	mov	r1, fp
 800787e:	220a      	movs	r2, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fbb7 	bl	8007ff4 <__multadd>
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788c:	4683      	mov	fp, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8144 	beq.w	8007b1c <_dtoa_r+0xb24>
 8007894:	2300      	movs	r3, #0
 8007896:	4639      	mov	r1, r7
 8007898:	220a      	movs	r2, #10
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fbaa 	bl	8007ff4 <__multadd>
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	4607      	mov	r7, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc4d      	bgt.n	8007944 <_dtoa_r+0x94c>
 80078a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	dd4a      	ble.n	8007944 <_dtoa_r+0x94c>
 80078ae:	e011      	b.n	80078d4 <_dtoa_r+0x8dc>
 80078b0:	d0c9      	beq.n	8007846 <_dtoa_r+0x84e>
 80078b2:	9a07      	ldr	r2, [sp, #28]
 80078b4:	331c      	adds	r3, #28
 80078b6:	441a      	add	r2, r3
 80078b8:	4499      	add	r9, r3
 80078ba:	441d      	add	r5, r3
 80078bc:	4613      	mov	r3, r2
 80078be:	e7c1      	b.n	8007844 <_dtoa_r+0x84c>
 80078c0:	4603      	mov	r3, r0
 80078c2:	e7f6      	b.n	80078b2 <_dtoa_r+0x8ba>
 80078c4:	f1b8 0f00 	cmp.w	r8, #0
 80078c8:	dc36      	bgt.n	8007938 <_dtoa_r+0x940>
 80078ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	dd33      	ble.n	8007938 <_dtoa_r+0x940>
 80078d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80078d4:	9b04      	ldr	r3, [sp, #16]
 80078d6:	b963      	cbnz	r3, 80078f2 <_dtoa_r+0x8fa>
 80078d8:	4631      	mov	r1, r6
 80078da:	2205      	movs	r2, #5
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fb89 	bl	8007ff4 <__multadd>
 80078e2:	4601      	mov	r1, r0
 80078e4:	4606      	mov	r6, r0
 80078e6:	4658      	mov	r0, fp
 80078e8:	f000 fd4e 	bl	8008388 <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f73f add3 	bgt.w	8007498 <_dtoa_r+0x4a0>
 80078f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078f4:	9d06      	ldr	r5, [sp, #24]
 80078f6:	ea6f 0a03 	mvn.w	sl, r3
 80078fa:	f04f 0900 	mov.w	r9, #0
 80078fe:	4631      	mov	r1, r6
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fb60 	bl	8007fc6 <_Bfree>
 8007906:	2f00      	cmp	r7, #0
 8007908:	f43f aebd 	beq.w	8007686 <_dtoa_r+0x68e>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	d005      	beq.n	800791e <_dtoa_r+0x926>
 8007912:	45b9      	cmp	r9, r7
 8007914:	d003      	beq.n	800791e <_dtoa_r+0x926>
 8007916:	4649      	mov	r1, r9
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fb54 	bl	8007fc6 <_Bfree>
 800791e:	4639      	mov	r1, r7
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fb50 	bl	8007fc6 <_Bfree>
 8007926:	e6ae      	b.n	8007686 <_dtoa_r+0x68e>
 8007928:	2600      	movs	r6, #0
 800792a:	4637      	mov	r7, r6
 800792c:	e7e1      	b.n	80078f2 <_dtoa_r+0x8fa>
 800792e:	46ba      	mov	sl, r7
 8007930:	4637      	mov	r7, r6
 8007932:	e5b1      	b.n	8007498 <_dtoa_r+0x4a0>
 8007934:	40240000 	.word	0x40240000
 8007938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793a:	f8cd 8010 	str.w	r8, [sp, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80f3 	beq.w	8007b2a <_dtoa_r+0xb32>
 8007944:	2d00      	cmp	r5, #0
 8007946:	dd05      	ble.n	8007954 <_dtoa_r+0x95c>
 8007948:	4639      	mov	r1, r7
 800794a:	462a      	mov	r2, r5
 800794c:	4620      	mov	r0, r4
 800794e:	f000 fcc7 	bl	80082e0 <__lshift>
 8007952:	4607      	mov	r7, r0
 8007954:	9b08      	ldr	r3, [sp, #32]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04c      	beq.n	80079f4 <_dtoa_r+0x9fc>
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fafe 	bl	8007f5e <_Balloc>
 8007962:	4605      	mov	r5, r0
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	f107 010c 	add.w	r1, r7, #12
 800796a:	3202      	adds	r2, #2
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	300c      	adds	r0, #12
 8007970:	f000 faea 	bl	8007f48 <memcpy>
 8007974:	2201      	movs	r2, #1
 8007976:	4629      	mov	r1, r5
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fcb1 	bl	80082e0 <__lshift>
 800797e:	46b9      	mov	r9, r7
 8007980:	4607      	mov	r7, r0
 8007982:	9b06      	ldr	r3, [sp, #24]
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	9308      	str	r3, [sp, #32]
 800798e:	4631      	mov	r1, r6
 8007990:	4658      	mov	r0, fp
 8007992:	f7ff faa1 	bl	8006ed8 <quorem>
 8007996:	4649      	mov	r1, r9
 8007998:	4605      	mov	r5, r0
 800799a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 fcf2 	bl	8008388 <__mcmp>
 80079a4:	463a      	mov	r2, r7
 80079a6:	9002      	str	r0, [sp, #8]
 80079a8:	4631      	mov	r1, r6
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fd06 	bl	80083bc <__mdiff>
 80079b0:	68c3      	ldr	r3, [r0, #12]
 80079b2:	4602      	mov	r2, r0
 80079b4:	bb03      	cbnz	r3, 80079f8 <_dtoa_r+0xa00>
 80079b6:	4601      	mov	r1, r0
 80079b8:	9009      	str	r0, [sp, #36]	; 0x24
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fce4 	bl	8008388 <__mcmp>
 80079c0:	4603      	mov	r3, r0
 80079c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c4:	4611      	mov	r1, r2
 80079c6:	4620      	mov	r0, r4
 80079c8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ca:	f000 fafc 	bl	8007fc6 <_Bfree>
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	b9a3      	cbnz	r3, 80079fc <_dtoa_r+0xa04>
 80079d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079d4:	b992      	cbnz	r2, 80079fc <_dtoa_r+0xa04>
 80079d6:	9a08      	ldr	r2, [sp, #32]
 80079d8:	b982      	cbnz	r2, 80079fc <_dtoa_r+0xa04>
 80079da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079de:	d029      	beq.n	8007a34 <_dtoa_r+0xa3c>
 80079e0:	9b02      	ldr	r3, [sp, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd01      	ble.n	80079ea <_dtoa_r+0x9f2>
 80079e6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80079ea:	9b07      	ldr	r3, [sp, #28]
 80079ec:	1c5d      	adds	r5, r3, #1
 80079ee:	f883 8000 	strb.w	r8, [r3]
 80079f2:	e784      	b.n	80078fe <_dtoa_r+0x906>
 80079f4:	4638      	mov	r0, r7
 80079f6:	e7c2      	b.n	800797e <_dtoa_r+0x986>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7e3      	b.n	80079c4 <_dtoa_r+0x9cc>
 80079fc:	9a02      	ldr	r2, [sp, #8]
 80079fe:	2a00      	cmp	r2, #0
 8007a00:	db04      	blt.n	8007a0c <_dtoa_r+0xa14>
 8007a02:	d123      	bne.n	8007a4c <_dtoa_r+0xa54>
 8007a04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a06:	bb0a      	cbnz	r2, 8007a4c <_dtoa_r+0xa54>
 8007a08:	9a08      	ldr	r2, [sp, #32]
 8007a0a:	b9fa      	cbnz	r2, 8007a4c <_dtoa_r+0xa54>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	ddec      	ble.n	80079ea <_dtoa_r+0x9f2>
 8007a10:	4659      	mov	r1, fp
 8007a12:	2201      	movs	r2, #1
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fc63 	bl	80082e0 <__lshift>
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4683      	mov	fp, r0
 8007a1e:	f000 fcb3 	bl	8008388 <__mcmp>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	dc03      	bgt.n	8007a2e <_dtoa_r+0xa36>
 8007a26:	d1e0      	bne.n	80079ea <_dtoa_r+0x9f2>
 8007a28:	f018 0f01 	tst.w	r8, #1
 8007a2c:	d0dd      	beq.n	80079ea <_dtoa_r+0x9f2>
 8007a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a32:	d1d8      	bne.n	80079e6 <_dtoa_r+0x9ee>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	9a07      	ldr	r2, [sp, #28]
 8007a38:	1c5d      	adds	r5, r3, #1
 8007a3a:	2339      	movs	r3, #57	; 0x39
 8007a3c:	7013      	strb	r3, [r2, #0]
 8007a3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a42:	1e6a      	subs	r2, r5, #1
 8007a44:	2b39      	cmp	r3, #57	; 0x39
 8007a46:	d04d      	beq.n	8007ae4 <_dtoa_r+0xaec>
 8007a48:	3301      	adds	r3, #1
 8007a4a:	e052      	b.n	8007af2 <_dtoa_r+0xafa>
 8007a4c:	9a07      	ldr	r2, [sp, #28]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f102 0501 	add.w	r5, r2, #1
 8007a54:	dd06      	ble.n	8007a64 <_dtoa_r+0xa6c>
 8007a56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a5a:	d0eb      	beq.n	8007a34 <_dtoa_r+0xa3c>
 8007a5c:	f108 0801 	add.w	r8, r8, #1
 8007a60:	9b07      	ldr	r3, [sp, #28]
 8007a62:	e7c4      	b.n	80079ee <_dtoa_r+0x9f6>
 8007a64:	9b06      	ldr	r3, [sp, #24]
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	1aeb      	subs	r3, r5, r3
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a70:	d021      	beq.n	8007ab6 <_dtoa_r+0xabe>
 8007a72:	4659      	mov	r1, fp
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 fabb 	bl	8007ff4 <__multadd>
 8007a7e:	45b9      	cmp	r9, r7
 8007a80:	4683      	mov	fp, r0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	f04f 020a 	mov.w	r2, #10
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	d105      	bne.n	8007a9c <_dtoa_r+0xaa4>
 8007a90:	f000 fab0 	bl	8007ff4 <__multadd>
 8007a94:	4681      	mov	r9, r0
 8007a96:	4607      	mov	r7, r0
 8007a98:	9507      	str	r5, [sp, #28]
 8007a9a:	e778      	b.n	800798e <_dtoa_r+0x996>
 8007a9c:	f000 faaa 	bl	8007ff4 <__multadd>
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4681      	mov	r9, r0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	220a      	movs	r2, #10
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 faa3 	bl	8007ff4 <__multadd>
 8007aae:	4607      	mov	r7, r0
 8007ab0:	e7f2      	b.n	8007a98 <_dtoa_r+0xaa0>
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fc10 	bl	80082e0 <__lshift>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4683      	mov	fp, r0
 8007ac4:	f000 fc60 	bl	8008388 <__mcmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	dcb8      	bgt.n	8007a3e <_dtoa_r+0xa46>
 8007acc:	d102      	bne.n	8007ad4 <_dtoa_r+0xadc>
 8007ace:	f018 0f01 	tst.w	r8, #1
 8007ad2:	d1b4      	bne.n	8007a3e <_dtoa_r+0xa46>
 8007ad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ad8:	1e6a      	subs	r2, r5, #1
 8007ada:	2b30      	cmp	r3, #48	; 0x30
 8007adc:	f47f af0f 	bne.w	80078fe <_dtoa_r+0x906>
 8007ae0:	4615      	mov	r5, r2
 8007ae2:	e7f7      	b.n	8007ad4 <_dtoa_r+0xadc>
 8007ae4:	9b06      	ldr	r3, [sp, #24]
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d105      	bne.n	8007af6 <_dtoa_r+0xafe>
 8007aea:	2331      	movs	r3, #49	; 0x31
 8007aec:	9a06      	ldr	r2, [sp, #24]
 8007aee:	f10a 0a01 	add.w	sl, sl, #1
 8007af2:	7013      	strb	r3, [r2, #0]
 8007af4:	e703      	b.n	80078fe <_dtoa_r+0x906>
 8007af6:	4615      	mov	r5, r2
 8007af8:	e7a1      	b.n	8007a3e <_dtoa_r+0xa46>
 8007afa:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <_dtoa_r+0xb60>)
 8007afc:	f7ff bae1 	b.w	80070c2 <_dtoa_r+0xca>
 8007b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f47f aabb 	bne.w	800707e <_dtoa_r+0x86>
 8007b08:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <_dtoa_r+0xb64>)
 8007b0a:	f7ff bada 	b.w	80070c2 <_dtoa_r+0xca>
 8007b0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	f77f ae3f 	ble.w	8007794 <_dtoa_r+0x79c>
 8007b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b18:	9308      	str	r3, [sp, #32]
 8007b1a:	e653      	b.n	80077c4 <_dtoa_r+0x7cc>
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc03      	bgt.n	8007b2a <_dtoa_r+0xb32>
 8007b22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	f73f aed5 	bgt.w	80078d4 <_dtoa_r+0x8dc>
 8007b2a:	9d06      	ldr	r5, [sp, #24]
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4658      	mov	r0, fp
 8007b30:	f7ff f9d2 	bl	8006ed8 <quorem>
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007b3a:	f805 8b01 	strb.w	r8, [r5], #1
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	1aeb      	subs	r3, r5, r3
 8007b42:	429a      	cmp	r2, r3
 8007b44:	ddb5      	ble.n	8007ab2 <_dtoa_r+0xaba>
 8007b46:	4659      	mov	r1, fp
 8007b48:	2300      	movs	r3, #0
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fa51 	bl	8007ff4 <__multadd>
 8007b52:	4683      	mov	fp, r0
 8007b54:	e7ea      	b.n	8007b2c <_dtoa_r+0xb34>
 8007b56:	bf00      	nop
 8007b58:	08009128 	.word	0x08009128
 8007b5c:	0800914f 	.word	0x0800914f

08007b60 <__sflush_r>:
 8007b60:	898a      	ldrh	r2, [r1, #12]
 8007b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b66:	4605      	mov	r5, r0
 8007b68:	0710      	lsls	r0, r2, #28
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	d458      	bmi.n	8007c20 <__sflush_r+0xc0>
 8007b6e:	684b      	ldr	r3, [r1, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc05      	bgt.n	8007b80 <__sflush_r+0x20>
 8007b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dc02      	bgt.n	8007b80 <__sflush_r+0x20>
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	d0f9      	beq.n	8007b7a <__sflush_r+0x1a>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b8c:	682f      	ldr	r7, [r5, #0]
 8007b8e:	6a21      	ldr	r1, [r4, #32]
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	d032      	beq.n	8007bfa <__sflush_r+0x9a>
 8007b94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	075a      	lsls	r2, r3, #29
 8007b9a:	d505      	bpl.n	8007ba8 <__sflush_r+0x48>
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	1ac0      	subs	r0, r0, r3
 8007ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ba2:	b10b      	cbz	r3, 8007ba8 <__sflush_r+0x48>
 8007ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ba6:	1ac0      	subs	r0, r0, r3
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4602      	mov	r2, r0
 8007bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bae:	6a21      	ldr	r1, [r4, #32]
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b0      	blx	r6
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	d106      	bne.n	8007bc8 <__sflush_r+0x68>
 8007bba:	6829      	ldr	r1, [r5, #0]
 8007bbc:	291d      	cmp	r1, #29
 8007bbe:	d848      	bhi.n	8007c52 <__sflush_r+0xf2>
 8007bc0:	4a29      	ldr	r2, [pc, #164]	; (8007c68 <__sflush_r+0x108>)
 8007bc2:	40ca      	lsrs	r2, r1
 8007bc4:	07d6      	lsls	r6, r2, #31
 8007bc6:	d544      	bpl.n	8007c52 <__sflush_r+0xf2>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	6062      	str	r2, [r4, #4]
 8007bcc:	6922      	ldr	r2, [r4, #16]
 8007bce:	04d9      	lsls	r1, r3, #19
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	d504      	bpl.n	8007bde <__sflush_r+0x7e>
 8007bd4:	1c42      	adds	r2, r0, #1
 8007bd6:	d101      	bne.n	8007bdc <__sflush_r+0x7c>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b903      	cbnz	r3, 8007bde <__sflush_r+0x7e>
 8007bdc:	6560      	str	r0, [r4, #84]	; 0x54
 8007bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be0:	602f      	str	r7, [r5, #0]
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d0c9      	beq.n	8007b7a <__sflush_r+0x1a>
 8007be6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bea:	4299      	cmp	r1, r3
 8007bec:	d002      	beq.n	8007bf4 <__sflush_r+0x94>
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fca0 	bl	8008534 <_free_r>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	6360      	str	r0, [r4, #52]	; 0x34
 8007bf8:	e7c0      	b.n	8007b7c <__sflush_r+0x1c>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b0      	blx	r6
 8007c00:	1c41      	adds	r1, r0, #1
 8007c02:	d1c8      	bne.n	8007b96 <__sflush_r+0x36>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0c5      	beq.n	8007b96 <__sflush_r+0x36>
 8007c0a:	2b1d      	cmp	r3, #29
 8007c0c:	d001      	beq.n	8007c12 <__sflush_r+0xb2>
 8007c0e:	2b16      	cmp	r3, #22
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0xb6>
 8007c12:	602f      	str	r7, [r5, #0]
 8007c14:	e7b1      	b.n	8007b7a <__sflush_r+0x1a>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	e7ad      	b.n	8007b7c <__sflush_r+0x1c>
 8007c20:	690f      	ldr	r7, [r1, #16]
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	d0a9      	beq.n	8007b7a <__sflush_r+0x1a>
 8007c26:	0793      	lsls	r3, r2, #30
 8007c28:	bf18      	it	ne
 8007c2a:	2300      	movne	r3, #0
 8007c2c:	680e      	ldr	r6, [r1, #0]
 8007c2e:	bf08      	it	eq
 8007c30:	694b      	ldreq	r3, [r1, #20]
 8007c32:	eba6 0807 	sub.w	r8, r6, r7
 8007c36:	600f      	str	r7, [r1, #0]
 8007c38:	608b      	str	r3, [r1, #8]
 8007c3a:	f1b8 0f00 	cmp.w	r8, #0
 8007c3e:	dd9c      	ble.n	8007b7a <__sflush_r+0x1a>
 8007c40:	4643      	mov	r3, r8
 8007c42:	463a      	mov	r2, r7
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4628      	mov	r0, r5
 8007c48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c4a:	47b0      	blx	r6
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dc06      	bgt.n	8007c5e <__sflush_r+0xfe>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	e78e      	b.n	8007b7c <__sflush_r+0x1c>
 8007c5e:	4407      	add	r7, r0
 8007c60:	eba8 0800 	sub.w	r8, r8, r0
 8007c64:	e7e9      	b.n	8007c3a <__sflush_r+0xda>
 8007c66:	bf00      	nop
 8007c68:	20400001 	.word	0x20400001

08007c6c <_fflush_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	4605      	mov	r5, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b1db      	cbz	r3, 8007cae <_fflush_r+0x42>
 8007c76:	b118      	cbz	r0, 8007c80 <_fflush_r+0x14>
 8007c78:	6983      	ldr	r3, [r0, #24]
 8007c7a:	b90b      	cbnz	r3, 8007c80 <_fflush_r+0x14>
 8007c7c:	f000 f860 	bl	8007d40 <__sinit>
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <_fflush_r+0x48>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d109      	bne.n	8007c9a <_fflush_r+0x2e>
 8007c86:	686c      	ldr	r4, [r5, #4]
 8007c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8c:	b17b      	cbz	r3, 8007cae <_fflush_r+0x42>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4628      	mov	r0, r5
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f7ff bf63 	b.w	8007b60 <__sflush_r>
 8007c9a:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <_fflush_r+0x4c>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	d101      	bne.n	8007ca4 <_fflush_r+0x38>
 8007ca0:	68ac      	ldr	r4, [r5, #8]
 8007ca2:	e7f1      	b.n	8007c88 <_fflush_r+0x1c>
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_fflush_r+0x50>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	bf08      	it	eq
 8007caa:	68ec      	ldreq	r4, [r5, #12]
 8007cac:	e7ec      	b.n	8007c88 <_fflush_r+0x1c>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	0800917c 	.word	0x0800917c
 8007cb8:	0800919c 	.word	0x0800919c
 8007cbc:	0800915c 	.word	0x0800915c

08007cc0 <std>:
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cca:	6083      	str	r3, [r0, #8]
 8007ccc:	8181      	strh	r1, [r0, #12]
 8007cce:	6643      	str	r3, [r0, #100]	; 0x64
 8007cd0:	81c2      	strh	r2, [r0, #14]
 8007cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cd6:	6183      	str	r3, [r0, #24]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	2208      	movs	r2, #8
 8007cdc:	305c      	adds	r0, #92	; 0x5c
 8007cde:	f7fe fc43 	bl	8006568 <memset>
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std+0x38>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	6263      	str	r3, [r4, #36]	; 0x24
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <std+0x3c>)
 8007cea:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cec:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <std+0x40>)
 8007cee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cf0:	4b04      	ldr	r3, [pc, #16]	; (8007d04 <std+0x44>)
 8007cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	bf00      	nop
 8007cf8:	080086a1 	.word	0x080086a1
 8007cfc:	080086c3 	.word	0x080086c3
 8007d00:	080086fb 	.word	0x080086fb
 8007d04:	0800871f 	.word	0x0800871f

08007d08 <_cleanup_r>:
 8007d08:	4901      	ldr	r1, [pc, #4]	; (8007d10 <_cleanup_r+0x8>)
 8007d0a:	f000 b885 	b.w	8007e18 <_fwalk_reent>
 8007d0e:	bf00      	nop
 8007d10:	08007c6d 	.word	0x08007c6d

08007d14 <__sfmoreglue>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	2568      	movs	r5, #104	; 0x68
 8007d18:	1e4a      	subs	r2, r1, #1
 8007d1a:	4355      	muls	r5, r2
 8007d1c:	460e      	mov	r6, r1
 8007d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d22:	f000 fc53 	bl	80085cc <_malloc_r>
 8007d26:	4604      	mov	r4, r0
 8007d28:	b140      	cbz	r0, 8007d3c <__sfmoreglue+0x28>
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d30:	300c      	adds	r0, #12
 8007d32:	60a0      	str	r0, [r4, #8]
 8007d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d38:	f7fe fc16 	bl	8006568 <memset>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}

08007d40 <__sinit>:
 8007d40:	6983      	ldr	r3, [r0, #24]
 8007d42:	b510      	push	{r4, lr}
 8007d44:	4604      	mov	r4, r0
 8007d46:	bb33      	cbnz	r3, 8007d96 <__sinit+0x56>
 8007d48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d4c:	6503      	str	r3, [r0, #80]	; 0x50
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <__sinit+0x58>)
 8007d50:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <__sinit+0x5c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6282      	str	r2, [r0, #40]	; 0x28
 8007d56:	4298      	cmp	r0, r3
 8007d58:	bf04      	itt	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	6183      	streq	r3, [r0, #24]
 8007d5e:	f000 f81f 	bl	8007da0 <__sfp>
 8007d62:	6060      	str	r0, [r4, #4]
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 f81b 	bl	8007da0 <__sfp>
 8007d6a:	60a0      	str	r0, [r4, #8]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 f817 	bl	8007da0 <__sfp>
 8007d72:	2200      	movs	r2, #0
 8007d74:	60e0      	str	r0, [r4, #12]
 8007d76:	2104      	movs	r1, #4
 8007d78:	6860      	ldr	r0, [r4, #4]
 8007d7a:	f7ff ffa1 	bl	8007cc0 <std>
 8007d7e:	2201      	movs	r2, #1
 8007d80:	2109      	movs	r1, #9
 8007d82:	68a0      	ldr	r0, [r4, #8]
 8007d84:	f7ff ff9c 	bl	8007cc0 <std>
 8007d88:	2202      	movs	r2, #2
 8007d8a:	2112      	movs	r1, #18
 8007d8c:	68e0      	ldr	r0, [r4, #12]
 8007d8e:	f7ff ff97 	bl	8007cc0 <std>
 8007d92:	2301      	movs	r3, #1
 8007d94:	61a3      	str	r3, [r4, #24]
 8007d96:	bd10      	pop	{r4, pc}
 8007d98:	08009114 	.word	0x08009114
 8007d9c:	08007d09 	.word	0x08007d09

08007da0 <__sfp>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <__sfp+0x70>)
 8007da4:	4607      	mov	r7, r0
 8007da6:	681e      	ldr	r6, [r3, #0]
 8007da8:	69b3      	ldr	r3, [r6, #24]
 8007daa:	b913      	cbnz	r3, 8007db2 <__sfp+0x12>
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ffc7 	bl	8007d40 <__sinit>
 8007db2:	3648      	adds	r6, #72	; 0x48
 8007db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	d503      	bpl.n	8007dc4 <__sfp+0x24>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	b133      	cbz	r3, 8007dce <__sfp+0x2e>
 8007dc0:	6836      	ldr	r6, [r6, #0]
 8007dc2:	e7f7      	b.n	8007db4 <__sfp+0x14>
 8007dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dc8:	b16d      	cbz	r5, 8007de6 <__sfp+0x46>
 8007dca:	3468      	adds	r4, #104	; 0x68
 8007dcc:	e7f4      	b.n	8007db8 <__sfp+0x18>
 8007dce:	2104      	movs	r1, #4
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ff9f 	bl	8007d14 <__sfmoreglue>
 8007dd6:	6030      	str	r0, [r6, #0]
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1f1      	bne.n	8007dc0 <__sfp+0x20>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	4604      	mov	r4, r0
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4620      	mov	r0, r4
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de6:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <__sfp+0x74>)
 8007de8:	6665      	str	r5, [r4, #100]	; 0x64
 8007dea:	e9c4 5500 	strd	r5, r5, [r4]
 8007dee:	60a5      	str	r5, [r4, #8]
 8007df0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007df4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e00:	f7fe fbb2 	bl	8006568 <memset>
 8007e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e0c:	e7e9      	b.n	8007de2 <__sfp+0x42>
 8007e0e:	bf00      	nop
 8007e10:	08009114 	.word	0x08009114
 8007e14:	ffff0001 	.word	0xffff0001

08007e18 <_fwalk_reent>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4689      	mov	r9, r1
 8007e20:	2600      	movs	r6, #0
 8007e22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e26:	b914      	cbnz	r4, 8007e2e <_fwalk_reent+0x16>
 8007e28:	4630      	mov	r0, r6
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e32:	3f01      	subs	r7, #1
 8007e34:	d501      	bpl.n	8007e3a <_fwalk_reent+0x22>
 8007e36:	6824      	ldr	r4, [r4, #0]
 8007e38:	e7f5      	b.n	8007e26 <_fwalk_reent+0xe>
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d907      	bls.n	8007e50 <_fwalk_reent+0x38>
 8007e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e44:	3301      	adds	r3, #1
 8007e46:	d003      	beq.n	8007e50 <_fwalk_reent+0x38>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	47c8      	blx	r9
 8007e4e:	4306      	orrs	r6, r0
 8007e50:	3568      	adds	r5, #104	; 0x68
 8007e52:	e7ee      	b.n	8007e32 <_fwalk_reent+0x1a>

08007e54 <_localeconv_r>:
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <_localeconv_r+0x14>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6a18      	ldr	r0, [r3, #32]
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <_localeconv_r+0x18>)
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	bf08      	it	eq
 8007e60:	4618      	moveq	r0, r3
 8007e62:	30f0      	adds	r0, #240	; 0xf0
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000078 	.word	0x20000078
 8007e6c:	200000dc 	.word	0x200000dc

08007e70 <__swhatbuf_r>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	460e      	mov	r6, r1
 8007e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e78:	b096      	sub	sp, #88	; 0x58
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	461d      	mov	r5, r3
 8007e80:	da07      	bge.n	8007e92 <__swhatbuf_r+0x22>
 8007e82:	2300      	movs	r3, #0
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	89b3      	ldrh	r3, [r6, #12]
 8007e88:	061a      	lsls	r2, r3, #24
 8007e8a:	d410      	bmi.n	8007eae <__swhatbuf_r+0x3e>
 8007e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e90:	e00e      	b.n	8007eb0 <__swhatbuf_r+0x40>
 8007e92:	466a      	mov	r2, sp
 8007e94:	f000 fc6a 	bl	800876c <_fstat_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	dbf2      	blt.n	8007e82 <__swhatbuf_r+0x12>
 8007e9c:	9a01      	ldr	r2, [sp, #4]
 8007e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ea6:	425a      	negs	r2, r3
 8007ea8:	415a      	adcs	r2, r3
 8007eaa:	602a      	str	r2, [r5, #0]
 8007eac:	e7ee      	b.n	8007e8c <__swhatbuf_r+0x1c>
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	b016      	add	sp, #88	; 0x58
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}

08007eb8 <__smakebuf_r>:
 8007eb8:	898b      	ldrh	r3, [r1, #12]
 8007eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ebc:	079d      	lsls	r5, r3, #30
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	d507      	bpl.n	8007ed4 <__smakebuf_r+0x1c>
 8007ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	2301      	movs	r3, #1
 8007ece:	6163      	str	r3, [r4, #20]
 8007ed0:	b002      	add	sp, #8
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	ab01      	add	r3, sp, #4
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f7ff ffca 	bl	8007e70 <__swhatbuf_r>
 8007edc:	9900      	ldr	r1, [sp, #0]
 8007ede:	4605      	mov	r5, r0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 fb73 	bl	80085cc <_malloc_r>
 8007ee6:	b948      	cbnz	r0, 8007efc <__smakebuf_r+0x44>
 8007ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d4ef      	bmi.n	8007ed0 <__smakebuf_r+0x18>
 8007ef0:	f023 0303 	bic.w	r3, r3, #3
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	e7e3      	b.n	8007ec4 <__smakebuf_r+0xc>
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <__smakebuf_r+0x7c>)
 8007efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	9b00      	ldr	r3, [sp, #0]
 8007f0c:	6120      	str	r0, [r4, #16]
 8007f0e:	6163      	str	r3, [r4, #20]
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	b15b      	cbz	r3, 8007f2c <__smakebuf_r+0x74>
 8007f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f000 fc39 	bl	8008790 <_isatty_r>
 8007f1e:	b128      	cbz	r0, 8007f2c <__smakebuf_r+0x74>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	431d      	orrs	r5, r3
 8007f30:	81a5      	strh	r5, [r4, #12]
 8007f32:	e7cd      	b.n	8007ed0 <__smakebuf_r+0x18>
 8007f34:	08007d09 	.word	0x08007d09

08007f38 <malloc>:
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <malloc+0xc>)
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	f000 bb45 	b.w	80085cc <_malloc_r>
 8007f42:	bf00      	nop
 8007f44:	20000078 	.word	0x20000078

08007f48 <memcpy>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	1e43      	subs	r3, r0, #1
 8007f4c:	440a      	add	r2, r1
 8007f4e:	4291      	cmp	r1, r2
 8007f50:	d100      	bne.n	8007f54 <memcpy+0xc>
 8007f52:	bd10      	pop	{r4, pc}
 8007f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f5c:	e7f7      	b.n	8007f4e <memcpy+0x6>

08007f5e <_Balloc>:
 8007f5e:	b570      	push	{r4, r5, r6, lr}
 8007f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f62:	4604      	mov	r4, r0
 8007f64:	460e      	mov	r6, r1
 8007f66:	b93d      	cbnz	r5, 8007f78 <_Balloc+0x1a>
 8007f68:	2010      	movs	r0, #16
 8007f6a:	f7ff ffe5 	bl	8007f38 <malloc>
 8007f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8007f70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f74:	6005      	str	r5, [r0, #0]
 8007f76:	60c5      	str	r5, [r0, #12]
 8007f78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007f7a:	68eb      	ldr	r3, [r5, #12]
 8007f7c:	b183      	cbz	r3, 8007fa0 <_Balloc+0x42>
 8007f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f86:	b9b8      	cbnz	r0, 8007fb8 <_Balloc+0x5a>
 8007f88:	2101      	movs	r1, #1
 8007f8a:	fa01 f506 	lsl.w	r5, r1, r6
 8007f8e:	1d6a      	adds	r2, r5, #5
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fabf 	bl	8008516 <_calloc_r>
 8007f98:	b160      	cbz	r0, 8007fb4 <_Balloc+0x56>
 8007f9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007f9e:	e00e      	b.n	8007fbe <_Balloc+0x60>
 8007fa0:	2221      	movs	r2, #33	; 0x21
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fab6 	bl	8008516 <_calloc_r>
 8007faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fac:	60e8      	str	r0, [r5, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e4      	bne.n	8007f7e <_Balloc+0x20>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	6802      	ldr	r2, [r0, #0]
 8007fba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc4:	e7f7      	b.n	8007fb6 <_Balloc+0x58>

08007fc6 <_Bfree>:
 8007fc6:	b570      	push	{r4, r5, r6, lr}
 8007fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	b93c      	cbnz	r4, 8007fe0 <_Bfree+0x1a>
 8007fd0:	2010      	movs	r0, #16
 8007fd2:	f7ff ffb1 	bl	8007f38 <malloc>
 8007fd6:	6270      	str	r0, [r6, #36]	; 0x24
 8007fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fdc:	6004      	str	r4, [r0, #0]
 8007fde:	60c4      	str	r4, [r0, #12]
 8007fe0:	b13d      	cbz	r5, 8007ff2 <_Bfree+0x2c>
 8007fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fe4:	686a      	ldr	r2, [r5, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fec:	6029      	str	r1, [r5, #0]
 8007fee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}

08007ff4 <__multadd>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	461f      	mov	r7, r3
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	2300      	movs	r3, #0
 8008000:	690d      	ldr	r5, [r1, #16]
 8008002:	f101 0c14 	add.w	ip, r1, #20
 8008006:	f8dc 0000 	ldr.w	r0, [ip]
 800800a:	3301      	adds	r3, #1
 800800c:	b281      	uxth	r1, r0
 800800e:	fb02 7101 	mla	r1, r2, r1, r7
 8008012:	0c00      	lsrs	r0, r0, #16
 8008014:	0c0f      	lsrs	r7, r1, #16
 8008016:	fb02 7000 	mla	r0, r2, r0, r7
 800801a:	b289      	uxth	r1, r1
 800801c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008020:	429d      	cmp	r5, r3
 8008022:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008026:	f84c 1b04 	str.w	r1, [ip], #4
 800802a:	dcec      	bgt.n	8008006 <__multadd+0x12>
 800802c:	b1d7      	cbz	r7, 8008064 <__multadd+0x70>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	42ab      	cmp	r3, r5
 8008032:	dc12      	bgt.n	800805a <__multadd+0x66>
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4630      	mov	r0, r6
 8008038:	3101      	adds	r1, #1
 800803a:	f7ff ff90 	bl	8007f5e <_Balloc>
 800803e:	4680      	mov	r8, r0
 8008040:	6922      	ldr	r2, [r4, #16]
 8008042:	f104 010c 	add.w	r1, r4, #12
 8008046:	3202      	adds	r2, #2
 8008048:	0092      	lsls	r2, r2, #2
 800804a:	300c      	adds	r0, #12
 800804c:	f7ff ff7c 	bl	8007f48 <memcpy>
 8008050:	4621      	mov	r1, r4
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffb7 	bl	8007fc6 <_Bfree>
 8008058:	4644      	mov	r4, r8
 800805a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800805e:	3501      	adds	r5, #1
 8008060:	615f      	str	r7, [r3, #20]
 8008062:	6125      	str	r5, [r4, #16]
 8008064:	4620      	mov	r0, r4
 8008066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800806a <__hi0bits>:
 800806a:	0c02      	lsrs	r2, r0, #16
 800806c:	0412      	lsls	r2, r2, #16
 800806e:	4603      	mov	r3, r0
 8008070:	b9b2      	cbnz	r2, 80080a0 <__hi0bits+0x36>
 8008072:	0403      	lsls	r3, r0, #16
 8008074:	2010      	movs	r0, #16
 8008076:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800807a:	bf04      	itt	eq
 800807c:	021b      	lsleq	r3, r3, #8
 800807e:	3008      	addeq	r0, #8
 8008080:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008084:	bf04      	itt	eq
 8008086:	011b      	lsleq	r3, r3, #4
 8008088:	3004      	addeq	r0, #4
 800808a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800808e:	bf04      	itt	eq
 8008090:	009b      	lsleq	r3, r3, #2
 8008092:	3002      	addeq	r0, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	db06      	blt.n	80080a6 <__hi0bits+0x3c>
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	d503      	bpl.n	80080a4 <__hi0bits+0x3a>
 800809c:	3001      	adds	r0, #1
 800809e:	4770      	bx	lr
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e8      	b.n	8008076 <__hi0bits+0xc>
 80080a4:	2020      	movs	r0, #32
 80080a6:	4770      	bx	lr

080080a8 <__lo0bits>:
 80080a8:	6803      	ldr	r3, [r0, #0]
 80080aa:	4601      	mov	r1, r0
 80080ac:	f013 0207 	ands.w	r2, r3, #7
 80080b0:	d00b      	beq.n	80080ca <__lo0bits+0x22>
 80080b2:	07da      	lsls	r2, r3, #31
 80080b4:	d423      	bmi.n	80080fe <__lo0bits+0x56>
 80080b6:	0798      	lsls	r0, r3, #30
 80080b8:	bf49      	itett	mi
 80080ba:	085b      	lsrmi	r3, r3, #1
 80080bc:	089b      	lsrpl	r3, r3, #2
 80080be:	2001      	movmi	r0, #1
 80080c0:	600b      	strmi	r3, [r1, #0]
 80080c2:	bf5c      	itt	pl
 80080c4:	600b      	strpl	r3, [r1, #0]
 80080c6:	2002      	movpl	r0, #2
 80080c8:	4770      	bx	lr
 80080ca:	b298      	uxth	r0, r3
 80080cc:	b9a8      	cbnz	r0, 80080fa <__lo0bits+0x52>
 80080ce:	2010      	movs	r0, #16
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80080d6:	bf04      	itt	eq
 80080d8:	0a1b      	lsreq	r3, r3, #8
 80080da:	3008      	addeq	r0, #8
 80080dc:	071a      	lsls	r2, r3, #28
 80080de:	bf04      	itt	eq
 80080e0:	091b      	lsreq	r3, r3, #4
 80080e2:	3004      	addeq	r0, #4
 80080e4:	079a      	lsls	r2, r3, #30
 80080e6:	bf04      	itt	eq
 80080e8:	089b      	lsreq	r3, r3, #2
 80080ea:	3002      	addeq	r0, #2
 80080ec:	07da      	lsls	r2, r3, #31
 80080ee:	d402      	bmi.n	80080f6 <__lo0bits+0x4e>
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	d006      	beq.n	8008102 <__lo0bits+0x5a>
 80080f4:	3001      	adds	r0, #1
 80080f6:	600b      	str	r3, [r1, #0]
 80080f8:	4770      	bx	lr
 80080fa:	4610      	mov	r0, r2
 80080fc:	e7e9      	b.n	80080d2 <__lo0bits+0x2a>
 80080fe:	2000      	movs	r0, #0
 8008100:	4770      	bx	lr
 8008102:	2020      	movs	r0, #32
 8008104:	4770      	bx	lr

08008106 <__i2b>:
 8008106:	b510      	push	{r4, lr}
 8008108:	460c      	mov	r4, r1
 800810a:	2101      	movs	r1, #1
 800810c:	f7ff ff27 	bl	8007f5e <_Balloc>
 8008110:	2201      	movs	r2, #1
 8008112:	6144      	str	r4, [r0, #20]
 8008114:	6102      	str	r2, [r0, #16]
 8008116:	bd10      	pop	{r4, pc}

08008118 <__multiply>:
 8008118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4614      	mov	r4, r2
 800811e:	690a      	ldr	r2, [r1, #16]
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	4688      	mov	r8, r1
 8008124:	429a      	cmp	r2, r3
 8008126:	bfbe      	ittt	lt
 8008128:	460b      	movlt	r3, r1
 800812a:	46a0      	movlt	r8, r4
 800812c:	461c      	movlt	r4, r3
 800812e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008132:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800813a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800813e:	eb07 0609 	add.w	r6, r7, r9
 8008142:	42b3      	cmp	r3, r6
 8008144:	bfb8      	it	lt
 8008146:	3101      	addlt	r1, #1
 8008148:	f7ff ff09 	bl	8007f5e <_Balloc>
 800814c:	f100 0514 	add.w	r5, r0, #20
 8008150:	462b      	mov	r3, r5
 8008152:	2200      	movs	r2, #0
 8008154:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008158:	4573      	cmp	r3, lr
 800815a:	d316      	bcc.n	800818a <__multiply+0x72>
 800815c:	f104 0214 	add.w	r2, r4, #20
 8008160:	f108 0114 	add.w	r1, r8, #20
 8008164:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008168:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	4293      	cmp	r3, r2
 8008174:	d80c      	bhi.n	8008190 <__multiply+0x78>
 8008176:	2e00      	cmp	r6, #0
 8008178:	dd03      	ble.n	8008182 <__multiply+0x6a>
 800817a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800817e:	2b00      	cmp	r3, #0
 8008180:	d05d      	beq.n	800823e <__multiply+0x126>
 8008182:	6106      	str	r6, [r0, #16]
 8008184:	b003      	add	sp, #12
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	f843 2b04 	str.w	r2, [r3], #4
 800818e:	e7e3      	b.n	8008158 <__multiply+0x40>
 8008190:	f8b2 b000 	ldrh.w	fp, [r2]
 8008194:	f1bb 0f00 	cmp.w	fp, #0
 8008198:	d023      	beq.n	80081e2 <__multiply+0xca>
 800819a:	4689      	mov	r9, r1
 800819c:	46ac      	mov	ip, r5
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	f859 4b04 	ldr.w	r4, [r9], #4
 80081a6:	f8dc a000 	ldr.w	sl, [ip]
 80081aa:	b2a3      	uxth	r3, r4
 80081ac:	fa1f fa8a 	uxth.w	sl, sl
 80081b0:	fb0b a303 	mla	r3, fp, r3, sl
 80081b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081b8:	f8dc 4000 	ldr.w	r4, [ip]
 80081bc:	4443      	add	r3, r8
 80081be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081c2:	fb0b 840a 	mla	r4, fp, sl, r8
 80081c6:	46e2      	mov	sl, ip
 80081c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081d2:	454f      	cmp	r7, r9
 80081d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081d8:	f84a 3b04 	str.w	r3, [sl], #4
 80081dc:	d82b      	bhi.n	8008236 <__multiply+0x11e>
 80081de:	f8cc 8004 	str.w	r8, [ip, #4]
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	3204      	adds	r2, #4
 80081e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	d020      	beq.n	8008232 <__multiply+0x11a>
 80081f0:	4689      	mov	r9, r1
 80081f2:	46a8      	mov	r8, r5
 80081f4:	f04f 0b00 	mov.w	fp, #0
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	f8b9 c000 	ldrh.w	ip, [r9]
 80081fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008202:	b29b      	uxth	r3, r3
 8008204:	fb0a 440c 	mla	r4, sl, ip, r4
 8008208:	46c4      	mov	ip, r8
 800820a:	445c      	add	r4, fp
 800820c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008210:	f84c 3b04 	str.w	r3, [ip], #4
 8008214:	f859 3b04 	ldr.w	r3, [r9], #4
 8008218:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800821c:	0c1b      	lsrs	r3, r3, #16
 800821e:	fb0a b303 	mla	r3, sl, r3, fp
 8008222:	454f      	cmp	r7, r9
 8008224:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008228:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800822c:	d805      	bhi.n	800823a <__multiply+0x122>
 800822e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008232:	3504      	adds	r5, #4
 8008234:	e79b      	b.n	800816e <__multiply+0x56>
 8008236:	46d4      	mov	ip, sl
 8008238:	e7b3      	b.n	80081a2 <__multiply+0x8a>
 800823a:	46e0      	mov	r8, ip
 800823c:	e7dd      	b.n	80081fa <__multiply+0xe2>
 800823e:	3e01      	subs	r6, #1
 8008240:	e799      	b.n	8008176 <__multiply+0x5e>
	...

08008244 <__pow5mult>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4615      	mov	r5, r2
 800824a:	f012 0203 	ands.w	r2, r2, #3
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	d007      	beq.n	8008264 <__pow5mult+0x20>
 8008254:	4c21      	ldr	r4, [pc, #132]	; (80082dc <__pow5mult+0x98>)
 8008256:	3a01      	subs	r2, #1
 8008258:	2300      	movs	r3, #0
 800825a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800825e:	f7ff fec9 	bl	8007ff4 <__multadd>
 8008262:	4607      	mov	r7, r0
 8008264:	10ad      	asrs	r5, r5, #2
 8008266:	d035      	beq.n	80082d4 <__pow5mult+0x90>
 8008268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800826a:	b93c      	cbnz	r4, 800827c <__pow5mult+0x38>
 800826c:	2010      	movs	r0, #16
 800826e:	f7ff fe63 	bl	8007f38 <malloc>
 8008272:	6270      	str	r0, [r6, #36]	; 0x24
 8008274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008278:	6004      	str	r4, [r0, #0]
 800827a:	60c4      	str	r4, [r0, #12]
 800827c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008284:	b94c      	cbnz	r4, 800829a <__pow5mult+0x56>
 8008286:	f240 2171 	movw	r1, #625	; 0x271
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff ff3b 	bl	8008106 <__i2b>
 8008290:	2300      	movs	r3, #0
 8008292:	4604      	mov	r4, r0
 8008294:	f8c8 0008 	str.w	r0, [r8, #8]
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	07eb      	lsls	r3, r5, #31
 80082a0:	d50a      	bpl.n	80082b8 <__pow5mult+0x74>
 80082a2:	4639      	mov	r1, r7
 80082a4:	4622      	mov	r2, r4
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff36 	bl	8008118 <__multiply>
 80082ac:	4681      	mov	r9, r0
 80082ae:	4639      	mov	r1, r7
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff fe88 	bl	8007fc6 <_Bfree>
 80082b6:	464f      	mov	r7, r9
 80082b8:	106d      	asrs	r5, r5, #1
 80082ba:	d00b      	beq.n	80082d4 <__pow5mult+0x90>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	b938      	cbnz	r0, 80082d0 <__pow5mult+0x8c>
 80082c0:	4622      	mov	r2, r4
 80082c2:	4621      	mov	r1, r4
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ff27 	bl	8008118 <__multiply>
 80082ca:	6020      	str	r0, [r4, #0]
 80082cc:	f8c0 8000 	str.w	r8, [r0]
 80082d0:	4604      	mov	r4, r0
 80082d2:	e7e4      	b.n	800829e <__pow5mult+0x5a>
 80082d4:	4638      	mov	r0, r7
 80082d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082da:	bf00      	nop
 80082dc:	080092b0 	.word	0x080092b0

080082e0 <__lshift>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	4607      	mov	r7, r0
 80082e8:	4616      	mov	r6, r2
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082f0:	eb0a 0903 	add.w	r9, sl, r3
 80082f4:	6849      	ldr	r1, [r1, #4]
 80082f6:	68a3      	ldr	r3, [r4, #8]
 80082f8:	f109 0501 	add.w	r5, r9, #1
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	db32      	blt.n	8008366 <__lshift+0x86>
 8008300:	4638      	mov	r0, r7
 8008302:	f7ff fe2c 	bl	8007f5e <_Balloc>
 8008306:	2300      	movs	r3, #0
 8008308:	4680      	mov	r8, r0
 800830a:	461a      	mov	r2, r3
 800830c:	f100 0114 	add.w	r1, r0, #20
 8008310:	4553      	cmp	r3, sl
 8008312:	db2b      	blt.n	800836c <__lshift+0x8c>
 8008314:	6920      	ldr	r0, [r4, #16]
 8008316:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800831a:	f104 0314 	add.w	r3, r4, #20
 800831e:	f016 021f 	ands.w	r2, r6, #31
 8008322:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008326:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800832a:	d025      	beq.n	8008378 <__lshift+0x98>
 800832c:	2000      	movs	r0, #0
 800832e:	f1c2 0e20 	rsb	lr, r2, #32
 8008332:	468a      	mov	sl, r1
 8008334:	681e      	ldr	r6, [r3, #0]
 8008336:	4096      	lsls	r6, r2
 8008338:	4330      	orrs	r0, r6
 800833a:	f84a 0b04 	str.w	r0, [sl], #4
 800833e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008342:	459c      	cmp	ip, r3
 8008344:	fa20 f00e 	lsr.w	r0, r0, lr
 8008348:	d814      	bhi.n	8008374 <__lshift+0x94>
 800834a:	6048      	str	r0, [r1, #4]
 800834c:	b108      	cbz	r0, 8008352 <__lshift+0x72>
 800834e:	f109 0502 	add.w	r5, r9, #2
 8008352:	3d01      	subs	r5, #1
 8008354:	4638      	mov	r0, r7
 8008356:	f8c8 5010 	str.w	r5, [r8, #16]
 800835a:	4621      	mov	r1, r4
 800835c:	f7ff fe33 	bl	8007fc6 <_Bfree>
 8008360:	4640      	mov	r0, r8
 8008362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008366:	3101      	adds	r1, #1
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	e7c7      	b.n	80082fc <__lshift+0x1c>
 800836c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008370:	3301      	adds	r3, #1
 8008372:	e7cd      	b.n	8008310 <__lshift+0x30>
 8008374:	4651      	mov	r1, sl
 8008376:	e7dc      	b.n	8008332 <__lshift+0x52>
 8008378:	3904      	subs	r1, #4
 800837a:	f853 2b04 	ldr.w	r2, [r3], #4
 800837e:	459c      	cmp	ip, r3
 8008380:	f841 2f04 	str.w	r2, [r1, #4]!
 8008384:	d8f9      	bhi.n	800837a <__lshift+0x9a>
 8008386:	e7e4      	b.n	8008352 <__lshift+0x72>

08008388 <__mcmp>:
 8008388:	6903      	ldr	r3, [r0, #16]
 800838a:	690a      	ldr	r2, [r1, #16]
 800838c:	b530      	push	{r4, r5, lr}
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	d10c      	bne.n	80083ac <__mcmp+0x24>
 8008392:	0092      	lsls	r2, r2, #2
 8008394:	3014      	adds	r0, #20
 8008396:	3114      	adds	r1, #20
 8008398:	1884      	adds	r4, r0, r2
 800839a:	4411      	add	r1, r2
 800839c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083a4:	4295      	cmp	r5, r2
 80083a6:	d003      	beq.n	80083b0 <__mcmp+0x28>
 80083a8:	d305      	bcc.n	80083b6 <__mcmp+0x2e>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4618      	mov	r0, r3
 80083ae:	bd30      	pop	{r4, r5, pc}
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d3f3      	bcc.n	800839c <__mcmp+0x14>
 80083b4:	e7fa      	b.n	80083ac <__mcmp+0x24>
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	e7f7      	b.n	80083ac <__mcmp+0x24>

080083bc <__mdiff>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	460d      	mov	r5, r1
 80083c2:	4607      	mov	r7, r0
 80083c4:	4611      	mov	r1, r2
 80083c6:	4628      	mov	r0, r5
 80083c8:	4614      	mov	r4, r2
 80083ca:	f7ff ffdd 	bl	8008388 <__mcmp>
 80083ce:	1e06      	subs	r6, r0, #0
 80083d0:	d108      	bne.n	80083e4 <__mdiff+0x28>
 80083d2:	4631      	mov	r1, r6
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff fdc2 	bl	8007f5e <_Balloc>
 80083da:	2301      	movs	r3, #1
 80083dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	bfa4      	itt	ge
 80083e6:	4623      	movge	r3, r4
 80083e8:	462c      	movge	r4, r5
 80083ea:	4638      	mov	r0, r7
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	bfa6      	itte	ge
 80083f0:	461d      	movge	r5, r3
 80083f2:	2600      	movge	r6, #0
 80083f4:	2601      	movlt	r6, #1
 80083f6:	f7ff fdb2 	bl	8007f5e <_Balloc>
 80083fa:	f04f 0e00 	mov.w	lr, #0
 80083fe:	60c6      	str	r6, [r0, #12]
 8008400:	692b      	ldr	r3, [r5, #16]
 8008402:	6926      	ldr	r6, [r4, #16]
 8008404:	f104 0214 	add.w	r2, r4, #20
 8008408:	f105 0914 	add.w	r9, r5, #20
 800840c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008410:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008414:	f100 0114 	add.w	r1, r0, #20
 8008418:	f852 ab04 	ldr.w	sl, [r2], #4
 800841c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008420:	fa1f f38a 	uxth.w	r3, sl
 8008424:	4473      	add	r3, lr
 8008426:	b2ac      	uxth	r4, r5
 8008428:	1b1b      	subs	r3, r3, r4
 800842a:	0c2c      	lsrs	r4, r5, #16
 800842c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008430:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008434:	b29b      	uxth	r3, r3
 8008436:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800843a:	45c8      	cmp	r8, r9
 800843c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008440:	4694      	mov	ip, r2
 8008442:	f841 4b04 	str.w	r4, [r1], #4
 8008446:	d8e7      	bhi.n	8008418 <__mdiff+0x5c>
 8008448:	45bc      	cmp	ip, r7
 800844a:	d304      	bcc.n	8008456 <__mdiff+0x9a>
 800844c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008450:	b183      	cbz	r3, 8008474 <__mdiff+0xb8>
 8008452:	6106      	str	r6, [r0, #16]
 8008454:	e7c4      	b.n	80083e0 <__mdiff+0x24>
 8008456:	f85c 4b04 	ldr.w	r4, [ip], #4
 800845a:	b2a2      	uxth	r2, r4
 800845c:	4472      	add	r2, lr
 800845e:	1413      	asrs	r3, r2, #16
 8008460:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008464:	b292      	uxth	r2, r2
 8008466:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800846a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800846e:	f841 2b04 	str.w	r2, [r1], #4
 8008472:	e7e9      	b.n	8008448 <__mdiff+0x8c>
 8008474:	3e01      	subs	r6, #1
 8008476:	e7e9      	b.n	800844c <__mdiff+0x90>

08008478 <__d2b>:
 8008478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800847c:	461c      	mov	r4, r3
 800847e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008482:	2101      	movs	r1, #1
 8008484:	4690      	mov	r8, r2
 8008486:	f7ff fd6a 	bl	8007f5e <_Balloc>
 800848a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800848e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008492:	4607      	mov	r7, r0
 8008494:	bb34      	cbnz	r4, 80084e4 <__d2b+0x6c>
 8008496:	9201      	str	r2, [sp, #4]
 8008498:	f1b8 0200 	subs.w	r2, r8, #0
 800849c:	d027      	beq.n	80084ee <__d2b+0x76>
 800849e:	a802      	add	r0, sp, #8
 80084a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80084a4:	f7ff fe00 	bl	80080a8 <__lo0bits>
 80084a8:	9900      	ldr	r1, [sp, #0]
 80084aa:	b1f0      	cbz	r0, 80084ea <__d2b+0x72>
 80084ac:	9a01      	ldr	r2, [sp, #4]
 80084ae:	f1c0 0320 	rsb	r3, r0, #32
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	430b      	orrs	r3, r1
 80084b8:	40c2      	lsrs	r2, r0
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	9201      	str	r2, [sp, #4]
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2102      	movne	r1, #2
 80084c6:	2101      	moveq	r1, #1
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	6139      	str	r1, [r7, #16]
 80084cc:	b1c4      	cbz	r4, 8008500 <__d2b+0x88>
 80084ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084d2:	4404      	add	r4, r0
 80084d4:	6034      	str	r4, [r6, #0]
 80084d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084da:	6028      	str	r0, [r5, #0]
 80084dc:	4638      	mov	r0, r7
 80084de:	b002      	add	sp, #8
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80084e8:	e7d5      	b.n	8008496 <__d2b+0x1e>
 80084ea:	6179      	str	r1, [r7, #20]
 80084ec:	e7e7      	b.n	80084be <__d2b+0x46>
 80084ee:	a801      	add	r0, sp, #4
 80084f0:	f7ff fdda 	bl	80080a8 <__lo0bits>
 80084f4:	2101      	movs	r1, #1
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	6139      	str	r1, [r7, #16]
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	3020      	adds	r0, #32
 80084fe:	e7e5      	b.n	80084cc <__d2b+0x54>
 8008500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008504:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	6918      	ldr	r0, [r3, #16]
 800850c:	f7ff fdad 	bl	800806a <__hi0bits>
 8008510:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008514:	e7e1      	b.n	80084da <__d2b+0x62>

08008516 <_calloc_r>:
 8008516:	b538      	push	{r3, r4, r5, lr}
 8008518:	fb02 f401 	mul.w	r4, r2, r1
 800851c:	4621      	mov	r1, r4
 800851e:	f000 f855 	bl	80085cc <_malloc_r>
 8008522:	4605      	mov	r5, r0
 8008524:	b118      	cbz	r0, 800852e <_calloc_r+0x18>
 8008526:	4622      	mov	r2, r4
 8008528:	2100      	movs	r1, #0
 800852a:	f7fe f81d 	bl	8006568 <memset>
 800852e:	4628      	mov	r0, r5
 8008530:	bd38      	pop	{r3, r4, r5, pc}
	...

08008534 <_free_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4605      	mov	r5, r0
 8008538:	2900      	cmp	r1, #0
 800853a:	d043      	beq.n	80085c4 <_free_r+0x90>
 800853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008540:	1f0c      	subs	r4, r1, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfb8      	it	lt
 8008546:	18e4      	addlt	r4, r4, r3
 8008548:	f000 f956 	bl	80087f8 <__malloc_lock>
 800854c:	4a1e      	ldr	r2, [pc, #120]	; (80085c8 <_free_r+0x94>)
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	4610      	mov	r0, r2
 8008552:	b933      	cbnz	r3, 8008562 <_free_r+0x2e>
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6014      	str	r4, [r2, #0]
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855e:	f000 b94c 	b.w	80087fa <__malloc_unlock>
 8008562:	42a3      	cmp	r3, r4
 8008564:	d90b      	bls.n	800857e <_free_r+0x4a>
 8008566:	6821      	ldr	r1, [r4, #0]
 8008568:	1862      	adds	r2, r4, r1
 800856a:	4293      	cmp	r3, r2
 800856c:	bf01      	itttt	eq
 800856e:	681a      	ldreq	r2, [r3, #0]
 8008570:	685b      	ldreq	r3, [r3, #4]
 8008572:	1852      	addeq	r2, r2, r1
 8008574:	6022      	streq	r2, [r4, #0]
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	6004      	str	r4, [r0, #0]
 800857a:	e7ed      	b.n	8008558 <_free_r+0x24>
 800857c:	4613      	mov	r3, r2
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	b10a      	cbz	r2, 8008586 <_free_r+0x52>
 8008582:	42a2      	cmp	r2, r4
 8008584:	d9fa      	bls.n	800857c <_free_r+0x48>
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	1858      	adds	r0, r3, r1
 800858a:	42a0      	cmp	r0, r4
 800858c:	d10b      	bne.n	80085a6 <_free_r+0x72>
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	4401      	add	r1, r0
 8008592:	1858      	adds	r0, r3, r1
 8008594:	4282      	cmp	r2, r0
 8008596:	6019      	str	r1, [r3, #0]
 8008598:	d1de      	bne.n	8008558 <_free_r+0x24>
 800859a:	6810      	ldr	r0, [r2, #0]
 800859c:	6852      	ldr	r2, [r2, #4]
 800859e:	4401      	add	r1, r0
 80085a0:	6019      	str	r1, [r3, #0]
 80085a2:	605a      	str	r2, [r3, #4]
 80085a4:	e7d8      	b.n	8008558 <_free_r+0x24>
 80085a6:	d902      	bls.n	80085ae <_free_r+0x7a>
 80085a8:	230c      	movs	r3, #12
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	e7d4      	b.n	8008558 <_free_r+0x24>
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1821      	adds	r1, r4, r0
 80085b2:	428a      	cmp	r2, r1
 80085b4:	bf01      	itttt	eq
 80085b6:	6811      	ldreq	r1, [r2, #0]
 80085b8:	6852      	ldreq	r2, [r2, #4]
 80085ba:	1809      	addeq	r1, r1, r0
 80085bc:	6021      	streq	r1, [r4, #0]
 80085be:	6062      	str	r2, [r4, #4]
 80085c0:	605c      	str	r4, [r3, #4]
 80085c2:	e7c9      	b.n	8008558 <_free_r+0x24>
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	20000484 	.word	0x20000484

080085cc <_malloc_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	1ccd      	adds	r5, r1, #3
 80085d0:	f025 0503 	bic.w	r5, r5, #3
 80085d4:	3508      	adds	r5, #8
 80085d6:	2d0c      	cmp	r5, #12
 80085d8:	bf38      	it	cc
 80085da:	250c      	movcc	r5, #12
 80085dc:	2d00      	cmp	r5, #0
 80085de:	4606      	mov	r6, r0
 80085e0:	db01      	blt.n	80085e6 <_malloc_r+0x1a>
 80085e2:	42a9      	cmp	r1, r5
 80085e4:	d903      	bls.n	80085ee <_malloc_r+0x22>
 80085e6:	230c      	movs	r3, #12
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	2000      	movs	r0, #0
 80085ec:	bd70      	pop	{r4, r5, r6, pc}
 80085ee:	f000 f903 	bl	80087f8 <__malloc_lock>
 80085f2:	4a21      	ldr	r2, [pc, #132]	; (8008678 <_malloc_r+0xac>)
 80085f4:	6814      	ldr	r4, [r2, #0]
 80085f6:	4621      	mov	r1, r4
 80085f8:	b991      	cbnz	r1, 8008620 <_malloc_r+0x54>
 80085fa:	4c20      	ldr	r4, [pc, #128]	; (800867c <_malloc_r+0xb0>)
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	b91b      	cbnz	r3, 8008608 <_malloc_r+0x3c>
 8008600:	4630      	mov	r0, r6
 8008602:	f000 f83d 	bl	8008680 <_sbrk_r>
 8008606:	6020      	str	r0, [r4, #0]
 8008608:	4629      	mov	r1, r5
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f838 	bl	8008680 <_sbrk_r>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d124      	bne.n	800865e <_malloc_r+0x92>
 8008614:	230c      	movs	r3, #12
 8008616:	4630      	mov	r0, r6
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	f000 f8ee 	bl	80087fa <__malloc_unlock>
 800861e:	e7e4      	b.n	80085ea <_malloc_r+0x1e>
 8008620:	680b      	ldr	r3, [r1, #0]
 8008622:	1b5b      	subs	r3, r3, r5
 8008624:	d418      	bmi.n	8008658 <_malloc_r+0x8c>
 8008626:	2b0b      	cmp	r3, #11
 8008628:	d90f      	bls.n	800864a <_malloc_r+0x7e>
 800862a:	600b      	str	r3, [r1, #0]
 800862c:	18cc      	adds	r4, r1, r3
 800862e:	50cd      	str	r5, [r1, r3]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f8e2 	bl	80087fa <__malloc_unlock>
 8008636:	f104 000b 	add.w	r0, r4, #11
 800863a:	1d23      	adds	r3, r4, #4
 800863c:	f020 0007 	bic.w	r0, r0, #7
 8008640:	1ac3      	subs	r3, r0, r3
 8008642:	d0d3      	beq.n	80085ec <_malloc_r+0x20>
 8008644:	425a      	negs	r2, r3
 8008646:	50e2      	str	r2, [r4, r3]
 8008648:	e7d0      	b.n	80085ec <_malloc_r+0x20>
 800864a:	684b      	ldr	r3, [r1, #4]
 800864c:	428c      	cmp	r4, r1
 800864e:	bf16      	itet	ne
 8008650:	6063      	strne	r3, [r4, #4]
 8008652:	6013      	streq	r3, [r2, #0]
 8008654:	460c      	movne	r4, r1
 8008656:	e7eb      	b.n	8008630 <_malloc_r+0x64>
 8008658:	460c      	mov	r4, r1
 800865a:	6849      	ldr	r1, [r1, #4]
 800865c:	e7cc      	b.n	80085f8 <_malloc_r+0x2c>
 800865e:	1cc4      	adds	r4, r0, #3
 8008660:	f024 0403 	bic.w	r4, r4, #3
 8008664:	42a0      	cmp	r0, r4
 8008666:	d005      	beq.n	8008674 <_malloc_r+0xa8>
 8008668:	1a21      	subs	r1, r4, r0
 800866a:	4630      	mov	r0, r6
 800866c:	f000 f808 	bl	8008680 <_sbrk_r>
 8008670:	3001      	adds	r0, #1
 8008672:	d0cf      	beq.n	8008614 <_malloc_r+0x48>
 8008674:	6025      	str	r5, [r4, #0]
 8008676:	e7db      	b.n	8008630 <_malloc_r+0x64>
 8008678:	20000484 	.word	0x20000484
 800867c:	20000488 	.word	0x20000488

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	2300      	movs	r3, #0
 8008684:	4c05      	ldr	r4, [pc, #20]	; (800869c <_sbrk_r+0x1c>)
 8008686:	4605      	mov	r5, r0
 8008688:	4608      	mov	r0, r1
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	f7fd fd60 	bl	8006150 <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200006b0 	.word	0x200006b0

080086a0 <__sread>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	f000 f8a8 	bl	80087fc <_read_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	bfab      	itete	ge
 80086b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086b2:	89a3      	ldrhlt	r3, [r4, #12]
 80086b4:	181b      	addge	r3, r3, r0
 80086b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ba:	bfac      	ite	ge
 80086bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086be:	81a3      	strhlt	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__swrite>:
 80086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	461f      	mov	r7, r3
 80086c8:	898b      	ldrh	r3, [r1, #12]
 80086ca:	4605      	mov	r5, r0
 80086cc:	05db      	lsls	r3, r3, #23
 80086ce:	460c      	mov	r4, r1
 80086d0:	4616      	mov	r6, r2
 80086d2:	d505      	bpl.n	80086e0 <__swrite+0x1e>
 80086d4:	2302      	movs	r3, #2
 80086d6:	2200      	movs	r2, #0
 80086d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086dc:	f000 f868 	bl	80087b0 <_lseek_r>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	4632      	mov	r2, r6
 80086e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ee:	463b      	mov	r3, r7
 80086f0:	4628      	mov	r0, r5
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	f000 b817 	b.w	8008728 <_write_r>

080086fa <__sseek>:
 80086fa:	b510      	push	{r4, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008702:	f000 f855 	bl	80087b0 <_lseek_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	bf15      	itete	ne
 800870c:	6560      	strne	r0, [r4, #84]	; 0x54
 800870e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008716:	81a3      	strheq	r3, [r4, #12]
 8008718:	bf18      	it	ne
 800871a:	81a3      	strhne	r3, [r4, #12]
 800871c:	bd10      	pop	{r4, pc}

0800871e <__sclose>:
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 b813 	b.w	800874c <_close_r>
	...

08008728 <_write_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	2200      	movs	r2, #0
 8008732:	4c05      	ldr	r4, [pc, #20]	; (8008748 <_write_r+0x20>)
 8008734:	6022      	str	r2, [r4, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7fd fcf0 	bl	800611c <_write>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_write_r+0x1e>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	b103      	cbz	r3, 8008746 <_write_r+0x1e>
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200006b0 	.word	0x200006b0

0800874c <_close_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	2300      	movs	r3, #0
 8008750:	4c05      	ldr	r4, [pc, #20]	; (8008768 <_close_r+0x1c>)
 8008752:	4605      	mov	r5, r0
 8008754:	4608      	mov	r0, r1
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	f7fd fcee 	bl	8006138 <_close>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_close_r+0x1a>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	b103      	cbz	r3, 8008766 <_close_r+0x1a>
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200006b0 	.word	0x200006b0

0800876c <_fstat_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	2300      	movs	r3, #0
 8008770:	4c06      	ldr	r4, [pc, #24]	; (800878c <_fstat_r+0x20>)
 8008772:	4605      	mov	r5, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	f7fd fce0 	bl	800613e <_fstat>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d102      	bne.n	8008788 <_fstat_r+0x1c>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	b103      	cbz	r3, 8008788 <_fstat_r+0x1c>
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	200006b0 	.word	0x200006b0

08008790 <_isatty_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	2300      	movs	r3, #0
 8008794:	4c05      	ldr	r4, [pc, #20]	; (80087ac <_isatty_r+0x1c>)
 8008796:	4605      	mov	r5, r0
 8008798:	4608      	mov	r0, r1
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	f7fd fcd4 	bl	8006148 <_isatty>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_isatty_r+0x1a>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_isatty_r+0x1a>
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	200006b0 	.word	0x200006b0

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	2200      	movs	r2, #0
 80087ba:	4c05      	ldr	r4, [pc, #20]	; (80087d0 <_lseek_r+0x20>)
 80087bc:	6022      	str	r2, [r4, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7fd fcc4 	bl	800614c <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	200006b0 	.word	0x200006b0

080087d4 <__ascii_mbtowc>:
 80087d4:	b082      	sub	sp, #8
 80087d6:	b901      	cbnz	r1, 80087da <__ascii_mbtowc+0x6>
 80087d8:	a901      	add	r1, sp, #4
 80087da:	b142      	cbz	r2, 80087ee <__ascii_mbtowc+0x1a>
 80087dc:	b14b      	cbz	r3, 80087f2 <__ascii_mbtowc+0x1e>
 80087de:	7813      	ldrb	r3, [r2, #0]
 80087e0:	600b      	str	r3, [r1, #0]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	1c10      	adds	r0, r2, #0
 80087e6:	bf18      	it	ne
 80087e8:	2001      	movne	r0, #1
 80087ea:	b002      	add	sp, #8
 80087ec:	4770      	bx	lr
 80087ee:	4610      	mov	r0, r2
 80087f0:	e7fb      	b.n	80087ea <__ascii_mbtowc+0x16>
 80087f2:	f06f 0001 	mvn.w	r0, #1
 80087f6:	e7f8      	b.n	80087ea <__ascii_mbtowc+0x16>

080087f8 <__malloc_lock>:
 80087f8:	4770      	bx	lr

080087fa <__malloc_unlock>:
 80087fa:	4770      	bx	lr

080087fc <_read_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4605      	mov	r5, r0
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	2200      	movs	r2, #0
 8008806:	4c05      	ldr	r4, [pc, #20]	; (800881c <_read_r+0x20>)
 8008808:	6022      	str	r2, [r4, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f7fd fc78 	bl	8006100 <_read>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_read_r+0x1e>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	b103      	cbz	r3, 800881a <_read_r+0x1e>
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	200006b0 	.word	0x200006b0

08008820 <__ascii_wctomb>:
 8008820:	b149      	cbz	r1, 8008836 <__ascii_wctomb+0x16>
 8008822:	2aff      	cmp	r2, #255	; 0xff
 8008824:	bf8b      	itete	hi
 8008826:	238a      	movhi	r3, #138	; 0x8a
 8008828:	700a      	strbls	r2, [r1, #0]
 800882a:	6003      	strhi	r3, [r0, #0]
 800882c:	2001      	movls	r0, #1
 800882e:	bf88      	it	hi
 8008830:	f04f 30ff 	movhi.w	r0, #4294967295
 8008834:	4770      	bx	lr
 8008836:	4608      	mov	r0, r1
 8008838:	4770      	bx	lr
	...

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
